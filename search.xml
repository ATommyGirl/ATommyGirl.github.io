<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1Q84中的哲学</title>
    <url>/2020/03/07/1Q84%20%E4%B8%AD%E7%9A%84%E5%93%B2%E5%AD%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li>人被赋予希望，以此为燃料为目的度过人生。没有希望，人就活不下去。然而这和抛硬币相同。正面向上还是反面向上，只有等硬币落下来才能知道。</li>
</ul>
<span id="more"></span>

<ul>
<li><p>灯台之下最黑暗。</p>
</li>
<li><p>有光明的地方就必然有阴影，有阴影的地方就必然有光明。不存在没有光明的阴影，也不存在没有阴影的光明。</p>
</li>
<li><p>人并不是大限一到就溘然长逝的，而是先从内部缓缓地死去，最终迎来最后结算的日子。谁都逃脱不了。人必须为收下的东西支付代价。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>2022年小结儿</title>
    <url>/2022/12/31/2022%E5%B9%B4%E5%B0%8F%E7%BB%93%E5%84%BF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/kn_dou.PNG" style="zoom:60%;">

<p>Ummmmm……</p>
<hr>
<p>今年一整个的状态就是 Ummmmm……</p>
<h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><h3 id="iOS-开发"><a href="#iOS-开发" class="headerlink" title="iOS 开发"></a>iOS 开发</h3><p>&#8195;&#8195;填坑。给别人擦屁股、填坑；给自己挖坑、填坑。唯一的进步是这几天和 WKWebView 作斗争有了些发现和心得。So…Ummmmm……</p>
<h3 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h3><p>&#8195;&#8195;不吹不黑还是有进步的，我的风格是以真诚取胜 - 待人真诚、待事用心。「对事不对人」是很难的一件事，不是每个人都能做得到，但想真诚那就要以这个为基准，每次当我想耍小性子针对谁的时候，就会先回想一下这句话，毕竟己所不欲勿施于人。实在看不顺眼的人，就 let it go 吧…</p>
<p>&#8195;&#8195;用真心…</p>
<h3 id="拓宽技术栈"><a href="#拓宽技术栈" class="headerlink" title="拓宽技术栈"></a>拓宽技术栈</h3><p>&#8195;&#8195;整理了几篇 Linux 入门小知识，继续努力。</p>
<span id="more"></span>

<p>=============================================</p>
<p>&#8195;&#8195;其实今年 <code>Ummmmm......</code> 的主要原因就是因为工作，感觉掉入了一个陷阱…</p>
<p>&#8195;&#8195;四个工种我们先假设为：厨师、擦桌子/扫地、倒垃圾，发展空间从高到低排列，擦桌子/扫地 列为同一级别。每个人都是从倒垃圾起步，慢慢往上提升。设想一下，如果你的下一阶段目标是「擦桌子」，但是「原本扫地」的人告诉你，“不行呀，我跟店长反馈的位置是‘扫地’，你往我这个方向努力吧…”。好！能提升可能你也接受了，准备往「扫地」方向出击，但是这一年让你干的活却是「擦桌子+扫地」，并且被桌子的边边角角各种细节消磨了大部分的时光，扫地也做了，但没有达到你预想的提升空间。为什么呢？因为「原本扫地」的人想去做厨师了，正好找个人接盘，可能也有培养你扫地的初心吧，可惜初心有但不多（我是更喜欢双赢的）。到了年底总结绩效的时候：「擦桌子」的付出一句不提了，因为你的位置是「扫地」呀。</p>
<p>&#8195;&#8195;So…Ummmmm……</p>
<h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><h3 id="抗疫"><a href="#抗疫" class="headerlink" title="抗疫"></a>抗疫</h3><p>1  月份 - 做，核，🍋。<br>2  月份 - 做，核，🍋。<br>3  月份 - 做，核，🍋。<br>4  月份 - 做，核，🍋。<br>5  月份 - 做，核，🍋。<br>6  月份 - 做，核，🍋。<br>7  月份 - 做，核，🍋。<br>8  月份 - 做，核，🍋。<br>9  月份 - 做，核，🍋。<br>10 月份 - 做，核，🍋。<br>11 月份 - 做，核，🍋。<br>12 月份 - 🐑 咩咩~了。</p>
<p>So…Ummmmm……</p>
<h3 id="爱好"><a href="#爱好" class="headerlink" title="爱好"></a>爱好</h3><h4 id="做手工"><a href="#做手工" class="headerlink" title="做手工"></a>做手工</h4><p>&#8195;&#8195;做手工的习惯还算坚持的不错。去年入了手工皮具的坑，新手工具已备齐，做了几个相当不错的包包。</p>
<p>&#8195;&#8195;今年陪伴我6年的电脑包破掉了，又实在是用习惯了这种款式的包，想买个皮的又买不到同款，所以只能自己做了，最终一共花费70个小时做了一个牛皮的电脑包：学了两天 CAD，加上画图、打印、裁剪、做包的一套流程等等…🤓…</p>
<p>&#8195;&#8195;忽略色差，真实颜色是前三张的颜色，拎着可开心了，是不是也堪比某些品牌了，啊哈哈哈。</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/bg01.JPG"></td>
<td><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/bg02.JPG"></td>
</tr>
<tr>
<td><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/bg03.png"></td>
<td><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/bg04.JPG"></td>
</tr>
</tbody></table>
<h3 id="旅游"><a href="#旅游" class="headerlink" title="旅游"></a>旅游</h3><p>&#8195;&#8195;今年国庆节的返程机票被取消了八百遍，出去了就可能回不来。还想出去玩？做梦呢，但我真的很想去…这两天我总是哼唱两句歌词：“爸爸妈妈去游玩儿，而我去上班😂😂😂😂😂…”</p>
<p>&#8195;&#8195;So…Ummmmm……</p>
<h2 id="7788"><a href="#7788" class="headerlink" title="7788"></a>7788</h2><h2 id><a href="#" class="headerlink" title></a></h2><p>可能岁数大了总是容易感慨，这两年对我影响比较大的两方面就是：人性和因果。</p>
<ul>
<li>分别的时候一定要好好道别，不然可能再也没有机会了。</li>
</ul>
<blockquote>
<p>我以为很快就能见面，所以那天没有好好道别。</p>
</blockquote>
<ul>
<li><p>凡事都有<strong>因果</strong>，捋清楚因和果，如果还有不明了的，也就和自己没关系了，放下就好。</p>
</li>
<li><p>远离善于“捧杀”的人。阴险。</p>
</li>
<li><p>珍惜愿意指出我们不足的人，当然前提是无恶意攻击的，毕竟身处一个虚伪的世界，真话越来越难听到了。</p>
</li>
</ul>
<blockquote>
<p>闻善言则拜，告有过则喜。</p>
</blockquote>
<ul>
<li>珍惜周围爱我们的家人和朋友。引用村上春树的一段话：</li>
</ul>
<blockquote>
<p>你要记住大雨中为你撑伞的人，帮你挡住外来之物的人，黑暗中默默抱紧你的人，逗你笑的人，陪你彻夜聊天的人，坐车来看望你的人，陪你哭过的人，在医院陪你的人，总是以你为重的人。 是这些人组成你生命中一点一滴的温暖，是这些温暖使你远离阴霾，是这些温暖使你成为善良的人。</p>
</blockquote>
<p>。</p>
]]></content>
      <tags>
        <tag>7788</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 上线 AppStore - App Store Connect 不显示最新上传的 ipa？</title>
    <url>/2019/08/19/AppStoreConnect/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最新upload的ipa，在Connect中不显示，以为是网络延迟，或者同步信息延迟。刷新了好久还是不出现，那就查收一下邮件吧，我收到了如下的邮件。。。</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/12.png" alt="my app&#39;s issues"></p>
<span id="more"></span>

<p>这里面是我们刚刚打包的问题，一定要一一修改，不然Connect里不会显示的。我这个问题，就是权限描述没有加……</p>
<p>注意，现在权限的描述，必须写清楚该功能用在了哪里，类似”%%%应用想使用您的麦克风“ 这种描述是不行了，应该是”%%%应用在录音时需要使用您的麦克风“ 之类的。</p>
<p>当你收到下面这种邮件时，才表示我们的ipa没有问题，真正上传到Connect了，这个时候你再去刷新一下，应该就可以选择对应的包了。</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/13.png" alt="Upload真的成功了"></p>
<div contenteditable="plaintext-only"><div contenteditable="plaintext-only"><center>
  <div style="display:inline-block;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/flag.jpeg" class width="200"></div>
</center>


</div></div>]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>2021年小结儿</title>
    <url>/2022/01/19/2021%E5%B9%B4%E5%B0%8F%E7%BB%93%E5%84%BF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/GL/001.png" style="zoom:30%;">

<p>How to stop procrastinating？</p>
<hr>
<h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><h3 id="iOS-开发"><a href="#iOS-开发" class="headerlink" title="iOS 开发"></a>iOS 开发</h3><p>原本只想写一句不进不退，但逆水行舟，不进则退啊。所以我退步了。渣渣😢！</p>
<h3 id="拓宽技术栈"><a href="#拓宽技术栈" class="headerlink" title="拓宽技术栈"></a>拓宽技术栈</h3><p>对 Nginx、Linux、Go语言 有了更多的了解和实践，但还远远不够。</p>
<span id="more"></span>

<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>明年继续加强对 Linux 的学习吧，毕竟后端很多工作都是在 Linux 系统上进行的。</p>
<h4 id="网络通信"><a href="#网络通信" class="headerlink" title="网络通信"></a>网络通信</h4><p>今年负责项目的过程中，最大的感受是网络知识短路，积累的不到位，被一个小问题就可以搞死，时间都浪费掉了。</p>
<h4 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h4><p>并不想真的做后端业务的开发，学习 Go 语言，尝试写一些基础的小组件，用来辅助对后端的理解，我觉得对于我已经够了。</p>
<h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><p>部门的项目必用……继续加油💪！</p>
<h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><p>一直想开始，但出于对前端机制的恐惧一直没进行。新年目标：了解几个大厂框架的原理，更多的是辅助自己把手机端、前端、后端串起来。<br>这些就够学的了……</p>
<h3 id="PMP"><a href="#PMP" class="headerlink" title="PMP"></a>PMP</h3><p>2020年开始学习 PMP 的相关知识和课程，但因为疫情整的学习也是断断续续的，包括考试日期都一推再推。不过幸运的是20年9月份顺利考完试并且今年拿到了纸质的证书。纸质证书怎么说呢，看上去貌似很 low，连个钢印都没有，哈哈哈~<br>很多人说 PMI 的知识体系不符合「中国国情」，我觉得不然。项目管理的理论本身就是从众多项目经验中沉淀而来的，是一套理论，也是一套工作方法，并不是让我们一个萝卜一个坑的把项目的情况套进去。至少我个人学习之后最受益的两方面是：沟通方法、工作方法。</p>
<h3 id="沟通"><a href="#沟通" class="headerlink" title="沟通"></a>沟通</h3><p>别人评判我们的工作表现，往往针对两个方面：工作态度和工作能力。工作能力我理解为各行业的硬实力，例如我们码农的编码能力、技术能力等等；但工作态度的问题，更多是由沟通导致的。<br>21年自己进步最大的点，就是沟通能力。更加注重沟通方式和沟通技巧了。借用我的领导的前领导跟他讲的一句话：<strong>站在对方的角度为自己考虑</strong>。以前不理解，今年深有体会：回想这一整年，因为工作发生过四次冲突，前两次是和领导、后两次是和组员，很不幸包含了今天刚刚发生的一次，都是因为沟通不顺畅导致的，双方只站在了自己的角度去争论，完全是无效沟通。面对冲突，特别是双方吵得面红耳赤的冲突，及时抽出身来、平复情绪是一种能力，很重要但也很难，告诫自己继续努力吧，争取明年只发生两次，哈哈！</p>
<h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><h3 id="物资水平"><a href="#物资水平" class="headerlink" title="物资水平"></a>物资水平</h3><p>没什么变化，倒是不爱买衣服了，衣服鞋子就那几件翻来覆去的穿，毕竟穿着舒服的太少了。</p>
<h3 id="旅游"><a href="#旅游" class="headerlink" title="旅游"></a>旅游</h3><p>疫情原因，出行不便，抽时间去了一趟桂林/阳朔，爬了一次保定的白石山……桂林的山水是真的美，我都想移居到那儿了。</p>
<h4 id="桂林-阳朔"><a href="#桂林-阳朔" class="headerlink" title="桂林-阳朔"></a>桂林-阳朔</h4><blockquote>
<p>1、飞机落地，对桂林第一印象是：摩都。街边都是电摩，还有电摩专用的停车场。该说不说，不愧是旅游城市，市民素质很高。</p>
<p>2、嗦了一碗「海天肠粉」。</p>
<p>3、继续嗦「老东江桂林米粉总店」，这个貌似要站着吃才有感觉，哈哈哈。</p>
<p>4、阳朔古镇，买了两个小瓶瓶插花。</p>
<p>5、本地人常去的一个饭店，忘记名字了，但我的中分线是不是完美体现了我们IT狗的辛酸：秃了瓢了~</p>
<p>6、龙脊梯田，可惜大雾，很多梯田看不清楚。</p>
<p>7、站在象鼻山顶，看到的桂林城区。</p>
<p>8、遇龙河：漂流。来到桂林当然要做一次小竹筏啦。</p>
<p>9、哪个面值的人民币背景来着？哈哈</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/GL/3.jpg" alt="摩都"></td>
<td align="center"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/GL/2.jpg" alt="肠粉"></td>
<td align="center"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/GL/1.jpg" alt="米粉"></td>
</tr>
<tr>
<td align="center"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/GL/4.jpg" alt="米粉"></td>
<td align="center"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/GL/5.jpg" alt="米粉"></td>
<td align="center"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/GL/6.jpg" alt="米粉"></td>
</tr>
<tr>
<td align="center"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/GL/7.jpg" alt="市区"></td>
<td align="center"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/GL/8.jpg" alt="木筏"></td>
<td align="center"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/GL/9.jpg" alt="遇龙"></td>
</tr>
</tbody></table>
<h4 id="保定白石山"><a href="#保定白石山" class="headerlink" title="保定白石山"></a>保定白石山</h4><blockquote>
<p>爬到白石山顶全是雾，很可惜嘛也看不见鸭，只能欣赏欣赏我自己了：靓女三连拍 ~</p>
</blockquote>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/BSS/01.jpg"></td>
<td><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/BSS/02.jpg"></td>
<td><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/BSS/03.jpg"></td>
</tr>
<tr>
<td><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/BSS/04.jpg"></td>
<td><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/BSS/05.jpg"></td>
<td><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/BSS/06.jpg"></td>
</tr>
</tbody></table>
<p>FYI:  请问 md 格式中九宫格的图片怎么写？不会，只能这样了……</p>
<h3 id="爱好"><a href="#爱好" class="headerlink" title="爱好"></a>爱好</h3><h4 id="画插画"><a href="#画插画" class="headerlink" title="画插画"></a>画插画</h4><p>好吧，没坚持住，这一整年就画了两张🤓。画画的数位板都不知道放哪里去了。</p>
<h4 id="做手工"><a href="#做手工" class="headerlink" title="做手工"></a>做手工</h4><p>做手工的习惯还算坚持的不错。做了N多个好的不好的手机支架、小摆件儿、小喵喵玩偶。前一阵又入了手工皮具的坑，新手工具已备齐，做了几个相当不错的包包。有需要的找我哈，我开始接单了，啊哈哈哈哈哈~🤓🤓🤓🤓🤓</p>
<h2 id="7788"><a href="#7788" class="headerlink" title="7788"></a>7788</h2><p>这一年最大的感悟，就是：珍惜。</p>
<ul>
<li>珍惜愿意指出我们不足的人，当然前提是无恶意攻击的，毕竟身处一个虚伪的世界，真话越来越难听到了。</li>
</ul>
<blockquote>
<p>闻善言则拜，告有过则喜。</p>
</blockquote>
<ul>
<li>珍惜周围爱我们的家人和朋友。引用村上春树的一段话：</li>
</ul>
<blockquote>
<p>你要记住大雨中为你撑伞的人，帮你挡住外来之物的人，黑暗中默默抱紧你的人，逗你笑的人，陪你彻夜聊天的人，坐车来看望你的人，陪你哭过的人，在医院陪你的人，总是以你为重的人。 是这些人组成你生命中一点一滴的温暖，是这些温暖使你远离阴霾，是这些温暖使你成为善良的人。</p>
</blockquote>
<p>。</p>
]]></content>
      <tags>
        <tag>7788</tag>
      </tags>
  </entry>
  <entry>
    <title>Apple Configurator 2</title>
    <url>/2022/02/16/Apple%20Configurator%202/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>平时的开发测试中，基于各种原因…不是所有的 App 都会上线 App Store ，经常需要通过 Mac 把 IPA 直接安装在 iPhone 上，之前一直用的 <code>iFunBox</code>，但最近换了电脑以后这个软件不好用了，据说是升级了版本，但不知道是我眼瞎了还是怎么样，找不到以往安装 IPA 的入口。搜来搜去发现苹果自己提供了一个工具：<code>Apple Configurator 2</code>，UI 和功能都很“苹果”，直接把其他工具都卸载了，哈哈~</p>
<ul>
<li>手机连线到 Mac </li>
<li>选中自己的设备</li>
<li>点击「添加」，选择「App」-&gt; 「从我的 Mac 选取」</li>
</ul>
<span id="more"></span>

<p>FYI:  这里为什么有个小红点儿？挥之不去，Ummmmmm……</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/AppleConfigurator0.png" alt="AppleConfigurator0"></p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/AppleConfigurator1.png" alt="AppleConfigurator1"></p>
]]></content>
      <tags>
        <tag>7788</tag>
        <tag>Mac</tag>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>AudioServicesPlaySystemSound 播放系统提示音</title>
    <url>/2021/06/18/AudioServicesPlaySystemSound/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>系统提示音 SystemSoundID 。</p>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AudioServices is a group of C functions in AudioToolbox for playing short (≤30 seconds) sounds.</span><br><span class="line"></span><br><span class="line">Predefined sounds</span><br><span class="line"></span><br><span class="line">There are some predefined system sounds, for the system sound ID in the range 1000 to 2000 (decimal), as shown below (from 2.0 to 5.0 beta). The system sounds are all stored in /System/Library/Audio/UISounds/.</span><br><span class="line"></span><br><span class="line">Sound ID        File name (iPhone)        File name (iPod Touch)        Category        Note</span><br><span class="line"></span><br><span class="line">1000    new-mail.caf    new-mail.caf    MailReceived</span><br><span class="line"></span><br><span class="line">1001    mail-sent.caf    mail-sent.caf    MailSent</span><br><span class="line"></span><br><span class="line">1002    Voicemail.caf    Voicemail.caf    VoicemailReceived</span><br><span class="line"></span><br><span class="line">1003    ReceivedMessage.caf    ReceivedMessage.caf    SMSReceived</span><br><span class="line"></span><br><span class="line">1004    SentMessage.caf    SentMessage.caf    SMSSent</span><br><span class="line"></span><br><span class="line">1005    alarm.caf    sq_alarm.caf    CalendarAlert</span><br><span class="line"></span><br><span class="line">1006    low_power.caf    low_power.caf    LowPower</span><br><span class="line"></span><br><span class="line">1007    sms-received1.caf    sms-received1.caf    SMSReceived_Alert</span><br><span class="line"></span><br><span class="line">1008    sms-received2.caf    sms-received2.caf    SMSReceived_Alert</span><br><span class="line"></span><br><span class="line">1009    sms-received3.caf    sms-received3.caf    SMSReceived_Alert</span><br><span class="line"></span><br><span class="line">1010    sms-received4.caf    sms-received4.caf    SMSReceived_Alert</span><br><span class="line"></span><br><span class="line">1011    -    -    SMSReceived_Vibrate</span><br><span class="line"></span><br><span class="line">1012    sms-received1.caf    sms-received1.caf    SMSReceived_Alert</span><br><span class="line"></span><br><span class="line">1013    sms-received5.caf    sms-received5.caf    SMSReceived_Alert</span><br><span class="line"></span><br><span class="line">1014    sms-received6.caf    sms-received6.caf    SMSReceived_Alert</span><br><span class="line"></span><br><span class="line">1015    Voicemail.caf    Voicemail.caf    -    Available since 2.1</span><br><span class="line"></span><br><span class="line">1016    tweet_sent.caf    tweet_sent.caf    SMSSent    Available since 5.0</span><br><span class="line"></span><br><span class="line">1020    Anticipate.caf    Anticipate.caf    SMSReceived_Alert    Available since 4.2</span><br><span class="line"></span><br><span class="line">1021    Bloom.caf    Bloom.caf    SMSReceived_Alert    Available since 4.2</span><br><span class="line"></span><br><span class="line">1022    Calypso.caf    Calypso.caf    SMSReceived_Alert    Available since 4.2</span><br><span class="line"></span><br><span class="line">1023    Choo_Choo.caf    Choo_Choo.caf    SMSReceived_Alert    Available since 4.2</span><br><span class="line"></span><br><span class="line">1024    Descent.caf    Descent.caf    SMSReceived_Alert    Available since 4.2</span><br><span class="line"></span><br><span class="line">1025    Fanfare.caf    Fanfare.caf    SMSReceived_Alert    Available since 4.2</span><br><span class="line"></span><br><span class="line">1026    Ladder.caf    Ladder.caf    SMSReceived_Alert    Available since 4.2</span><br><span class="line"></span><br><span class="line">1027    Minuet.caf    Minuet.caf    SMSReceived_Alert    Available since 4.2</span><br><span class="line"></span><br><span class="line">1028    News_Flash.caf    News_Flash.caf    SMSReceived_Alert    Available since 4.2</span><br><span class="line"></span><br><span class="line">1029    Noir.caf    Noir.caf    SMSReceived_Alert    Available since 4.2</span><br><span class="line"></span><br><span class="line">1030    Sherwood_Forest.caf    Sherwood_Forest.caf    SMSReceived_Alert    Available since 4.2</span><br><span class="line"></span><br><span class="line">1031    Spell.caf    Spell.caf    SMSReceived_Alert    Available since 4.2</span><br><span class="line"></span><br><span class="line">1032    Suspense.caf    Suspense.caf    SMSReceived_Alert    Available since 4.2</span><br><span class="line"></span><br><span class="line">1033    Telegraph.caf    Telegraph.caf    SMSReceived_Alert    Available since 4.2</span><br><span class="line"></span><br><span class="line">1034    Tiptoes.caf    Tiptoes.caf    SMSReceived_Alert    Available since 4.2</span><br><span class="line"></span><br><span class="line">1035    Typewriters.caf    Typewriters.caf    SMSReceived_Alert    Available since 4.2</span><br><span class="line"></span><br><span class="line">1036    Update.caf    Update.caf    SMSReceived_Alert    Available since 4.2</span><br><span class="line"></span><br><span class="line">1050    ussd.caf    ussd.caf    USSDAlert</span><br><span class="line"></span><br><span class="line">1051    SIMToolkitCallDropped.caf    SIMToolkitCallDropped.caf    SIMToolkitTone</span><br><span class="line"></span><br><span class="line">1052    SIMToolkitGeneralBeep.caf    SIMToolkitGeneralBeep.caf    SIMToolkitTone</span><br><span class="line"></span><br><span class="line">1053    SIMToolkitNegativeACK.caf    SIMToolkitNegativeACK.caf    SIMToolkitTone</span><br><span class="line"></span><br><span class="line">1054    SIMToolkitPositiveACK.caf    SIMToolkitPositiveACK.caf    SIMToolkitTone</span><br><span class="line"></span><br><span class="line">1055    SIMToolkitSMS.caf    SIMToolkitSMS.caf    SIMToolkitTone</span><br><span class="line"></span><br><span class="line">1057    Tink.caf    Tink.caf    PINKeyPressed</span><br><span class="line"></span><br><span class="line">1070    ct-busy.caf    ct-busy.caf    AudioToneBusy    There was no category for this sound before 4.0.</span><br><span class="line"></span><br><span class="line">1071    ct-congestion.caf    ct-congestion.caf    AudioToneCongestion    There was no category for this sound before 4.0.</span><br><span class="line"></span><br><span class="line">1072    ct-path-ack.caf    ct-path-ack.caf    AudioTonePathAcknowledge    There was no category for this sound before 4.0.</span><br><span class="line"></span><br><span class="line">1073    ct-error.caf    ct-error.caf    AudioToneError    There was no category for this sound before 4.0.</span><br><span class="line"></span><br><span class="line">1074    ct-call-waiting.caf    ct-call-waiting.caf    AudioToneCallWaiting    There was no category for this sound before 4.0.</span><br><span class="line"></span><br><span class="line">1075    ct-keytone2.caf    ct-keytone2.caf    AudioToneKey2    There was no category for this sound before 4.0.</span><br><span class="line"></span><br><span class="line">1100    lock.caf    sq_lock.caf    ScreenLocked</span><br><span class="line"></span><br><span class="line">1101    unlock.caf    sq_lock.caf    ScreenUnlocked</span><br><span class="line"></span><br><span class="line">1102    -    -    FailedUnlock</span><br><span class="line"></span><br><span class="line">1103    Tink.caf    sq_tock.caf    KeyPressed</span><br><span class="line"></span><br><span class="line">1104    Tock.caf    sq_tock.caf    KeyPressed</span><br><span class="line"></span><br><span class="line">1105    Tock.caf    sq_tock.caf    KeyPressed</span><br><span class="line"></span><br><span class="line">1106    beep-beep.caf    sq_beep-beep.caf    ConnectedToPower</span><br><span class="line"></span><br><span class="line">1107    RingerChanged.caf    RingerChanged.caf    RingerSwitchIndication</span><br><span class="line"></span><br><span class="line">1108    photoShutter.caf    photoShutter.caf    CameraShutter</span><br><span class="line"></span><br><span class="line">1109    shake.caf    shake.caf    ShakeToShuffle    Available since 3.0</span><br><span class="line"></span><br><span class="line">1110    jbl_begin.caf    jbl_begin.caf    JBL_Begin    Available since 3.0</span><br><span class="line"></span><br><span class="line">1111    jbl_confirm.caf    jbl_confirm.caf    JBL_Confirm    Available since 3.0</span><br><span class="line"></span><br><span class="line">1112    jbl_cancel.caf    jbl_cancel.caf    JBL_Cancel    Available since 3.0</span><br><span class="line"></span><br><span class="line">1113    begin_record.caf    begin_record.caf    BeginRecording    Available since 3.0</span><br><span class="line"></span><br><span class="line">1114    end_record.caf    end_record.caf    EndRecording    Available since 3.0</span><br><span class="line"></span><br><span class="line">1115    jbl_ambiguous.caf    jbl_ambiguous.caf    JBL_Ambiguous    Available since 3.0</span><br><span class="line"></span><br><span class="line">1116    jbl_no_match.caf    jbl_no_match.caf    JBL_NoMatch    Available since 3.0</span><br><span class="line"></span><br><span class="line">1117    begin_video_record.caf    begin_video_record.caf    BeginVideoRecording    Available since 3.0</span><br><span class="line"></span><br><span class="line">1118    end_video_record.caf    end_video_record.caf    EndVideoRecording    Available since 3.0</span><br><span class="line"></span><br><span class="line">1150    vc~invitation-accepted.caf    vc~invitation-accepted.caf    VCInvitationAccepted    Available since 4.0</span><br><span class="line"></span><br><span class="line">1151    vc~ringing.caf    vc~ringing.caf    VCRinging    Available since 4.0</span><br><span class="line"></span><br><span class="line">1152    vc~ended.caf    vc~ended.caf    VCEnded    Available since 4.0</span><br><span class="line"></span><br><span class="line">1153    ct-call-waiting.caf    ct-call-waiting.caf    VCCallWaiting    Available since 4.1</span><br><span class="line"></span><br><span class="line">1154    vc~ringing.caf    vc~ringing.caf    VCCallUpgrade    Available since 4.1</span><br><span class="line"></span><br><span class="line">1200    dtmf-0.caf    dtmf-0.caf    TouchTone</span><br><span class="line"></span><br><span class="line">1201    dtmf-1.caf    dtmf-1.caf    TouchTone</span><br><span class="line"></span><br><span class="line">1202    dtmf-2.caf    dtmf-2.caf    TouchTone</span><br><span class="line"></span><br><span class="line">1203    dtmf-3.caf    dtmf-3.caf    TouchTone</span><br><span class="line"></span><br><span class="line">1204    dtmf-4.caf    dtmf-4.caf    TouchTone</span><br><span class="line"></span><br><span class="line">1205    dtmf-5.caf    dtmf-5.caf    TouchTone</span><br><span class="line"></span><br><span class="line">1206    dtmf-6.caf    dtmf-6.caf    TouchTone</span><br><span class="line"></span><br><span class="line">1207    dtmf-7.caf    dtmf-7.caf    TouchTone</span><br><span class="line"></span><br><span class="line">1208    dtmf-8.caf    dtmf-8.caf    TouchTone</span><br><span class="line"></span><br><span class="line">1209    dtmf-9.caf    dtmf-9.caf    TouchTone</span><br><span class="line"></span><br><span class="line">1210    dtmf-star.caf    dtmf-star.caf    TouchTone</span><br><span class="line"></span><br><span class="line">1211    dtmf-pound.caf    dtmf-pound.caf    TouchTone</span><br><span class="line"></span><br><span class="line">1254    long_low_short_high.caf    long_low_short_high.caf    Headset_StartCall</span><br><span class="line"></span><br><span class="line">1255    short_double_high.caf    short_double_high.caf    Headset_Redial</span><br><span class="line"></span><br><span class="line">1256    short_low_high.caf    short_low_high.caf    Headset_AnswerCall</span><br><span class="line"></span><br><span class="line">1257    short_double_low.caf    short_double_low.caf    Headset_EndCall</span><br><span class="line"></span><br><span class="line">1258    short_double_low.caf    short_double_low.caf    Headset_CallWaitingActions</span><br><span class="line"></span><br><span class="line">1259    middle_9_short_double_low.caf    middle_9_short_double_low.caf    Headset_TransitionEnd</span><br><span class="line"></span><br><span class="line">1300    Voicemail.caf    Voicemail.caf    SystemSoundPreview</span><br><span class="line"></span><br><span class="line">1301    ReceivedMessage.caf    ReceivedMessage.caf    SystemSoundPreview</span><br><span class="line"></span><br><span class="line">1302    new-mail.caf    new-mail.caf    SystemSoundPreview</span><br><span class="line"></span><br><span class="line">1303    mail-sent.caf    mail-sent.caf    SystemSoundPreview</span><br><span class="line"></span><br><span class="line">1304    alarm.caf    sq_alarm.caf    SystemSoundPreview</span><br><span class="line"></span><br><span class="line">1305    lock.caf    sq_lock.caf    SystemSoundPreview</span><br><span class="line"></span><br><span class="line">1306    Tock.caf    sq_tock.caf    KeyPressClickPreview    The category was SystemSoundPreview before 3.2.</span><br><span class="line"></span><br><span class="line">1307    sms-received1.caf    sms-received1.caf    SMSReceived_Selection</span><br><span class="line"></span><br><span class="line">1308    sms-received2.caf    sms-received2.caf    SMSReceived_Selection</span><br><span class="line"></span><br><span class="line">1309    sms-received3.caf    sms-received3.caf    SMSReceived_Selection</span><br><span class="line"></span><br><span class="line">1310    sms-received4.caf    sms-received4.caf    SMSReceived_Selection</span><br><span class="line"></span><br><span class="line">1311    -    -    SMSReceived_Vibrate</span><br><span class="line"></span><br><span class="line">1312    sms-received1.caf    sms-received1.caf    SMSReceived_Selection</span><br><span class="line"></span><br><span class="line">1313    sms-received5.caf    sms-received5.caf    SMSReceived_Selection</span><br><span class="line"></span><br><span class="line">1314    sms-received6.caf    sms-received6.caf    SMSReceived_Selection</span><br><span class="line"></span><br><span class="line">1315    Voicemail.caf    Voicemail.caf    SystemSoundPreview    Available since 2.1</span><br><span class="line"></span><br><span class="line">1320    Anticipate.caf    Anticipate.caf    SMSReceived_Selection    Available since 4.2</span><br><span class="line"></span><br><span class="line">1321    Bloom.caf    Bloom.caf    SMSReceived_Selection    Available since 4.2</span><br><span class="line"></span><br><span class="line">1322    Calypso.caf    Calypso.caf    SMSReceived_Selection    Available since 4.2</span><br><span class="line"></span><br><span class="line">1323    Choo_Choo.caf    Choo_Choo.caf    SMSReceived_Selection    Available since 4.2</span><br><span class="line"></span><br><span class="line">1324    Descent.caf    Descent.caf    SMSReceived_Selection    Available since 4.2</span><br><span class="line"></span><br><span class="line">1325    Fanfare.caf    Fanfare.caf    SMSReceived_Selection    Available since 4.2</span><br><span class="line"></span><br><span class="line">1326    Ladder.caf    Ladder.caf    SMSReceived_Selection    Available since 4.2</span><br><span class="line"></span><br><span class="line">1327    Minuet.caf    Minuet.caf    SMSReceived_Selection    Available since 4.2</span><br><span class="line"></span><br><span class="line">1328    News_Flash.caf    News_Flash.caf    SMSReceived_Selection    Available since 4.2</span><br><span class="line"></span><br><span class="line">1329    Noir.caf    Noir.caf    SMSReceived_Selection    Available since 4.2</span><br><span class="line"></span><br><span class="line">1330    Sherwood_Forest.caf    Sherwood_Forest.caf    SMSReceived_Selection    Available since 4.2</span><br><span class="line"></span><br><span class="line">1331    Spell.caf    Spell.caf    SMSReceived_Selection    Available since 4.2</span><br><span class="line"></span><br><span class="line">1332    Suspense.caf    Suspense.caf    SMSReceived_Selection    Available since 4.2</span><br><span class="line"></span><br><span class="line">1333    Telegraph.caf    Telegraph.caf    SMSReceived_Selection    Available since 4.2</span><br><span class="line"></span><br><span class="line">1334    Tiptoes.caf    Tiptoes.caf    SMSReceived_Selection    Available since 4.2</span><br><span class="line"></span><br><span class="line">1335    Typewriters.caf    Typewriters.caf    SMSReceived_Selection    Available since 4.2</span><br><span class="line"></span><br><span class="line">1336    Update.caf    Update.caf    SMSReceived_Selection    Available since 4.2</span><br><span class="line"></span><br><span class="line">1350    -    -    RingerVibeChanged</span><br><span class="line"></span><br><span class="line">1351    -    -    SilentVibeChanged</span><br><span class="line"></span><br><span class="line">4095    -    -    Vibrate    There was no category for this sound before 2.2.</span><br><span class="line"></span><br><span class="line">In the SDK this is the constant kSystemSoundID</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】CentOS 常用的文件操作命令</title>
    <url>/2016/07/01/CentOS%20%E5%B8%B8%E7%94%A8%E7%9A%84%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="cd-pwd"><a href="#cd-pwd" class="headerlink" title="cd pwd"></a>cd pwd</h3><ol>
<li>显示当前路径</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pwd</span> </span><br></pre></td></tr></table></figure>

<ol start="2">
<li>返回用户主目录</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> </span><br></pre></td></tr></table></figure>

<span id="more"></span>

<ol start="3">
<li>改变到其它路径</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc </span><br></pre></td></tr></table></figure>

<ol start="4">
<li>返回到上一级目录</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd .. </span><br></pre></td></tr></table></figure>

<ol start="5">
<li>返回到根目录</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /</span><br></pre></td></tr></table></figure>



<h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><blockquote>
<p>查询文件或文件夹的 CentOS 常用命令</p>
</blockquote>
<ol>
<li>查找当前用户主目录下的所有文件</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">find ~ </span><br></pre></td></tr></table></figure>

<ol start="2">
<li>让当前目录中文件属主具有读、写权限，并且文件所属组的用户和其他用户具有读权限的文件</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">find . -perm 644 -<span class="built_in">exec</span> ls -l &#123;&#125; \; </span><br></pre></td></tr></table></figure>

<ol start="3">
<li>为了查找系统中所有文件长度为 0 的普通文件，并列出它们的完整路径</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">find / size 0 -<span class="built_in">type</span> f -<span class="built_in">exec</span> ls -l &#123;&#125; \; </span><br></pre></td></tr></table></figure>

<ol start="4">
<li>查找 / var/logs 目录中更改时间在 7 日以前的普通文件，并在删除之前询问它们</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">find /var/logs -mtime +7 -<span class="built_in">type</span> f -ok rm -i &#123;&#125; \; </span><br></pre></td></tr></table></figure>

<ol start="5">
<li>为 / 找系统中所有属于 root 组的文件</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">find / -group root -<span class="built_in">exec</span> ls -l &#123;&#125; \; </span><br></pre></td></tr></table></figure>

<ol start="6">
<li>find 命令将删除当目录中访问时间在 7 日以来、含有数字后缀的 admin.log 文件</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">find . -name <span class="string">&quot;admin.log[0-9][0-9][0-9]&quot;</span> -atime -7 -ok rm &#123; &#125; \; </span><br></pre></td></tr></table></figure>

<ol start="7">
<li>为了查找当前文件系统中的所有目录并排序</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> d | sort </span><br></pre></td></tr></table></figure>

<ol start="8">
<li>为了查找系统中所有的 rmt 磁带设备</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">find /dev/rmt</span><br></pre></td></tr></table></figure>



<h3 id="ls-dir"><a href="#ls-dir" class="headerlink" title="ls / dir"></a>ls / dir</h3><blockquote>
<p>显示文件 / 文件夹清单的 CentOS 常用命令</p>
</blockquote>
<ol>
<li>显示所有文件，包括以. 开头的隐含文件</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ls -a </span><br></pre></td></tr></table></figure>

<ol start="2">
<li>显示文件的详细信息</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ls -l </span><br></pre></td></tr></table></figure>

<ol start="3">
<li>显示当前目录及所有子目录信息</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ls -Rl </span><br></pre></td></tr></table></figure>

<ol start="4">
<li>以时间序显示目录, 这在找最新文件有用</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ls -tl </span><br></pre></td></tr></table></figure>

<ol start="5">
<li>以文件大小排序</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ls -Sl </span><br></pre></td></tr></table></figure>

<ol start="6">
<li>显示文件大小, 并按大小排序</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ls -s -l -S</span><br></pre></td></tr></table></figure>



<h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><blockquote>
<p> 移动或更改文件 / 文件夹名称的 CentOS 常用命令 与 cp 命令用法相似</p>
</blockquote>
<ol>
<li>若移动目标文件已存在，要在移动之前，先备份原来的目录文件</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mv -b test.txt test2/ </span><br></pre></td></tr></table></figure>

<p>这样在 test2 下将有两个文件 test.txt 及 text.txt~</p>
<p>其中 test.txt~ 是备份文件，test.txt 是新的文件</p>
<ol start="2">
<li>若移动目标文件已存在，但不想弹出是否覆盖的提示，直接覆盖</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> <span class="operator">-f</span> test.txt test2/ </span><br></pre></td></tr></table></figure>

<ol start="3">
<li>当源与目标都拥有同一个文件，若源文件比目标新则移动，否则不移动</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> <span class="literal">-u</span> test.txt test2/ </span><br></pre></td></tr></table></figure>

<ol start="4">
<li>更改文件名称</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> test.txt test2.txt </span><br></pre></td></tr></table></figure>

<ol start="5">
<li>更改目录名称</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> /test2 /test2_2[/<span class="type">size</span>]</span><br></pre></td></tr></table></figure>



<h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h3><blockquote>
<p>改变文件或文件夹权限的 CentOS 常用命令 </p>
</blockquote>
<ol>
<li>将自己的笔记设为只有自己才能看</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">chmod go<span class="literal">-rwx</span> test.txt </span><br><span class="line"><span class="comment"># 或者 </span></span><br><span class="line">chmod <span class="number">700</span> test.txt </span><br></pre></td></tr></table></figure>

<ol start="2">
<li>同时修改多个文件的权限</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">chmod <span class="number">700</span> test1.txt test2.txt </span><br></pre></td></tr></table></figure>

<ol start="3">
<li>修改一个目录的权限，包括其子目录及文件</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">chmod <span class="number">700</span> <span class="literal">-R</span> test</span><br></pre></td></tr></table></figure>



<h3 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h3><blockquote>
<p>改变文件或文件夹拥有者的 CentOS 常用命令，该命令只有 root 才能使用</p>
</blockquote>
<ol>
<li>更改某个文件的拥有者</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">chown jim:usergroup test.txt</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>更改某个目录的拥有者, 并包含子目录</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">chown jim:usergroup -R <span class="built_in">test</span></span><br></pre></td></tr></table></figure>



<h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><blockquote>
<p>查看文本文件内容的 CentOS 常用命令</p>
</blockquote>
<ol>
<li>查看文件内容，并在每行前面加上行号</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat -n test.txt </span><br></pre></td></tr></table></figure>

<ol start="2">
<li>查看文件内容，在不是空行的前面加上行号</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat -b test.txt </span><br></pre></td></tr></table></figure>

<ol start="3">
<li>合并两个文件的内容</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test1.txt test2.txt &gt; test_new.txt </span><br></pre></td></tr></table></figure>

<ol start="4">
<li>全并两具文件的内容，并追回到一个文件</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat test1.txt test2.txt &gt;&gt; test_total.txt </span><br></pre></td></tr></table></figure>

<ol start="5">
<li>清空某个文件的内容</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat /dev/null &gt; test.txt </span><br></pre></td></tr></table></figure>

<ol start="6">
<li>创建一个新的文件</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; new.txt <span class="comment"># 按 CTRL + C 结束录入</span></span><br></pre></td></tr></table></figure>



<h3 id="vi"><a href="#vi" class="headerlink" title="vi"></a>vi</h3><blockquote>
<p>编辑文件文件的 CentOS 常用命令 </p>
</blockquote>
<ol>
<li>新建档案文件</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">vi newfile.txt </span><br></pre></td></tr></table></figure>

<ol start="2">
<li>修改档案文件</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">vi test.txt   <span class="comment">#test.txt 已存在 </span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>vi 的两种工作模式：命令模式，编辑模式</p>
</li>
<li><p>进入 vi 后为命令模式，按 Insrt 键进入编辑模式; 按 ESC 进入命令模式，在命令模式不能编辑，只能输入命令.</p>
</li>
<li><p>命令模式常用命令</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:w 保存当前文档 </span><br><span class="line">:q 直接退出 vi </span><br><span class="line">:wq 先保存后退出 。</span><br><span class="line">:q! 强制不保存退出</span><br></pre></td></tr></table></figure>



<h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><blockquote>
<p>创建目录的 CentOS 常用命令 </p>
</blockquote>
<ol>
<li>在当前路径创建一级目录</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir <span class="built_in">test</span> </span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在当前路径创建多级目录</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mkdir <span class="literal">-p</span> mytest/test1/test1_1 </span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在创建目录的同时给新建的目录赋权限</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mkdir <span class="literal">-m</span> <span class="number">777</span> testmod </span><br></pre></td></tr></table></figure>

<p>这样任何人对此目录都有任何权限</p>
<h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><blockquote>
<p>复制文件与文件夹的 CentOS 常用命令</p>
</blockquote>
<ol>
<li>复制指定目录的文件到当前目录，并重命名</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cp ~/.bashrc bashrc_bak </span><br></pre></td></tr></table></figure>

<ol start="2">
<li>强制复制指定目录的文件到当前目录，而不管当前目录是否含有该文件</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cp -f ~/.bashrc bashrc </span><br></pre></td></tr></table></figure>

<ol start="2">
<li>复制指定目录到当前目录</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cp -r /root/<span class="built_in">test</span> . </span><br><span class="line">cp -r /root/<span class="built_in">test</span>/ . </span><br></pre></td></tr></table></figure>

<p>两者效果一样，在复制目录时，会将源路径的最后一级目录全部复制过去，包括它本身。</p>
<ol start="3">
<li>复制指定目录的文件到指定目录</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cp ~/.bashrc /bak/.bashrc </span><br></pre></td></tr></table></figure>

<ol start="4">
<li>在复制时将源文件的全部属性也复制过来。若不指定参数，则目标文件与源文件属性可能不一致</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cp -a ~/.bashrc /bak/.bashrc </span><br></pre></td></tr></table></figure>

<ol start="5">
<li>若两个文件夹要保证同步，一个文件的改了，另一个文件也跟着改，但是要保证两个文件的文件都是最新的</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cp -u /src/.bashrc /bak_src/bashrc</span><br></pre></td></tr></table></figure>



<h3 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h3><blockquote>
<p>建立链接文件，包括硬链接与软链接的 CentOS 常用命令</p>
</blockquote>
<ol>
<li>建立类似于 Windows 的快捷方式</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ln -s test.txt test.txt_slnk </span><br></pre></td></tr></table></figure>

<ol start="2">
<li>当想备份一个文件，但空间又不够，则可以为该文件建立一个硬连接。这样，就算原文件删除了，只要该 链接文件没被删除，则在存储空间里还是没有被删除</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ln -l test.txt test.txt_hlnk</span><br></pre></td></tr></table></figure>

<p>使用 CentOS 常用命令查看 cpu</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">more /proc/cpuinfo | grep <span class="string">&quot;model name&quot;</span>   </span><br><span class="line">grep <span class="string">&quot;model name&quot;</span> /proc/cpuinfo   </span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> /]<span class="comment"># grep &quot;CPU&quot; /proc/cpuinfo   </span></span><br><span class="line">model name      : Intel(<span class="built_in">R</span>) Pentium(<span class="built_in">R</span>) Dual CPU E2180 <span class="selector-tag">@</span> <span class="number">2.00</span>GHz   </span><br><span class="line">model name      : Intel(<span class="built_in">R</span>) Pentium(<span class="built_in">R</span>) Dual CPU E2180 <span class="selector-tag">@</span> <span class="number">2.00</span>GHz   </span><br></pre></td></tr></table></figure>

<p>如果觉得需要看的更加舒服</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">grep <span class="string">&quot;model name&quot;</span> /proc/cpuinfo | cut <span class="literal">-f2</span> <span class="literal">-d</span>:</span><br></pre></td></tr></table></figure>

<p>使用 CentOS 常用命令查看内存</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">grep MemTotal /proc/meminfo  grep MemTotal /proc/meminfo | cut <span class="literal">-f2</span> <span class="literal">-d</span>:  free <span class="literal">-m</span> |grep <span class="string">&quot;Mem&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>使用 CentOS 常用命令查看 cpu 是 32 位还是 64 位 查看 CPU 位数 (32 or 64)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">getconf LONG_BIT</span><br></pre></td></tr></table></figure>

<p>使用 CentOS 常用命令查看当前 linux 的版本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">more /etc/redhat-release</span><br><span class="line">cat /etc/redhat-release</span><br></pre></td></tr></table></figure>

<p>使用 CentOS 常用命令查看内核版本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">uname -r</span><br><span class="line">uname -a</span><br></pre></td></tr></table></figure>

<p>使用 CentOS 常用命令查看当前时间</p>
<p>date 上面已经介绍如何同步时间了</p>
<p>使用 CentOS 常用命令查看硬盘和分区</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">df -h</span><br><span class="line">fdisk -l</span><br></pre></td></tr></table></figure>

<p>也可以查看分区</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">du -sh</span><br></pre></td></tr></table></figure>

<p>可以看到全部占用的空间</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">du /etc -sh</span><br></pre></td></tr></table></figure>

<p>可以看到这个目录的大小</p>
<p>使用 CentOS 常用命令查看安装的软件包, 查看系统安装的时候装的软件包</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat -n /root/install.log</span><br><span class="line">more /root/install.log | wc -l</span><br></pre></td></tr></table></figure>

<p>查看现在已经安装了那些软件包</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rpm -qa</span><br><span class="line">rpm -qa | wc -l</span><br><span class="line">yum list installed | wc -l</span><br></pre></td></tr></table></figure>

<p>使用 CentOS 常用命令查看键盘布局</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat /etc/sysconfig/keyboard</span><br><span class="line">cat /etc/sysconfig/keyboard | grep KEYTABLE | cut -f2 -d=</span><br></pre></td></tr></table></figure>

<p>使用 CentOS 常用命令查看 selinux 情况</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sestatus</span><br><span class="line">sestatus | cut -f2 -d:</span><br><span class="line">cat /etc/sysconfig/selinux</span><br></pre></td></tr></table></figure>

<p>使用 CentOS 常用命令查看 ip，mac 地址</p>
<p>在 ifcfg-eth0 文件里你可以看到 mac，网关等信息</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ifconfig  cat /etc/sysconfig/network-scripts/ifcfg-eth0 | grep IPADDR  cat /etc/sysconfig/network-scripts/ifcfg-eth0 | grep IPADDR | cut -f2 -d=  ifconfig eth0 |grep <span class="string">&quot;inet addr:&quot;</span> |awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>|cut -c 6-  ifconfig   | grep <span class="string">&#x27;inet addr:&#x27;</span>| grep -v <span class="string">&#x27;127.0.0.1&#x27;</span> | cut -d: -f2 | awk <span class="string">&#x27;&#123; print $1&#125;&#x27;</span>  </span><br></pre></td></tr></table></figure>

<p>查看网关</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat /etc/sysconfig/network</span><br></pre></td></tr></table></figure>

<p>查看 dns</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat /etc/resolv.conf </span><br></pre></td></tr></table></figure>

<p>使用 CentOS 常用命令查看默认语言</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$LANG</span> <span class="variable">$LANGUAGE</span></span><br><span class="line">cat /etc/sysconfig/i18n</span><br></pre></td></tr></table></figure>

<p>使用 CentOS 常用命令查看所属时区和是否使用 UTC 时间</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat /etc/sysconfig/clock</span><br></pre></td></tr></table></figure>

<p>使用 CentOS 常用命令查看主机名</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hostname</span><br><span class="line">cat /etc/sysconfig/network</span><br></pre></td></tr></table></figure>

<p>修改主机名就是修改这个文件，同时最好也把 host 文件也修改。</p>
<p>使用 CentOS 常用命令查看开机运行时间</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">uptime</span><br><span class="line">09:44:45 up 67 days, 23:32, ...</span><br></pre></td></tr></table></figure>

<p>看来刚才确实是网段的问题，我的机器还是 67 天前开机的。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vmstat 1 -S m  procs -----------memory---------- ---swap-- -----io---- --system-- -----cpu------  r b   swpd   free   buff cache   si   so    bi    bo   <span class="keyword">in</span>   cs us sy id wa st  0 0      0    233    199    778    0    0     4    25    1    1 3 0 96 0 0  0 0      0    233    199    778    0    0     0     0 1029 856 13 1 86 0 0</span><br></pre></td></tr></table></figure>



<h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><blockquote>
<p>删除文件的 CentOS 常用命令 </p>
</blockquote>
<ol>
<li>删除当前目录的文件</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rm test.txt </span><br></pre></td></tr></table></figure>

<ol start="2">
<li>强制删除当前目录的文件，不弹出提示</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rm -f test.txt </span><br></pre></td></tr></table></figure>

<ol start="3">
<li>强制删除整个目录，包括目录与文件全部删除，需要管理员权限</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rm -r -f <span class="built_in">test</span></span><br></pre></td></tr></table></figure>



<h3 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h3><blockquote>
<p>删除文件夹的 CentOS 常用命令 </p>
</blockquote>
<ol>
<li>删除一个空目录</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rmdir emptydir </span><br></pre></td></tr></table></figure>

<ol start="2">
<li>删除多级空目录</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rmdir -p emptydir/d1/d11</span><br></pre></td></tr></table></figure>



<h3 id="mount-umount"><a href="#mount-umount" class="headerlink" title="mount / umount"></a>mount / umount</h3><blockquote>
<p>挂载文件系统与卸载文件系统的 CentOS 常用命令</p>
</blockquote>
<ol>
<li>挂载光驱</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mount -t iso9660 /dev/cdrom /mnt/cdrom </span><br></pre></td></tr></table></figure>

<ol start="2">
<li>挂载光驱，支持中文</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mount -t iso9660 -o codepage=936,iocharset=cp936 /dev/cdrom /mnt/cdrom </span><br></pre></td></tr></table></figure>

<ol start="3">
<li>挂载 Windows 分区，FAT 文件系统</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mount -t vfat /dev/hda3 /mnt/cdrom</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>挂载 Windows 分区，NTFS 文件系统</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mount -t ntfs -o iocharset=cp936 /dev/hda7 /mnt/had7 </span><br></pre></td></tr></table></figure>

<ol start="5">
<li>挂载 ISO 文件</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mount -o loop /abc.iso /mnt/cdrom </span><br></pre></td></tr></table></figure>

<ol start="6">
<li>挂载 软驱</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mount</span> /dev/fd0 /mnt/floppy </span><br></pre></td></tr></table></figure>

<ol start="7">
<li>挂载闪盘</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mount</span> /dev/sda1 /mnt/cdrom </span><br></pre></td></tr></table></figure>

<ol start="8">
<li>挂载 Windows 操作系统共享的文件夹</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mount</span> <span class="literal">-t</span> smbfs <span class="literal">-o</span> username=guest,password=guest //machine/path /mnt/cdrom </span><br></pre></td></tr></table></figure>

<ol start="9">
<li>显示挂载的文件系统</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount </span><br><span class="line">cat /etc/fstab   # 显示系统启动自动加载的文件系统 </span><br><span class="line">cat /etc/mtab   # 显示当前加载的文件系统</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>服务器</tag>
        <tag>CentOS</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】Centos7 安装 Python3.8 详细教程</title>
    <url>/2023/03/30/Centos7_update_Python3.8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://blog.csdn.net/fanxl10/article/details/106854062">转载自</a></p>
<hr>
<h2 id="安装编译相关工具"><a href="#安装编译相关工具" class="headerlink" title="安装编译相关工具"></a>安装编译相关工具</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yum <span class="literal">-y</span> groupinstall <span class="string">&quot;Development tools&quot;</span></span><br><span class="line">yum <span class="literal">-y</span> install zlib<span class="literal">-devel</span> bzip2<span class="literal">-devel</span> openssl<span class="literal">-devel</span> ncurses<span class="literal">-devel</span> sqlite<span class="literal">-devel</span> readline<span class="literal">-devel</span> tk<span class="literal">-devel</span> gdbm<span class="literal">-devel</span> db4<span class="literal">-devel</span> libpcap<span class="literal">-devel</span> xz<span class="literal">-devel</span></span><br><span class="line">yum install libffi<span class="literal">-devel</span> <span class="literal">-y</span></span><br></pre></td></tr></table></figure>

<h2 id="下载-python-安装包"><a href="#下载-python-安装包" class="headerlink" title="下载 python 安装包"></a>下载 python 安装包</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">wget</span> https://www.python.org/ftp/python/<span class="number">3.8</span>.<span class="number">3</span>/Python<span class="literal">-3</span>.<span class="number">8.3</span>.tgz</span><br><span class="line">tar <span class="literal">-zxvf</span>  Python<span class="literal">-3</span>.<span class="number">8.3</span>.tgz</span><br></pre></td></tr></table></figure>

<h2 id="编译安装-python"><a href="#编译安装-python" class="headerlink" title="编译安装 python"></a>编译安装 python</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mkdir /usr/local/python3 <span class="comment">#创建编译安装目录</span></span><br><span class="line"><span class="built_in">cd</span> Python<span class="literal">-3</span>.<span class="number">8.3</span></span><br><span class="line">./configure -<span class="literal">-prefix</span>=/usr/local/python3</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p>安装过，出现下面两行就成功了</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">Installing collected packages: setuptools, pip</span><br><span class="line">Successfully installed pip<span class="literal">-19</span>.<span class="number">2.3</span> setuptools<span class="literal">-41</span>.<span class="number">2.0</span></span><br></pre></td></tr></table></figure>

<h2 id="创建软连接"><a href="#创建软连接" class="headerlink" title="创建软连接"></a>创建软连接</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前python软连接</span></span><br><span class="line">ll /usr/bin/ |grep python</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">lrwxrwxrwx    <span class="number">1</span> root root           <span class="number">7</span> Nov <span class="number">26</span>  <span class="number">2018</span> python -&gt; python2</span><br><span class="line">lrwxrwxrwx    <span class="number">1</span> root root           <span class="number">9</span> Nov <span class="number">26</span>  <span class="number">2018</span> python2 -&gt; python2.<span class="number">7</span></span><br><span class="line"><span class="literal">-rwxr</span><span class="literal">-xr</span><span class="literal">-x</span>      <span class="number">1</span> root root        <span class="number">7216</span> Jul <span class="number">13</span>  <span class="number">2018</span> python2.<span class="number">7</span></span><br></pre></td></tr></table></figure>

<p>默认系统安装的是 python2.7<br>删除 python 软连接</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> <span class="literal">-rf</span> /usr/bin/python</span><br></pre></td></tr></table></figure>

<p>配置软连接为 python3</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加python3的软链接 </span></span><br><span class="line">ln <span class="literal">-s</span> /usr/local/python3/bin/python3 /usr/bin/python</span><br></pre></td></tr></table></figure>

<p>这个时候看下 python 默认版本</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">python <span class="literal">-V</span></span><br></pre></td></tr></table></figure>

<p>删除默认 pip 软连接，并添加 pip3 新的软连接</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> <span class="literal">-rf</span> /usr/bin/pip</span><br><span class="line"><span class="comment">#添加 pip3 的软链接 </span></span><br><span class="line">ln <span class="literal">-s</span> /usr/local/python3/bin/pip3 /usr/bin/pip</span><br></pre></td></tr></table></figure>

<h2 id="更改-yum-配置"><a href="#更改-yum-配置" class="headerlink" title="更改 yum 配置"></a>更改 yum 配置</h2><p>因为其要用到 python2 才能执行，否则会导致 yum 不能正常使用（不管安装 python3 的那个版本，都必须要做的）</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">vi /usr/bin/yum </span><br><span class="line">把 <span class="comment">#! /usr/bin/python 修改为 #! /usr/bin/python2 </span></span><br><span class="line">vi /usr/libexec/urlgrabber<span class="literal">-ext</span><span class="literal">-down</span> </span><br><span class="line">把 <span class="comment">#! /usr/bin/python 修改为 #! /usr/bin/python2</span></span><br><span class="line">vi /usr/bin/yum<span class="literal">-config</span><span class="literal">-manager</span></span><br><span class="line"><span class="comment">#!/usr/bin/python 改为 #!/usr/bin/python2</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>服务器</tag>
        <tag>CentOS</tag>
        <tag>转载</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Cordova - config.xml</title>
    <url>/2021/08/19/Cordova_config.xml/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>config.xml</code> 存储着 cordova 应用的全局配置信息。</p>
<p>更多信息请查看 <a href="https://cordova.apache.org/docs/en/10.x/config_ref/">官方参考文档</a>。</p>
<ul>
<li>widget：<code>config.xml </code> 中的根元素</li>
<li>name：指定 app 名，它会显示在设备的主屏幕上</li>
<li>description：app 描述</li>
<li>author：作者信息</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">widget</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>TommyGirl<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">      A beauty.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">author</span> <span class="attr">email</span>=<span class="string">&quot;zhengyt_91@163.com&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://tommygirl.cn&quot;</span>&gt;</span></span><br><span class="line">      YYLittleCat</span><br><span class="line">  <span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="content"><a href="#content" class="headerlink" title="content"></a>content</h3><p>指定 App 的根页面，默认是 <code>index.html</code><br>示例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">widget</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">content</span> <span class="attr">src</span>=<span class="string">&quot;startPage.html&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="access"><a href="#access" class="headerlink" title="access"></a>access</h3><p>配置允许 App 发起的网络请求（images, XHRs, etc）地址</p>
<p>注意：没有配置 <code>access</code> 标签时，，只有 <code>file://</code> URL 被允许访问。但一般情况，App 包含一个默认的 <code>&lt;access origin=&quot;*&quot;&gt;</code> 标签。</p>
<p>示例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--允许访问 google.com:--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">access</span> <span class="attr">origin</span>=<span class="string">&quot;http://google.com&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--允许访问安全地址 google.com (https://):--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">access</span> <span class="attr">origin</span>=<span class="string">&quot;https://google.com&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--允许访问 google.com 的所有子域名, 比如 mail.google.com and docs.google.com:--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">access</span> <span class="attr">origin</span>=<span class="string">&quot;http://*.google.com&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--不阻止任何网络请求，比如 google.com and developer.mozilla.org:--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">access</span> <span class="attr">origin</span>=<span class="string">&quot;*&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--This is the default value for newly created CLI projects.--&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="allow-navigation"><a href="#allow-navigation" class="headerlink" title="allow-navigation"></a>allow-navigation</h3><p>控制内部的 <code>WebView</code> 可以加载的 <code>URL</code>，只适用于顶级导航。</p>
<p>默认情况下，只允许 <code>file://</code> 类型的 URL 访问。如果要加载其他的 URL，需要配置 <code>&lt;allow-navigation&gt;</code> 标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 允许访问 example.com --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">allow-navigation</span> <span class="attr">href</span>=<span class="string">&quot;http://example.com/*&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 允许使用通配符，协议，主机，地址都可以使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">allow-navigation</span> <span class="attr">href</span>=<span class="string">&quot;*://*.example.com/*&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用通配符，允许所有网址访问，包括HTTP and HTTPS and file</span></span><br><span class="line"><span class="comment">     *不推荐使用* --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">allow-navigation</span> <span class="attr">href</span>=<span class="string">&quot;*&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 上面的和下面这三条等价 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">allow-navigation</span> <span class="attr">href</span>=<span class="string">&quot;http://*/*&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">allow-navigation</span> <span class="attr">href</span>=<span class="string">&quot;https://*/*&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">allow-navigation</span> <span class="attr">href</span>=<span class="string">&quot;data:*&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>为什么说不推荐使用 <code>&lt;allow-navigation href=&quot;*&quot; /&gt;</code> 允许所有网址访问呢，昨天有个页面使用 <code>window.location.href=&#39;sms://10086&#39;;</code> 的方式想打开发短信的功能，但 Cordova 提示 “不支持的URL” ，说明没有直接调用系统能力，而是作为一个新的导航去打开了。所以对于 sms、tel、mail 等系统能力的调用，应该使用 allow-intent ，并且 allow-navigation 不允许通配所有的访问。</p>
<h3 id="allow-intent"><a href="#allow-intent" class="headerlink" title="allow-intent"></a>allow-intent</h3><p>定义 App 可以要求操作系统打开的链接地址，默认任何外部请求链接都被禁止。</p>
<p>示例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 允许在浏览器中打开网址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">allow-intent</span> <span class="attr">href</span>=<span class="string">&quot;http://*/*&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">allow-intent</span> <span class="attr">href</span>=<span class="string">&quot;https://*/*&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 允许在浏览器中打开 example.com --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">allow-intent</span> <span class="attr">href</span>=<span class="string">&quot;http://example.com/*&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 允许通配符的使用，在协议、主机、地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">allow-intent</span> <span class="attr">href</span>=<span class="string">&quot;*://*.example.com/*&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 允许在短信应用中打开sms:链接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">allow-intent</span> <span class="attr">href</span>=<span class="string">&quot;sms:*&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 允许在电话应用中打开tel:链接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">allow-intent</span> <span class="attr">href</span>=<span class="string">&quot;tel:*&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 允许在地图应用中打开geo:链接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">allow-intent</span> <span class="attr">href</span>=<span class="string">&quot;geo:*&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 允许在已安装的app中打开未被识别的url地址</span></span><br><span class="line"><span class="comment">     *NOT RECOMMENDED* --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">allow-intent</span> <span class="attr">href</span>=<span class="string">&quot;*&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="preference"><a href="#preference" class="headerlink" title="preference"></a>preference</h3><p>关于 WebView 和页面行为的偏好设置。</p>
<p>配置详情：<a href="https://cordova.apache.org/docs/en/10.x/config_ref/#preference">preference</a></p>
<h3 id="feature"><a href="#feature" class="headerlink" title="feature"></a>feature</h3><p>官方的翻译我没仔细看，这里我一般写需要启用的插件类。</p>
<p>更多请参考：<a href="https://cordova.apache.org/docs/en/10.x/config_ref/#feature">feature</a></p>
<h3 id="platform"><a href="#platform" class="headerlink" title="platform"></a>platform</h3><p>对应的平台，iOS、Android 等等。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">platform</span> <span class="attr">name</span>=<span class="string">&quot;android&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">preference</span> <span class="attr">name</span>=<span class="string">&quot;Fullscreen&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">platform</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>Cordova</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】Docker 的四种网络模式</title>
    <url>/2022/02/08/Docker_network/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.jianshu.com/p/22a7032bb7bd">原文链接</a></p>
<h2 id="Docker-网络实现原理"><a href="#Docker-网络实现原理" class="headerlink" title="Docker 网络实现原理"></a>Docker 网络实现原理</h2><p>Docker 使用 Linux 桥接（参考《Linux 虚拟网络技术》），在宿主机虚拟一个 Docker 容器网桥 (docker0)，Docker 启动一个容器时会根据 Docker 网桥的网段分配给容器一个 IP 地址，称为 Container-IP，同时 Docker 网桥是每个容器的默认网关。因为在同一宿主机内的容器都接入同一个网桥，这样容器之间就能够通过容器的 Container-IP 直接通信。</p>
<p>Docker 网桥是宿主机虚拟出来的，并不是真实存在的网络设备，外部网络是无法寻址到的，这也意味着外部网络无法通过直接 Container-IP 访问到容器。如果容器希望外部访问能够访问到，可以通过映射容器端口到宿主主机（端口映射），即 <code>docker run</code> 创建容器时候通过 <code>-p</code> 或 <code>-P</code> 参数来启用，访问容器的时候就通过 [宿主机 IP]:[容器端口] 访问容器。</p>
<h2 id="四类网络模式"><a href="#四类网络模式" class="headerlink" title="四类网络模式"></a>四类网络模式</h2><span id="more"></span>

<table>
<thead>
<tr>
<th align="left">Docker 网络模式</th>
<th>配置</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">host 模式</td>
<td>-net=host</td>
<td>容器和宿主机共享 Network namespace。</td>
</tr>
<tr>
<td align="left">container 模式</td>
<td>-net=container:NAME_or_ID</td>
<td>容器和另外一个容器共享 Network namespace。 kubernetes 中的 pod 就是多个容器共享一个 Network namespace。</td>
</tr>
<tr>
<td align="left">none 模式</td>
<td>-net=none</td>
<td>容器有独立的 Network namespace，但并没有对其进行任何网络设置，如分配 veth pair 和网桥连接，配置 IP 等。</td>
</tr>
<tr>
<td align="left">bridge 模式</td>
<td>-net=bridge （默认为该模式）</td>
<td>-net=bridge （默认为该模式）</td>
</tr>
</tbody></table>
<h3 id="host-模式"><a href="#host-模式" class="headerlink" title="host 模式"></a>host 模式</h3><p>如果启动容器的时候使用 host 模式，那么这个容器将不会获得一个独立的 Network Namespace，而是和宿主机共用一个 Network Namespace。容器将不会虚拟出自己的网卡，配置自己的 IP 等，而是使用宿主机的 IP 和端口。但是，容器的其他方面，如文件系统、进程列表等还是和宿主机隔离的。</p>
<p>使用 host 模式的容器可以直接使用宿主机的 IP 地址与外界通信，容器内部的服务端口也可以使用宿主机的端口，不需要进行 NAT，host 最大的优势就是网络性能比较好，但是 docker host 上已经使用的端口就不能再用了，网络的隔离性不好。</p>
<p>Host 模式如下图所示：</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/docker_network_host.png" alt="img"></p>
<h3 id="container-模式"><a href="#container-模式" class="headerlink" title="container 模式"></a>container 模式</h3><p>这个模式指定新创建的容器和已经存在的一个容器共享一个 Network Namespace，而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过 lo 网卡设备通信。</p>
<p>Container 模式示意图：</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/docker_network_container.png" alt="img"></p>
<h3 id="none-模式"><a href="#none-模式" class="headerlink" title="none 模式"></a>none 模式</h3><p>使用 none 模式，Docker 容器拥有自己的 Network Namespace，但是，并不为 Docker 容器进行任何网络配置。也就是说，这个 Docker 容器没有网卡、IP、路由等信息。需要我们自己为 Docker 容器添加网卡、配置 IP 等。</p>
<p>这种网络模式下容器只有 lo 回环网络，没有其他网卡。none 模式可以在容器创建时通过 <code>-network=none</code> 来指定。这种类型的网络没有办法联网，封闭的网络能很好的保证容器的安全性。</p>
<p>None 模式示意图:</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/docker_network_none.png" alt="None 网络模式"></p>
<h3 id="bridge-模式"><a href="#bridge-模式" class="headerlink" title="bridge 模式"></a>bridge 模式</h3><p>当 Docker 进程启动时，会在主机上创建一个名为 docker0 的虚拟网桥，此主机上启动的 Docker 容器会连接到这个虚拟网桥上。虚拟网桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了一个二层网络中。</p>
<p>从 docker0 子网中分配一个 IP 给容器使用，并设置 docker0 的 IP 地址为容器的默认网关。在主机上创建一对虚拟网卡 veth pair 设备，Docker 将 veth pair 设备的一端放在新创建的容器中，并命名为 eth0（容器的网卡），另一端放在主机中，以 vethxxx 这样类似的名字命名，并将这个网络设备加入到 docker0 网桥中。可以通过 brctl show 命令查看。</p>
<p>bridge 模式是 docker 的默认网络模式，不写–net 参数，就是 bridge 模式。使用 <code>docker run -p</code> 时，docker 实际是在 iptables 做了 DNAT 规则，实现端口转发功能。可以使用 <code>iptables -t nat -vnL</code> 查看。</p>
<p>Bridge 模式如下图所示：</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/docker_network_bridge.png" alt="img"></p>
]]></content>
      <tags>
        <tag>转载</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>DeviceCheck</title>
    <url>/2020/06/05/DeviceCheck/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/14.png"></p>
<p>最近才注意 iOS 11.0 中一个新增的小框架，于是简单学习了一下，已经有前辈写的很详细了，所以~~<a href="https://www.sunyazhou.com/2017/09/30/20170930DeviceCheck/">参考自</a></p>
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>iOS11 苹果改动了一个比较引开发者关注的亮点</p>
<p><strong>UDID之类的写到系统 keychain 的唯一标识会随着 app 删除而删除</strong></p>
<p>这个问题在微博上已经争论好几天：iOS11新的设备唯一标识 DCDevice</p>
<h2 id="介绍-API"><a href="#介绍-API" class="headerlink" title="介绍 API"></a>介绍 API</h2><p>我们首先看看<code>DCDevice</code>类都有啥</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;DeviceCheck/DeviceCheck.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_BEGIN</span></span><br><span class="line"></span><br><span class="line">API_AVAILABLE(ios(<span class="number">11.0</span>), tvos(<span class="number">11.0</span>)) API_UNAVAILABLE(watchos, macos)</span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DCDevice</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="comment">// The current device. </span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">class</span>, <span class="keyword">readonly</span>) DCDevice *currentDevice;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Check if this API is supported on the current device.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">getter</span>=isSupported, <span class="keyword">readonly</span>) <span class="built_in">BOOL</span> supported;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Generate a new device token that can be used to get/set the persistent bits for this device.This call generates a new value every time.</span></span><br><span class="line">- (<span class="keyword">void</span>)generateTokenWithCompletionHandler:(<span class="keyword">void</span>(^)(<span class="built_in">NSData</span> * _Nullable token, <span class="built_in">NSError</span> * _Nullable error))completion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_END</span></span><br></pre></td></tr></table></figure>

<p>接口简直不能再简单了 <strong>创建实例调方法</strong></p>
<h2 id="使用-API"><a href="#使用-API" class="headerlink" title="使用 API"></a>使用 API</h2><p>下面我们来看下如何使用<code>DCDevice</code></p>
<p>导入头文件</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;DeviceCheck/DeviceCheck.h&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>check 是否支持 如果支持 的话会在回调以后返回 <code>token</code>(NSData)</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view.</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([DCDevice.currentDevice isSupported]) &#123;</span><br><span class="line">        [DCDevice.currentDevice generateTokenWithCompletionHandler:^(<span class="built_in">NSData</span> * _Nullable token, <span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">            <span class="keyword">if</span> (error) &#123;</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, error.description);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// upload token to APP server</span></span><br><span class="line">                <span class="built_in">NSString</span> *deviceToken = [token base64EncodedStringWithOptions:<span class="built_in">NSDataBase64EncodingEndLineWithLineFeed</span>];</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@&quot;%lu %@&quot;</span>, token.length, deviceToken);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>token 是个 2188字节(2k 多点)的二进制流,很小</p>
<h2 id="删除-重装App-如何处理"><a href="#删除-重装App-如何处理" class="headerlink" title="删除/重装App 如何处理"></a>删除/重装App 如何处理</h2><blockquote>
<p>DeviceCheck 允许你通过你的服务器与 Apple 服务器通讯，并为单个设备设置2k左右 的数据。 在设备上用 DeviceCheck API 生成一个 2字节的 token (00, 01,10,11)，然后将这个 token 发给自己的服务器，再由自己的服务器与 Apple 的 API 进行通讯，来更新或者查询该设备的值。这两字节 的数据用来追踪用户。比如。借助两个自己的数据，你可以得知用户究竟使用了该 App 多久。 该 API 可以成为：反欺诈领域： 试用7天 Uber、滴滴司机被封号后，防止重新注册账号接单 该用户是否已经领取过首次注册红包 APP防多开 因为传输的是 flag 级别的数据，并不会定位到该设备的使用者，所以相对安全。</p>
</blockquote>
<blockquote>
<p>但是对于购买了二手手机的使用场景，可能会出现一些边界情况，这个在业务中也需要考虑进去。</p>
</blockquote>
<p>引自<a href="https://github.com/ChenYilong/iOS11AdaptationTips/issues/22">iOS11开发新特性之实用小tips</a></p>
<p>首先要明白我们 的 token 需要发给谁</p>
<ol>
<li>token 需要发送给我们自己公司的<code>server</code>做记录</li>
<li>我们公司自己的<code>server</code>去<code>Apple</code>的<code>server</code>查询<code>token</code>是否有效,从而来更新或者查询该设备值.</li>
<li>这<code>2k 左右的 token</code>不会因为设备删除 app 而删除 会一直存在苹果的 server(其实我觉得就是苹果自己去获取的设备唯一标识).</li>
</ol>
<p>那么 怎么查询和更新呢</p>
<h3 id="查询接口"><a href="#查询接口" class="headerlink" title="查询接口"></a>查询接口</h3><p><strong><a href="https://api.development.devicecheck.apple.com/v1/query_two_bits">https://api.development.devicecheck.apple.com/v1/query_two_bits</a></strong></p>
<p>可以用终端自己模拟一下 就当作你自己是自己的服务器访问Apple 的服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -i --verbose -H <span class="string">&quot;Authorization: Bearer &lt;GeneratedJWT&gt;&quot;</span> \</span><br><span class="line">-X POST --data-binary @ValidQueryRequest.json \ </span><br><span class="line">https://api.development.devicecheck.apple.com/v1/query_two_bits</span><br></pre></td></tr></table></figure>

<p>json 的定义如下:</p>
<table>
<thead>
<tr>
<th align="center">字段 key</th>
<th align="center">类型</th>
<th align="center">说明</th>
<th align="center">必须</th>
</tr>
</thead>
<tbody><tr>
<td align="center">device_token</td>
<td align="center">String</td>
<td align="center">设备唯一标识 token</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">transaction_id</td>
<td align="center">String</td>
<td align="center">服务器产生的一个ID</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">timestamp</td>
<td align="center">Long</td>
<td align="center">服务器生成的UTC时间戳</td>
<td align="center">是</td>
</tr>
</tbody></table>
<p>它会 返回 如下格式</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;device_token&quot;</span> : <span class="string">&quot;wlkCDA2Hy/CfrMqVAShs1BAR/0sAiuRIUm5jQg0a...&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;transaction_id&quot;</span> : <span class="string">&quot;5b737ca6-a4c7-488e-b928-8452960c4be9&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;timestamp&quot;</span> : <span class="number">1487716472000</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="更新接口"><a href="#更新接口" class="headerlink" title="更新接口"></a>更新接口</h3><p><strong><a href="https://api.development.devicecheck.apple.com/v1/update_two_bits">https://api.development.devicecheck.apple.com/v1/update_two_bits</a></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -i --verbose -H <span class="string">&quot;Authorization: Bearer &lt;GeneratedJWT&gt;&quot;</span> \</span><br><span class="line">-X POST --data-binary @ValidUpdateRequest.json \</span><br><span class="line">https://api.development.devicecheck.apple.com/v1/update_two_bits</span><br></pre></td></tr></table></figure>

<p>json 的定义如下:</p>
<table>
<thead>
<tr>
<th align="center">字段 key</th>
<th align="center">类型</th>
<th align="center">说明</th>
<th align="center">必须</th>
</tr>
</thead>
<tbody><tr>
<td align="center">device_token</td>
<td align="center">String</td>
<td align="center">设备唯一标识 token</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">transaction_id</td>
<td align="center">String</td>
<td align="center">服务器产生的一个ID</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">timestamp</td>
<td align="center">Long</td>
<td align="center">服务器生成的UTC时间戳</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">bit0</td>
<td align="center">Boolean</td>
<td align="center">新的布尔值1</td>
<td align="center">否</td>
</tr>
<tr>
<td align="center">bit1</td>
<td align="center">Boolean</td>
<td align="center">新的布尔值2</td>
<td align="center">否</td>
</tr>
</tbody></table>
<p>json 的示例:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;device_token&quot;</span> : <span class="string">&quot;wlkCDA2Hy/CfrMqVAShs1BAR/0sAiuRIUm5jQg0a...&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;transaction_id&quot;</span> : <span class="string">&quot;5b737ca6-a4c7-488e-b928-8452960c4be9&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;timestamp&quot;</span> : <span class="number">1487716472000</span>,</span><br><span class="line">   <span class="attr">&quot;bit0&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">   <span class="attr">&quot;bit1&quot;</span> : <span class="literal">false</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="最终的方案"><a href="#最终的方案" class="headerlink" title="最终的方案"></a>最终的方案</h2><ol>
<li>iOS11以前版本暂且才用 UUID 等 keychian 方式</li>
<li>iOS11尽量才用新的 api 来适配解决</li>
</ol>
<p>对于 server 来讲可以 把 token 搞成新的附属字段 比如一个账号下登录多少个设备</p>
<p>那么 一个 UID 下面 就要附属 iOS 版本+ token</p>
]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>GiTalk 404</title>
    <url>/2021/06/22/GiTalk-404/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://github.com/gitalk/gitalk">GiTalk</a> 是一个基于 GitHub Issue 和 Preact 开发的评论插件。</p>
<p>这篇文章是要讲解怎么配置 GiTalk 吗？😂😂😂😂😂NO~网上有很多文章，例如这一个 <a href="https://cjjkkk.github.io/gitalk/">例如</a>。</p>
<p>只是想记录一下，在修改了GitHub 用户名以后，使用 GiTalk 进行评论，却显示 404 的问题，因为我自己总是忘记了在哪里修改配置……😂😂😂😂😂</p>
<span id="more"></span>

<p>就是先这样，再这样，最后那样就好了……😂😂😂😂😂，又是蠢哭的一天。</p>
<center>
    <div style="display:inline-block;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/15.png" class width="300"></div>
    <div style="display:inline-block;margin-left:10px;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/16.png" class width="240"></div>
</center>

<div contenteditable="plaintext-only"><div contenteditable="plaintext-only"><center>
  <div style="display:inline-block;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/17.png" class width="500"></div>
</center>






</div></div>]]></content>
      <tags>
        <tag>7788</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 的日常使用和提交模板</title>
    <url>/2019/05/21/Git%20%E7%9A%84%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8%E5%92%8C%E6%8F%90%E4%BA%A4%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Git-的简单使用"><a href="#Git-的简单使用" class="headerlink" title="Git 的简单使用"></a>Git 的简单使用</h2><p>前提需要有个工程文件夹，我们就叫 gitUse 吧。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入要使用Git的目录</span></span><br><span class="line">cd gitUse</span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始化一个git仓库</span></span><br><span class="line">git init</span><br><span class="line"><span class="meta">#</span><span class="bash"> 项目中应该有你编辑的文件等等，将他们从工作区放到缓存区，也就是SourceTree中的 “暂存”</span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交到本地仓库，并填写本次提交的描述信息</span></span><br><span class="line">git commit -m &quot;这里是本次提交的描述信息&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建远端的仓库，去对应的git网站新建就好了</span></span><br><span class="line">https://github.com/yylittlecat/gitUse.git</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关联本地与远程的仓库</span></span><br><span class="line">git remote add origin https://github.com/yylittlecat/gitUse.git</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将本地仓库的代码推送到远程仓库对应的分支</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<p>这样一个简单的初始化~提交过程就完成了。</p>
<h2 id="Git-的提交模板"><a href="#Git-的提交模板" class="headerlink" title="Git 的提交模板"></a>Git 的提交模板</h2><p>不论 SVN 还是 Git 来进行代码管理，糟糕的提交信息，一定是被深恶痛绝的，可能自己过段时间看了都会不忍直视。上面提到 commit 时的描述信息，如果提交的时候能有填写规范或者有交互式的约束就好了。这就要用到  git commit template 了。</p>
<p>我电脑是 Mac ，目前用的是  <a href="https://github.com/ctaodream/cz-cli">commitizen</a> 这个小工具。</p>
<blockquote>
<p>参考文章：<a href="https://www.cnblogs.com/ctaodream/p/6066694.html">老鸟都应该注意的git 提交规范</a></p>
</blockquote>
<p>commitizen 是基于 Node，所以先在你的 Mac 上安装 node 环境，之后就可以开始我们下面的步骤了：</p>
<ul>
<li><p>npm 全局安装利器 commitizen<br><code>npm install -g commitizen</code></p>
</li>
<li><p>全局安装规范模板，好东西大家享 😇</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 全局下载模板，cz-conventional-changelog 是被业界广泛赞许的AngularJS的规范</span> </span><br><span class="line">npm install -g cz-conventional-changelog </span><br><span class="line"><span class="meta">#</span><span class="bash"> 路径</span></span><br><span class="line">echo &#x27;&#123; &quot;path&quot;: &quot;cz-conventional-changelog&quot; &#125;&#x27; &gt; ~/.czrc</span><br></pre></td></tr></table></figure></li>
<li><p>局部安装规范模板，小试牛刀 🤓</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入 Git 工程目录</span></span><br><span class="line">cd gitUse</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果项目本身就是 node 系列的，例如 web 前端项目，</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 你的项目下应该是有个 package.json 文件的，直接运行下面的命令 安装规范模板 应该不会报错。</span></span><br><span class="line">commitizen init cz-conventional-changelog  --save --save-exact</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果 是iOS 或者 Android 项目，需要先生成对应的 package.json 文件</span></span><br><span class="line">npm init</span><br><span class="line"><span class="meta">#</span><span class="bash"> 然后再执行上面那条命令</span></span><br><span class="line">commitizen init cz-conventional-changelog  --save --save-exact</span><br></pre></td></tr></table></figure>
<p>如果是原生项目，执行完上面的命令，你会发现，又多了几个文件 😂，就像这个鬼样子</p>
</li>
</ul>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/git-use5.png" alt="node文件"></p>
<p>这些文件不需要做代码管理，那我们就加到 忽略文件中好了，眼不见为净，当然他还是赫赫地立在那里🤓，手动忽略文件可以参考这里 <a href="https://www.jianshu.com/p/e64977b40334">SourceTree 全局忽略XC编译文件无效</a> 。</p>
<p>接下来我们使用  <code>git cz</code> 命令来提交一下试试</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/git-use3.png" alt="git cz"></p>
<p>会出现上面这个简洁的交互，通过上下键来选择 本次修改的类型 ，每个提交类型后面都有说明，看看选择哪个合适，然后一步一步 跟着说明 enter 下去就 👌 了。</p>
<h3 id="Type"><a href="#Type" class="headerlink" title="Type:"></a>Type:</h3><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">feat :新功能 </span><br><span class="line">fix :修复bug  </span><br><span class="line">doc : 文档改变</span><br><span class="line">style : 代码格式改变</span><br><span class="line">refactor :某个已有功能重构</span><br><span class="line">perf :性能优化</span><br><span class="line">test :增加测试</span><br><span class="line">build :改变了build工具 如 grunt换成了 npm</span><br><span class="line">revert: 撤销上一次的 commit </span><br></pre></td></tr></table></figure>
<h3 id="Scope"><a href="#Scope" class="headerlink" title="Scope:"></a>Scope:</h3><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">scope :用来说明此次修改的影响范围 可以随便填写任何东西，commitizen也给出了几个 如：location 、browser、compile。</span><br><span class="line">不过我推荐使用：</span><br><span class="line">all ：表示影响面大 ，如修改了网络框架  会对真个程序产生影响</span><br><span class="line">loation： 表示影响小，某个小小的功能</span><br><span class="line">module：表示会影响某个模块 如登录模块、首页模块 、用户管理模块等等</span><br></pre></td></tr></table></figure>

<h3 id="Others"><a href="#Others" class="headerlink" title="Others:"></a>Others:</h3><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">subject: 用来简要描述本次改动，概述就好了</span><br><span class="line">body:具体的修改信息 应该尽量详细</span><br><span class="line">footer：放置写备注啥的，如果是 bug ，可以把bug id放入</span><br></pre></td></tr></table></figure>

<p>最后会看到这样的结果：</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/git-use2.png" alt="git cz result"></p>
<p>从SourceTree 和 远程仓库 看一下提交记录，可以直观看到该次提交修改的描述：</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/git-use4.png" alt="SourceTree"></p>
<h2 id="Git的简单回滚操作"><a href="#Git的简单回滚操作" class="headerlink" title="Git的简单回滚操作"></a>Git的简单回滚操作</h2><p>就算Git中分支、提交、gitflow 分的都很清楚，也难免会遇到需要回退到前几个版本的尴尬境地，你都是怎么做的呢？施展<code>CV大法</code>吗？😂</p>
<p>两个简单的命令就可以让他滚回去：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log -(需要查看的版本条数)</span><br><span class="line">git reset --hard [提交对应的编号]</span><br></pre></td></tr></table></figure>
<p>我们来试试查看最近的三个提交是怎么样的 <code>git log -3</code></p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/git-use1.png" alt="git log -3"></p>
<p>我们可以看到每一个提交从上到下都有，对应的哈希值、作者、邮箱、日期，以及我上面提到的<code>提交信息</code>，非常重要，不然你都不知道这次提交是为了什么，甚至找不到滚回去的位置。</p>
<p>假设我们要回滚到第三条，也就是<code>5d9c3b1dab8de8932ebf8deffef821cf2052fd65</code> 这一条，执行命令<code>git reset --hard 5d9c3b1dab8de8932ebf8deffef821cf2052fd65</code>  即可，当前分支就回退到这个版本了。</p>
<p>回退后，我们可能会修改代码，这个时候又有新的问题了，以前的提交已经push到远程仓库，也就是我们目前的代码落后两个版本，同时有一个新的commit待提交。</p>
<p>两个方式：</p>
<p>1、强势一点：硬提</p>
<p>  <code>git push -f origin [分支名称]</code></p>
<p>2、委婉的：先拉去-&gt;解决冲突-&gt;重新提交整合后的代码</p>
<p><code>git pull origin develop</code> -&gt; <code>solve conflct</code> -&gt; <code>git push -u origin develop</code></p>
<p>记得写清楚提交信息鸭！！！！！</p>
<p>这样一个简单的回滚就完成了。</p>
<p>不要告诉我你不会解决冲突。🤓🤓🤓🤓🤓</p>
<h2 id="Git-关联对应的-JIRA-任务"><a href="#Git-关联对应的-JIRA-任务" class="headerlink" title="Git 关联对应的 JIRA 任务"></a>Git 关联对应的 JIRA 任务</h2><blockquote>
<p> <a href="https://www.cnblogs.com/hailongchen/p/9004565.html">Git关联JIRA的issue</a></p>
</blockquote>
<p>在提交修改的时候，描述信息加上在 JIRA 的任务/问题 编号，就可以关联到一起了。</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/git-use6.png" alt="添加JIRA 任务编号"></p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/git-use0.png" alt="JIRA 评论结果"></p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/flag.jpeg" alt="“就是这么不要脸”专用图"></p>
]]></content>
      <tags>
        <tag>7788</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】GCD (Grand Central Dispatch)</title>
    <url>/2016/01/13/GCD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>转载自 <a href="https://github.com/ming1016">戴铭老师</a></p>
<hr>
<p>文中较详细介绍GCD队列，各种GCD使用方法，实例如何使用Dispatch Source监听系统底层对象，分析不同锁的性能对比，实例GCD死锁情况。 </p>
<p>文中的Demo在这里 <a href="https://github.com/ming1016/GCDDemo">Demo</a> 对着文章试着来调demo体会更深哦，细细嚼消化好🤓</p>
<span id="more"></span>



<blockquote>
<p>官方文档：</p>
<p><a href="https://developer.apple.com/library/prerelease/ios/documentation/Performance/Reference/GCD_libdispatch_Ref/">Docs</a></p>
<p>GCD属于系统级的线程管理，在Dispatch queue中执行需要执行的任务性能非常的高。 GCD这块已经开源，<a href="http://libdispatch.macosforge.org/">地址</a>。</p>
<p><strong>GCD中的FIFO（先进先出）队列称为dispatch queue，用来保证先进来的任务先得到执行。</strong></p>
</blockquote>
<h2 id="GCD概要"><a href="#GCD概要" class="headerlink" title="GCD概要"></a>GCD概要</h2><ol>
<li><p>和operation queue一样都是基于队列的并发编程API，他们通过集中管理大家协同使用的线程池。</p>
</li>
<li><p><strong>公开的5个不同队列</strong>：运行在主线程中的main queue，3个不同优先级的后台队列（High Priority Queue，Default Priority Queue，Low Priority Queue），以及一个优先级更低的后台队列Background Priority Queue（用于I/O）。</p>
</li>
<li><p>可创建自定义队列：<strong>串行</strong>或<strong>并列</strong>队列。<strong>自定义一般放在Default Priority Queue和Main Queue里</strong>。</p>
</li>
<li><p>操作是在多线程上还是单线程主要是看队列的类型和执行方法，<strong>并行队列异步执行才能在多线程，并行队列同步执行就只会在主线程执行了</strong>。</p>
</li>
</ol>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="一、-系统标准两个队列"><a href="#一、-系统标准两个队列" class="headerlink" title="一、 系统标准两个队列"></a>一、 系统标准两个队列</h4><p>​    //全局队列，一个并行的队列</p>
<p>​    <code>dispatch_get_global_queue</code></p>
<p>​    //主队列，主线程中的唯一队列，一个串行队列</p>
<p>​    <code>dispatch_get_main_queue</code></p>
<h4 id="二、自定义队列"><a href="#二、自定义队列" class="headerlink" title="二、自定义队列"></a>二、自定义队列</h4><p>​    //串行队列</p>
<p>​    <code>dispatch_queue_create(&quot;com.starming.serialqueue&quot;, DISPATCH_QUEUE_SERIAL)</code></p>
<p>​    //并行队列</p>
<p>​    <code>dispatch_queue_create(&quot;com.starming.concurrentqueue&quot;, DISPATCH_QUEUE_CONCURRENT)</code></p>
<h4 id="三、同步异步线程创建"><a href="#三、同步异步线程创建" class="headerlink" title="三、同步异步线程创建"></a>三、同步异步线程创建</h4><p>​    //同步线程</p>
<p>​    <code>dispatch_sync(..., ^(block))</code></p>
<p>​    //异步线程</p>
<p>​    <code>dispatch_async(..., ^(block))</code></p>
<h2 id="队列（dispatch-queue）"><a href="#队列（dispatch-queue）" class="headerlink" title="队列（dispatch queue）"></a>队列（dispatch queue）</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><h4 id="一、dispatch-get-global-queue"><a href="#一、dispatch-get-global-queue" class="headerlink" title="一、dispatch_get_global_queue"></a>一、dispatch_get_global_queue</h4><ol>
<li>Serial：又叫private dispatch queues，同时只执行一个任务。Serial queue常用于同步访问特定的资源或数据。 当你创建多个Serial queue时，虽然各自是同步，但serial queue之间是并发执行。 </li>
<li>Main dispatch queue：<strong>全局可用的serial queue</strong>，在应用程序<strong>主线程上</strong>执行任务。</li>
<li>Concurrent：又叫global dispatch queue，可以并发的执行多个任务，<strong>但执行完成顺序是随机的</strong>。系统提供四个全局并发队列，这四个队列有这对应的优先级，<strong>用户是不能够创建全局队列的，只能获取</strong>。 </li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">dipatch_queue_t queue;</span><br><span class="line">queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH,<span class="number">0</span>);</span><br></pre></td></tr></table></figure>



<h4 id="二、dispatch-queue-create"><a href="#二、dispatch-queue-create" class="headerlink" title="二、dispatch_queue_create"></a>二、dispatch_queue_create</h4><ol>
<li>user create queue：创建自己定义的队列，可以用dispatch_queue_create函数。</li>
<li>函数有两个参数，第一个自定义的队列名，第二个参数是队列类型，默认NULL或者 DISPATCH_QUEUE_SERIAL 的是串行，参数为 DISPATCH_QUEUE_CONCURRENT 为并行队列。</li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> queue;</span><br><span class="line">queue = dispatch_queue_create(<span class="string">&quot;com.starming.gcddemo.concurrentqueue&quot;</span>, DISPATCH_QUEUE_CONCURRENT);</span><br></pre></td></tr></table></figure>



<h4 id="三、队列优先级"><a href="#三、队列优先级" class="headerlink" title="三、队列优先级"></a>三、队列优先级</h4><ol>
<li>自定义队列的优先级：可以通过dipatch_queue_attr_make_with_qos_class或dispatch_set_target_queue方法设置队列的优先级</li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//dipatch_queue_attr_make_with_qos_class</span></span><br><span class="line">dispatch_queue_attr_t attr = dispatch_queue_attr_make_with_qos_class(DISPATCH_QUEUE_SERIAL, </span><br><span class="line">                                                                     QOS_CLASS_UTILITY, <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">&quot;com.starming.gcddemo.qosqueue&quot;</span>, attr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//dispatch_set_target_queue</span></span><br><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">&quot;com.starming.gcddemo.settargetqueue&quot;</span>,</span><br><span class="line">                                               <span class="literal">NULL</span>); <span class="comment">//需要设置优先级的queue</span></span><br><span class="line"><span class="built_in">dispatch_queue_t</span> referQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_LOW, </span><br><span class="line">                                                        <span class="number">0</span>); <span class="comment">//参考优先级</span></span><br><span class="line">dispatch_set_target_queue(queue, referQueue); <span class="comment">//设置queue和referQueue的优先级一样</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>dispatch_set_target_queue：可以设置优先级，也可以设置队列层级体系，比如让多个串行和并行队列在统一一个串行队列里串行执行，如下</li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> serialQueue = dispatch_queue_create(<span class="string">&quot;com.starming.gcddemo.serialqueue&quot;</span>, </span><br><span class="line">                                                     DISPATCH_QUEUE_SERIAL);</span><br><span class="line"><span class="built_in">dispatch_queue_t</span> firstQueue = dispatch_queue_create(<span class="string">&quot;com.starming.gcddemo.firstqueue&quot;</span>, </span><br><span class="line">                                                    DISPATCH_QUEUE_SERIAL);</span><br><span class="line"><span class="built_in">dispatch_queue_t</span> secondQueue = dispatch_queue_create(<span class="string">&quot;com.starming.gcddemo.secondqueue&quot;</span>, </span><br><span class="line">                                                     DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line"></span><br><span class="line">dispatch_set_target_queue(firstQueue, serialQueue);</span><br><span class="line">dispatch_set_target_queue(secondQueue, serialQueue);</span><br><span class="line"></span><br><span class="line"><span class="built_in">dispatch_async</span>(firstQueue, ^&#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@&quot;1&quot;</span>);</span><br><span class="line">  [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">3.</span>f];</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">dispatch_async</span>(secondQueue, ^&#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@&quot;2&quot;</span>);</span><br><span class="line">  [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2.</span>f];</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">dispatch_async</span>(secondQueue, ^&#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@&quot;3&quot;</span>);</span><br><span class="line">  [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">1.</span>f];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h3 id="队列类型"><a href="#队列类型" class="headerlink" title="队列类型"></a>队列类型</h3><p><strong>队列默认是串行的，如果设置该参数为NULL会按串行处理，只能执行一个单独的block，队列也可以是并行的，同一时间执行多个block</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)init &#123;</span><br><span class="line">  <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">self</span> != <span class="literal">nil</span>) &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *label = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;%@.isolation.%p&quot;</span>, [<span class="keyword">self</span> <span class="keyword">class</span>], <span class="keyword">self</span>];</span><br><span class="line">    <span class="keyword">self</span>.isolationQueue = dispatch_queue_create([label UTF8String], <span class="number">0</span>);</span><br><span class="line">    label = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;%@.work.%p&quot;</span>, [<span class="keyword">self</span> <span class="keyword">class</span>], <span class="keyword">self</span>];</span><br><span class="line">    <span class="keyword">self</span>.workQueue = dispatch_queue_create([label UTF8String], <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="一、5种队列"><a href="#一、5种队列" class="headerlink" title="一、5种队列"></a>一、5种队列</h4><p>主队列（main queue）, 四种通用调度队列，自己定制的队列。四种通用调度队列为 ：</p>
<ol>
<li><p><strong>QOS_CLASS_USER_INTERACTIVE</strong>：user interactive等级表示任务需要被立即执行提供好的体验，用来更新UI，响应事件等。这个等级最好保持小规模。 </p>
</li>
<li><p><strong>QOS_CLASS_USER_INITIATED</strong>：user initiated等级表示任务由UI发起异步执行。适用场景是需要及时结果同时又可以继续交互的时候。</p>
</li>
<li><p><strong>QOS_CLASS_UTILITY</strong>：utility等级表示需要长时间运行的任务，伴有用户可见进度指示器。经常会用来做计算，I/O，网络，持续的数据填充等任务。这个任务节能。 </p>
</li>
<li><p><strong>QOS_CLASS_BACKGROUND</strong>：background等级表示用户不会察觉的任务，使用它来处理预加载， 或者不需要用户交互和对时间不敏感的任务。 </p>
</li>
</ol>
<p><strong>示例：后台加载显示图片</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span>()</span> &#123;</span><br><span class="line">  <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">  dispatch_async(dispatch_get_global_queue(<span class="type">Int</span>(<span class="type">QOS_CLASS_USER_INITIATED</span>.value), <span class="number">0</span>)) &#123;</span><br><span class="line">	<span class="comment">// 将工作从主线程转移到全局队列中，这是dispatch_async调用，异步提交保证调用线程会继续执行下去，这样viewDidLoad在主线程上能够更早完成，</span></span><br><span class="line">    <span class="keyword">let</span> overlayImage <span class="operator">=</span> <span class="keyword">self</span>.faceOverlayImageFromImage(<span class="keyword">self</span>.image)</span><br><span class="line">		dispatch_async(dispatch_get_main_queue()) &#123;</span><br><span class="line">      <span class="comment">// 新图完成，把一个闭包加入主线程用来更新UIImageView，只有在主线程能操作UIKit。</span></span><br><span class="line">      <span class="keyword">self</span>.fadeInNewImage(overlayImage) <span class="comment">// 更新UI</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="二、何时使用何种队列类型"><a href="#二、何时使用何种队列类型" class="headerlink" title="二、何时使用何种队列类型"></a>二、何时使用何种队列类型</h4><ol>
<li>主队列（顺序）：<strong>队列中有任务完成需要更新UI时，dispatch_after在这种类型中使用</strong>。</li>
<li>并发队列：<strong>用来执行与UI无关的后台任务</strong>，dispatch_sync放在这里，方便等待任务，完成进行后续处理或和dispatch barrier同步。dispatch groups放在这里也不错。</li>
<li>自定义顺序队列：顺序执行后台任务并追踪它时。这样做同时只有一个任务在执行可以防止资源竞争。dipatch barriers解决读写锁问题的放在这里处理。dispatch groups也是放在这里。 </li>
</ol>
<h4 id="三、QoS等级参数的写法"><a href="#三、QoS等级参数的写法" class="headerlink" title="三、QoS等级参数的写法"></a>三、QoS等级参数的写法</h4><p>可以使用下面的方法简化QoS等级参数的写法 </p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="type">GlobalMainQueue</span>: dispatch_queue_t &#123;</span><br><span class="line">  <span class="keyword">return</span> dispatch_get_main_queue()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="type">GlobalUserInteractiveQueue</span>: dispatch_queue_t &#123;</span><br><span class="line">  <span class="keyword">return</span> dispatch_get_global_queue(<span class="type">Int</span>(<span class="type">QOS_CLASS_USER_INTERACTIVE</span>.value), <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="type">GlobalUserInitiatedQueue</span>: dispatch_queue_t &#123;</span><br><span class="line">  <span class="keyword">return</span> dispatch_get_global_queue(<span class="type">Int</span>(<span class="type">QOS_CLASS_USER_INITIATED</span>.value), <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="type">GlobalUtilityQueue</span>: dispatch_queue_t &#123;</span><br><span class="line">  <span class="keyword">return</span> dispatch_get_global_queue(<span class="type">Int</span>(<span class="type">QOS_CLASS_UTILITY</span>.value), <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="type">GlobalBackgroundQueue</span>: dispatch_queue_t &#123;</span><br><span class="line">  <span class="keyword">return</span> dispatch_get_global_queue(<span class="type">Int</span>(<span class="type">QOS_CLASS_BACKGROUND</span>.value), <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用起来就是这样，易读而且容易看出在使用哪个队列</span></span><br><span class="line">dispatch_async(<span class="type">GlobalUserInitiatedQueue</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> overlayImage <span class="operator">=</span> <span class="keyword">self</span>.faceOverlayImageFromImage(<span class="keyword">self</span>.image)</span><br><span class="line">  dispatch_async(<span class="type">GlobalMainQueue</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.fadeInNewImage(overlayImage)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="简单使用和介绍"><a href="#简单使用和介绍" class="headerlink" title="简单使用和介绍"></a>简单使用和介绍</h3><h4 id="一、dispatch-once用法"><a href="#一、dispatch-once用法" class="headerlink" title="一、dispatch_once用法"></a>一、dispatch_once用法</h4><p>​    <strong>dispatch_once_t 要是全局或static变量，保证dispatch_once_t只有一份实例</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">UIColor</span> *)boringColor &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">UIColor</span> *color;</span><br><span class="line">  <span class="comment">//只运行一次</span></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">  <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">    color = [<span class="built_in">UIColor</span> colorWithRed:<span class="number">0.380</span>f green:<span class="number">0.376</span>f blue:<span class="number">0.376</span>f alpha:<span class="number">1.000</span>f];</span><br><span class="line">	&#125;);</span><br><span class="line">  <span class="keyword">return</span> color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="二、dispatch-async"><a href="#二、dispatch-async" class="headerlink" title="二、dispatch_async"></a>二、dispatch_async</h4><p>​    设计一个异步的API调用dispatch_async()，这个调用放在API的方法或函数中做。让API的使用者设置一个回调处理队列。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)processImage:(<span class="built_in">UIImage</span> *)image completionHandler:(<span class="keyword">void</span>(^)(<span class="built_in">BOOL</span> success))handler &#123;</span><br><span class="line">  <span class="built_in">dispatch_async</span>(<span class="keyword">self</span>.isolationQueue, ^(<span class="keyword">void</span>)&#123;</span><br><span class="line">    <span class="comment">// do actual processing here</span></span><br><span class="line">    <span class="built_in">dispatch_async</span>(<span class="keyword">self</span>.resultQueue, ^(<span class="keyword">void</span>)&#123;</span><br><span class="line">      handler(<span class="literal">YES</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>豆瓣中数据加载的时候用到的就是这种方法，数据处理中使用</p>
<p><strong>可以避免界面会被一些耗时的操作卡死，比如读取网络数据，大数据IO，还有大量数据的数据库读写，这时需要在另一个线程中处理，然后通知主线程更新界面，GCD使用起来比NSThread和NSOperation方法要简单方便。</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码框架</span></span><br><span class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</span><br><span class="line">  <span class="comment">// 耗时的操作</span></span><br><span class="line">  <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    <span class="comment">// 更新界面</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//下载图片的示例</span></span><br><span class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</span><br><span class="line">  <span class="built_in">NSURL</span> * url = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@&quot;&lt;http://avatar.csdn.net/2/C/D/1_totogo2010.jpg&gt;&quot;</span>];</span><br><span class="line">  <span class="built_in">NSData</span> * data = [[<span class="built_in">NSData</span> alloc]initWithContentsOfURL:url];</span><br><span class="line">  <span class="built_in">UIImage</span> *image = [[<span class="built_in">UIImage</span> alloc]initWithData:data];</span><br><span class="line">  <span class="keyword">if</span> (data != <span class="literal">nil</span>) &#123;</span><br><span class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">      <span class="keyword">self</span>.imageView.image = image;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h4 id="三、dispatch-after延后执行"><a href="#三、dispatch-after延后执行" class="headerlink" title="三、dispatch_after延后执行"></a>三、dispatch_after延后执行</h4><p><strong>dispatch_after只是延时提交block，不是延时立刻执行。</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)foo &#123;</span><br><span class="line">  <span class="keyword">double</span> delayInSeconds = <span class="number">2.0</span>;</span><br><span class="line">  dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, </span><br><span class="line">                                          (int64_t) (delayInSeconds * <span class="built_in">NSEC_PER_SEC</span>));</span><br><span class="line">  dispatch_after(popTime, dispatch_get_main_queue(), ^(<span class="keyword">void</span>)&#123;</span><br><span class="line">    [<span class="keyword">self</span> bar];</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>范例，实现一个推迟出现弹出框提示，比如说提示用户评价等功能。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showOrHideNavPrompt</span>()</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> delayInSeconds <span class="operator">=</span> <span class="number">1.0</span></span><br><span class="line">  <span class="keyword">let</span> popTime <span class="operator">=</span> dispatch_time(<span class="type">DISPATCH_TIME_NOW</span>,</span><br><span class="line">                              <span class="type">Int64</span>(delayInSeconds <span class="operator">*</span> <span class="type">Double</span>(<span class="type">NSEC_PER_SEC</span>))) <span class="comment">// 在这里声明推迟的时间</span></span><br><span class="line">  dispatch_after(popTime, <span class="type">GlobalMainQueue</span>) &#123; <span class="comment">// 等待delayInSeconds将闭包异步到主队列</span></span><br><span class="line">    <span class="keyword">let</span> count <span class="operator">=</span> <span class="type">PhotoManager</span>.sharedManager.photos.count</span><br><span class="line">    <span class="keyword">if</span> count <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">      <span class="keyword">self</span>.navigationItem.prompt <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">self</span>.navigationItem.prompt <span class="operator">=</span> <span class="string">&quot;Add photos with faces to Googlyify them!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例子中的dispatch time的参数，可以先看看函数原型 </p>
<p><code>dispatch_time_t dispatch_time ( dispatch_time_t when, int64_t delta ); </code></p>
<p>第一个参数为DISPATCH_TIME_NOW表示当前。第二个参数的delta表示纳秒，一秒对应的纳秒为1000000000，系统提供了一些宏来简化 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NSEC_PER_SEC 1000000000ull <span class="comment">//每秒有多少纳秒</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> USEC_PER_SEC 1000000ull <span class="comment">//每秒有多少毫秒</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NSEC_PER_USEC 1000ull <span class="comment">//每毫秒有多少纳秒</span></span></span><br></pre></td></tr></table></figure>

<p>这样如果要表示一秒就可以这样写 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">dispatch_time(DISPATCH_TIME_NOW, <span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>);</span><br><span class="line">dispatch_time(DISPATCH_TIME_NOW, <span class="number">1000</span> * USEC_PER_SEC);</span><br><span class="line">dispatch_time(DISPATCH_TIME_NOW, USEC_PER_SEC * <span class="built_in">NSEC_PER_USEC</span>);</span><br></pre></td></tr></table></figure>



<h4 id="四、dispatch-barrier-async使用Barrier-Task方法"><a href="#四、dispatch-barrier-async使用Barrier-Task方法" class="headerlink" title="四、dispatch_barrier_async使用Barrier Task方法"></a>四、dispatch_barrier_async使用Barrier Task方法</h4><ol>
<li>Dispatch Barrier解决多线程并发读写同一个资源发生死锁</li>
<li>Dispatch Barrier确保提交的闭包是指定队列中在特定时段唯一在执行的一个。 </li>
<li>在所有先于Dispatch Barrier的任务都完成的情况下这个闭包才开始执行。 </li>
<li>轮到这个闭包时barrier会执行这个闭包并且确保队列在此过程不会执行其它任务。 </li>
<li>闭包完成后 队列恢复。 </li>
<li><strong>需要注意dispatch_barrier_async只在自己创建的队列上有这种作用，在全局并发队列和串行队列上，效果和 dispatch_sync一样</strong></li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建队列</span></span><br><span class="line"><span class="keyword">self</span>.isolationQueue = dispatch_queue_create([label UTF8String], DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line"><span class="comment">//改变setter</span></span><br><span class="line">- (<span class="keyword">void</span>)setCount:(<span class="built_in">NSUInteger</span>)count forKey:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">  key = [key <span class="keyword">copy</span>];</span><br><span class="line">  <span class="comment">//确保所有barrier都是async异步的</span></span><br><span class="line">  dispatch_barrier_async(<span class="keyword">self</span>.isolationQueue, ^()&#123;</span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">      [<span class="keyword">self</span>.counts removeObjectForKey:key];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">self</span>.counts[key] = @(count);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)dispatchBarrierAsyncDemo &#123;</span><br><span class="line">    <span class="comment">//防止文件读写冲突，可以创建一个串行队列，操作都在这个队列中进行，没有更新数据读用并行，写用串行。</span></span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> dataQueue = dispatch_queue_create(<span class="string">&quot;com.starming.gcddemo.dataqueue&quot;</span>,</span><br><span class="line">                                                       DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">    <span class="built_in">dispatch_async</span>(dataQueue, ^&#123;</span><br><span class="line">      [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2.</span>f];</span><br><span class="line">      <span class="built_in">NSLog</span>(<span class="string">@&quot;read data 1&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">dispatch_async</span>(dataQueue, ^&#123;</span><br><span class="line">      <span class="built_in">NSLog</span>(<span class="string">@&quot;read data 2&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//等待前面的都完成，在执行barrier后面的</span></span><br><span class="line">    dispatch_barrier_async(dataQueue, ^&#123;</span><br><span class="line">      <span class="built_in">NSLog</span>(<span class="string">@&quot;write data 1&quot;</span>);</span><br><span class="line">      [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">1</span>];</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dispatch_async</span>(dataQueue, ^&#123;</span><br><span class="line">      [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">1.</span>f];</span><br><span class="line">      <span class="built_in">NSLog</span>(<span class="string">@&quot;read data 3&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dispatch_async</span>(dataQueue, ^&#123;</span><br><span class="line">      <span class="built_in">NSLog</span>(<span class="string">@&quot;read data 4&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>swift示例</strong></p>
<p>使用dispatch_queue_create初始化一个并发队列。第一个参数遵循<strong>反向DNS命名习惯</strong>，方便描述，第二个参数是指出是并发还是顺序。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">let</span> concurrentPhotoQueue <span class="operator">=</span> dispatch_queue_create(<span class="string">&quot;com.raywenderlich.GooglyPuff.photoQueue&quot;</span>, <span class="type">DISPATCH_QUEUE_CONCURRENT</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addPhoto</span>(<span class="params">photo</span>: <span class="type">Photo</span>)</span> &#123;</span><br><span class="line">  dispatch_barrier_async(concurrentPhotoQueue) &#123;</span><br><span class="line">    <span class="comment">// 将写操作加入到自定义的队列。开始执行时这个就是队列中唯一的一个在执行的任务。</span></span><br><span class="line">    <span class="keyword">self</span>._photos.append(photo) </span><br><span class="line">    <span class="comment">// barrier能够保障不会和其他任务同时进行。</span></span><br><span class="line">    dispatch_async(<span class="type">GlobalMainQueue</span>) &#123; </span><br><span class="line">      <span class="comment">// 涉及到UI所以这个通知应该在主线程中，所以分派另一个异步任务到主队列中。</span></span><br><span class="line">      <span class="keyword">self</span>.postContentAddedNotification()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面是解决了写可能发生死锁，下面是使用dispatch_sync解决读时可能会发生的死锁。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> photos: [<span class="type">Photo</span>] &#123;</span><br><span class="line">  <span class="keyword">var</span> photosCopy: [<span class="type">Photo</span>]<span class="operator">!</span></span><br><span class="line">  dispatch_sync(concurrentPhotoQueue) &#123; <span class="comment">// 同步调度到concurrentPhotoQueue队列执行读操作</span></span><br><span class="line">    photosCopy <span class="operator">=</span> <span class="keyword">self</span>._photos <span class="comment">// 保存</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> photosCopy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样读写问题都解决了。都用异步处理避免死锁，异步的缺点在于调试不方便，但是比起同步容易产生死锁这个副作用还算小的。</p>
<h4 id="五、dispatch-apply进行快速迭代"><a href="#五、dispatch-apply进行快速迭代" class="headerlink" title="五、dispatch_apply进行快速迭代"></a>五、dispatch_apply进行快速迭代</h4><p>类似for循环，但是在并发队列的情况下dispatch_apply会并发执行block任务。 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (size_t y = <span class="number">0</span>; y &lt; height; ++y) &#123;</span><br><span class="line">  <span class="keyword">for</span> (size_t x = <span class="number">0</span>; x &lt; width; ++x) &#123;</span><br><span class="line">    <span class="comment">// Do something with x and y here</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为可以并行执行，所以使用dispatch_apply可以运行的更快 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)dispatchApplyDemo &#123;</span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> concurrentQueue = dispatch_queue_create(<span class="string">&quot;com.starming.gcddemo.concurre</span></span><br><span class="line"><span class="string">    dispatch_apply(10, concurrentQueue, ^(size_t i) &#123;</span></span><br><span class="line"><span class="string">        NSLog(@&quot;</span>%zu<span class="string">&quot;,i);</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">    NSLog(@&quot;</span>The end<span class="string">&quot;);</span></span><br><span class="line"><span class="string">    //这里有个需要注意的是，dispatch_apply这个是会阻塞主线程的。这个log打印会在dispatch_apply都结束后才开始执行</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>dispatch_apply能避免线程爆炸，因为GCD会管理并发</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)dealWiththreadWithMaybeExplode:(<span class="built_in">BOOL</span>)explode &#123;</span><br><span class="line">  <span class="built_in">dispatch_queue_t</span> concurrentQueue = dispatch_queue_create(<span class="string">&quot;com.starming.gcddemo.concurrentqueue&quot;</span>,DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">  <span class="keyword">if</span> (explode) &#123;</span><br><span class="line">    <span class="comment">//有问题的情况，可能会死锁</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">999</span> ; i++) &#123;</span><br><span class="line">      <span class="built_in">dispatch_async</span>(concurrentQueue, ^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;wrong %d&quot;</span>,i);</span><br><span class="line">        <span class="comment">//do something hard</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//会优化很多，能够利用GCD管理</span></span><br><span class="line">    dispatch_apply(<span class="number">999</span>, concurrentQueue, ^(size_t i)&#123;</span><br><span class="line">      <span class="built_in">NSLog</span>(<span class="string">@&quot;correct %zu&quot;</span>,i);</span><br><span class="line">      <span class="comment">//do something hard</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>swift示例： </p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">downloadPhotosWithCompletion</span>(<span class="params">completion</span>: <span class="type">BatchPhotoDownloadingCompletionClosure</span>?)</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> storedError: <span class="type">NSError</span>!</span><br><span class="line">  <span class="keyword">var</span> downloadGroup <span class="operator">=</span> dispatch_group_create()</span><br><span class="line">  <span class="keyword">let</span> addresses <span class="operator">=</span> [<span class="type">OverlyAttachedGirlfriendURLString</span>, </span><br><span class="line">                   <span class="type">SuccessKidURLString</span>,</span><br><span class="line">                   <span class="type">LotsOfFacesURLString</span>]</span><br><span class="line">  dispatch_apply(<span class="type">UInt</span>(addresses.count), <span class="type">GlobalUserInitiatedQueue</span>) &#123;</span><br><span class="line">    i <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">let</span> index <span class="operator">=</span> <span class="type">Int</span>(i)</span><br><span class="line">    <span class="keyword">let</span> address <span class="operator">=</span> addresses[index]</span><br><span class="line">    <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">NSURL</span>(string: address)</span><br><span class="line">    dispatch_group_enter(downloadGroup)</span><br><span class="line">    <span class="keyword">let</span> photo <span class="operator">=</span> <span class="type">DownloadPhoto</span>(url: url<span class="operator">!</span>) &#123;</span><br><span class="line">      image, error <span class="keyword">in</span> </span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">let</span> error <span class="operator">=</span> error &#123;</span><br><span class="line">        storedError <span class="operator">=</span> error</span><br><span class="line">      &#125;</span><br><span class="line">      dispatch_group_leave(downloadGroup)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">PhotoManager</span>.sharedManager.addPhoto(photo)</span><br><span class="line">  &#125;</span><br><span class="line">  dispatch_group_notify(downloadGroup, <span class="type">GlobalMainQueue</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> completion <span class="operator">=</span> completion &#123;</span><br><span class="line">      completion(error: storedError)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="六、Block组合Dispatch-groups"><a href="#六、Block组合Dispatch-groups" class="headerlink" title="六、Block组合Dispatch_groups"></a>六、Block组合Dispatch_groups</h4><p>dispatch groups是专门用来监视多个异步任务。dispatch_group_t实例用来追踪不同队列中的不同任务。</p>
<p>当group里所有事件都完成GCD API有两种方式发送通知: </p>
<ul>
<li>第一种是dispatch_group_wait，会阻塞当前进程，等所有任务都完成或等待超时。 </li>
<li>第二种方法是使用dispatch_group_notify，异步执行闭包，不会阻塞。 </li>
</ul>
<ol>
<li>第一种使用dispatch_group_wait的swift的例子： </li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">downloadPhotosWithCompletion</span>(<span class="params">completion</span>: <span class="type">BatchPhotoDownloadingCompletionClosure</span>?)</span> &#123;</span><br><span class="line">  dispatch_async(<span class="type">GlobalUserInitiatedQueue</span>) &#123;</span><br><span class="line">    <span class="comment">// 因为dispatch_group_wait会租塞当前进程，所以要使用dispatch_async将整个方法要放到后台队列才能够保证主线程不被阻塞</span></span><br><span class="line">    <span class="keyword">var</span> storedError: <span class="type">NSError</span>!</span><br><span class="line">    <span class="keyword">var</span> downloadGroup <span class="operator">=</span> dispatch_group_create() <span class="comment">// 创建一个dispatch group</span></span><br><span class="line">    <span class="keyword">let</span> addresses <span class="operator">=</span> [<span class="type">OverlyAttachedGirlfriendURLString</span>,</span><br><span class="line">                     <span class="type">SuccessKidURLString</span>,``</span><br><span class="line">                     <span class="type">LotsOfFacesURLString</span>]</span><br><span class="line">    <span class="keyword">for</span> address <span class="keyword">in</span> addresses &#123;</span><br><span class="line">      <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">NSURL</span>(string: address)</span><br><span class="line">      dispatch_group_enter(downloadGroup)</span><br><span class="line">        <span class="comment">// dispatch_group_enter是通知dispatch group任务开始了，dispatch_group_enter和dispatch_group_leave是成对调用，不然程序就崩溃了。</span></span><br><span class="line">      <span class="keyword">let</span> photo <span class="operator">=</span> <span class="type">DownloadPhoto</span>(url: url<span class="operator">!</span>) &#123;</span><br><span class="line">        image, error <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> error <span class="operator">=</span> error &#123;</span><br><span class="line">          storedError <span class="operator">=</span> error</span><br><span class="line">        &#125;</span><br><span class="line">        dispatch_group_leave(downloadGroup) </span><br><span class="line">        <span class="comment">// 保持和dispatch_group_enter配对。通知任务已经完成</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">PhotoManager</span>.sharedManager.addPhoto(photo)</span><br><span class="line">    &#125;</span><br><span class="line">    dispatch_group_wait(downloadGroup, <span class="type">DISPATCH_TIME_FOREVER</span>)</span><br><span class="line">    <span class="comment">// dispatch_group_wait等待所有任务都完成直到超时。如果任务完成前就超时了，函数会返回一个非零值，可以通过返回值判断是否超时。也可以用DISPATCH_TIME_FOREVER表示一直等。</span></span><br><span class="line">    dispatch_async(<span class="type">GlobalMainQueue</span>) &#123;</span><br><span class="line">      <span class="comment">// 这里可以保证所有图片任务都完成，然后在main queue里加入完成后要处理的闭包，会在main queue里执行。</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">let</span> completion <span class="operator">=</span> completion &#123; <span class="comment">// 执行闭包内容</span></span><br><span class="line">        completion(error: storedError)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  oc例子</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)dispatchGroupWaitDemo &#123;</span><br><span class="line">  <span class="built_in">dispatch_queue_t</span> concurrentQueue = dispatch_queue_create(<span class="string">&quot;com.starming.gcddemo.concurrentqueue&quot;</span>,DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">  dispatch_group_t group = dispatch_group_create();</span><br><span class="line">  <span class="comment">//在group中添加队列的block</span></span><br><span class="line">  dispatch_group_async(group, concurrentQueue, ^&#123;</span><br><span class="line">    [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2.</span>f];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;1&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  dispatch_group_async(group, concurrentQueue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;2&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  dispatch_group_wait(group, DISPATCH_TIME_FOREVER);</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@&quot;go on&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>第二种使用dispatch_group_notify的<strong>swift</strong>的例子： </li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">downloadPhotosWithCompletion</span>(<span class="params">completion</span>: <span class="type">BatchPhotoDownloadingCompletionClosure</span>?)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不用加dispatch_async，因为没有阻塞主进程</span></span><br><span class="line">  <span class="keyword">var</span> storedError: <span class="type">NSError</span>!</span><br><span class="line">  <span class="keyword">var</span> downloadGroup <span class="operator">=</span> dispatch_group_create()</span><br><span class="line">  <span class="keyword">for</span> address <span class="keyword">in</span> [<span class="type">OverlyAttachedGirlfriendURLString</span>,</span><br><span class="line">                  <span class="type">SuccessKidURLString</span>,</span><br><span class="line">                  <span class="type">LotsOfFacesURLString</span>] &#123;</span><br><span class="line">    <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">NSURL</span>(string: address)</span><br><span class="line">    dispatch_group_enter(downloadGroup)</span><br><span class="line">    <span class="keyword">let</span> photo <span class="operator">=</span> <span class="type">DownloadPhoto</span>(url: url<span class="operator">!</span>) &#123;</span><br><span class="line">      image, error <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">let</span> error <span class="operator">=</span> error &#123;</span><br><span class="line">        storedError <span class="operator">=</span> error</span><br><span class="line">      &#125;</span><br><span class="line">      dispatch_group_leave(downloadGroup)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">PhotoManager</span>.sharedManager.addPhoto(photo)</span><br><span class="line">  &#125;</span><br><span class="line">  dispatch_group_notify(downloadGroup, <span class="type">GlobalMainQueue</span>) &#123;</span><br><span class="line">    <span class="comment">// dispatch_group_notify和dispatch_group_wait的区别就是是异步执行闭包的，当dispatch groups中没有剩余的任务时闭包才执行。这里是指明在主队列中执行。</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> completion <span class="operator">=</span> completion &#123;</span><br><span class="line">      completion(error: storedError)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>oc例子：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//dispatch_group_notify</span></span><br><span class="line">- (<span class="keyword">void</span>)dispatchGroupNotifyDemo &#123;</span><br><span class="line">  <span class="built_in">dispatch_queue_t</span> concurrentQueue = dispatch_queue_create(<span class="string">&quot;com.starming.gcddemo.concurrentqueue&quot;</span>,DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line"></span><br><span class="line">  dispatch_group_t group = dispatch_group_create();</span><br><span class="line">  dispatch_group_async(group, concurrentQueue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;1&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  dispatch_group_async(group, concurrentQueue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;2&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;end&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@&quot;can continue&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//dispatch_group_wait</span></span><br><span class="line">- (<span class="keyword">void</span>)dispatchGroupWaitDemo &#123;</span><br><span class="line">  <span class="built_in">dispatch_queue_t</span> concurrentQueue = dispatch_queue_create(<span class="string">&quot;com.starming.gcddemo.concurrentqueue&quot;</span>,DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">  dispatch_group_t group = dispatch_group_create();</span><br><span class="line">  <span class="comment">//在group中添加队列的block</span></span><br><span class="line">  dispatch_group_async(group, concurrentQueue, ^&#123;</span><br><span class="line">    [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2.</span>f];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;1&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  dispatch_group_async(group, concurrentQueue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;2&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  dispatch_group_wait(group, DISPATCH_TIME_FOREVER);</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@&quot;can continue&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>如何对现有API使用dispatch_group_t </li>
</ol>
<p>给Core Data的-performBlock:添加groups。组合完成任务后使用dispatch_group_notify来运行一个block即可。 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)withGroup:(dispatch_group_t)group performBlock:(dispatch_block_t)block &#123;</span><br><span class="line">  <span class="keyword">if</span> (group == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    [<span class="keyword">self</span> performBlock:block];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    dispatch_group_enter(group);</span><br><span class="line">    [<span class="keyword">self</span> performBlock:^()&#123;</span><br><span class="line">      block();</span><br><span class="line">      dispatch_group_leave(group);</span><br><span class="line">    &#125;];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>NSURLConnection也可以这样做</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)withGroup:(dispatch_group_t)group sendAsynchronousRequest:(<span class="built_in">NSURLRequest</span> *)request</span><br><span class="line">            queue:(<span class="built_in">NSOperationQueue</span> *)queue completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLResponse</span>*, <span class="built_in">NSData</span>*, <span class="built_in">NSError</span>*))handler &#123;</span><br><span class="line">    <span class="keyword">if</span> (group == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        [<span class="keyword">self</span> sendAsynchronousRequest:request queue:queue completionHandler:handler];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        dispatch_group_enter(group);</span><br><span class="line">        [<span class="keyword">self</span> sendAsynchronousRequest:request</span><br><span class="line">                                queue:queue</span><br><span class="line">                    completionHandler:^(<span class="built_in">NSURLResponse</span> *response, <span class="built_in">NSData</span> *data, <span class="built_in">NSError</span> *error)&#123;</span><br><span class="line">            handler(response, data, error);</span><br><span class="line">            dispatch_group_leave(group);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>注意事项：</code> </p>
<ul>
<li>dispatch_group_async 等价于 dispatch_group_enter() 和 dispatch_group_leave() 的组合。 </li>
<li>dispatch_group_enter() 必须运行在 dispatch_group_leave() 之前。 </li>
<li>dispatch_group_enter() 和 dispatch_group_leave() 需要成对出现的 </li>
</ul>
<h4 id="七、Dispatch-Block"><a href="#七、Dispatch-Block" class="headerlink" title="七、Dispatch Block"></a>七、Dispatch Block</h4><p>​    队列执行任务都是block的方式</p>
<ol>
<li><h5 id="dispatch-block-t-创建block"><a href="#dispatch-block-t-创建block" class="headerlink" title="dispatch_block_t 创建block"></a>dispatch_block_t 创建block</h5></li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)createDispatchBlock &#123;</span><br><span class="line">  <span class="comment">//normal way</span></span><br><span class="line">  <span class="built_in">dispatch_queue_t</span> concurrentQueue = dispatch_queue_create(<span class="string">&quot;com.starming.gcddemo.concurrentqueue&quot;</span>,DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line"></span><br><span class="line">  dispatch_block_t block = dispatch_block_create(<span class="number">0</span>, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;run block&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">dispatch_async</span>(concurrentQueue, block);</span><br><span class="line">  <span class="comment">//QOS way</span></span><br><span class="line">  dispatch_block_t qosBlock = dispatch_block_create_with_qos_class(<span class="number">0</span>, QOS_CLASS_USER_INITIATED, <span class="number">-1</span>, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;run qos block&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">dispatch_async</span>(concurrentQueue, qosBlock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><h5 id="dispatch-block-wait"><a href="#dispatch-block-wait" class="headerlink" title="dispatch_block_wait"></a>dispatch_block_wait</h5><p>可以根据dispatch block来设置等待时间，参数DISPATCH_TIME_FOREVER会一直等待block结束 </p>
</li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)dispatchBlockWaitDemo &#123; </span><br><span class="line"><span class="built_in">dispatch_queue_t</span> serialQueue = dispatch_queue_create(<span class="string">&quot;com.starming.gcddemo.serialqueue&quot;</span>, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">dispatch_block_t block = dispatch_block_create(<span class="number">0</span>, ^&#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@&quot;star&quot;</span>);</span><br><span class="line">  [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">5.</span>f];</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@&quot;end&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">dispatch_async</span>(serialQueue, block);</span><br><span class="line"><span class="comment">//设置DISPATCH_TIME_FOREVER会一直等到前面任务都完成</span></span><br><span class="line">dispatch_block_wait(block, DISPATCH_TIME_FOREVER);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;ok, now can go on&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><h5 id="dispatch-block-notify"><a href="#dispatch-block-notify" class="headerlink" title="dispatch_block_notify"></a>dispatch_block_notify</h5><p>可以监视指定dispatch block结束，然后再加入一个block到队列中。 </p>
<p>三个参数分别为，第一个是需要监视的block，第二个参数是需要提交执行的队列，第三个是待加入到队列中的block </p>
</li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)dispatchBlockNotifyDemo &#123;</span><br><span class="line">  <span class="built_in">dispatch_queue_t</span> serialQueue = dispatch_queue_create(<span class="string">&quot;com.starming.gcddemo.serialqueue&quot;</span>, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">  dispatch_block_t firstBlock = dispatch_block_create(<span class="number">0</span>, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;first block start&quot;</span>);</span><br><span class="line">    [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2.</span>f];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;first block end&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">dispatch_async</span>(serialQueue, firstBlock);</span><br><span class="line">  dispatch_block_t secondBlock = dispatch_block_create(<span class="number">0</span>, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;second block run&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">//first block执行完才在serial queue中执行second block</span></span><br><span class="line">  dispatch_block_notify(firstBlock, serialQueue, secondBlock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><h5 id="dispatch-block-cancel"><a href="#dispatch-block-cancel" class="headerlink" title="dispatch_block_cancel"></a>dispatch_block_cancel</h5><p>iOS8后GCD支持对dispatch block的取消 </p>
</li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)dispatchBlockCancelDemo &#123;</span><br><span class="line">  <span class="built_in">dispatch_queue_t</span> serialQueue = dispatch_queue_create(<span class="string">&quot;com.starming.gcddemo.serialqueue&quot;</span>, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">  dispatch_block_t firstBlock = dispatch_block_create(<span class="number">0</span>, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;first block start&quot;</span>);</span><br><span class="line">    [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2.</span>f];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;first block end&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  dispatch_block_t secondBlock = dispatch_block_create(<span class="number">0</span>, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;second block run&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">dispatch_async</span>(serialQueue, firstBlock);</span><br><span class="line">  <span class="built_in">dispatch_async</span>(serialQueue, secondBlock);</span><br><span class="line">  <span class="comment">//取消secondBlock</span></span><br><span class="line">  dispatch_block_cancel(secondBlock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><h5 id="使用dispatch-block-object（调度块）在任务执行前进行取消"><a href="#使用dispatch-block-object（调度块）在任务执行前进行取消" class="headerlink" title="使用dispatch block object（调度块）在任务执行前进行取消"></a>使用dispatch block object（调度块）在任务执行前进行取消</h5><p>dispatch block object可以为队列中的对象设置 </p>
<p>示例，下载图片中途进行取消 </p>
</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">downloadPhotosWithCompletion</span>(<span class="params">completion</span>: <span class="type">BatchPhotoDownloadingCompletionClosure</span>?)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> storedError: <span class="type">NSError</span>!</span><br><span class="line">  <span class="keyword">let</span> downloadGroup <span class="operator">=</span> dispatch_group_create()</span><br><span class="line">  <span class="keyword">var</span> addresses <span class="operator">=</span> [<span class="type">OverlyAttachedGirlfriendURLString</span>,</span><br><span class="line">                   <span class="type">SuccessKidURLString</span>,</span><br><span class="line">                   <span class="type">LotsOfFacesURLString</span>]</span><br><span class="line">  addresses <span class="operator">+=</span> addresses <span class="operator">+</span> addresses <span class="comment">// 扩展address数组，复制3份</span></span><br><span class="line">  <span class="keyword">var</span> blocks: [dispatch_block_t] <span class="operator">=</span> [] <span class="comment">// 一个保存block的数组</span></span><br><span class="line"> 	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> <span class="operator">..&lt;</span> addresses.count &#123;</span><br><span class="line">    dispatch_group_enter(downloadGroup)</span><br><span class="line">    <span class="keyword">let</span> block <span class="operator">=</span> dispatch_block_create(<span class="type">DISPATCH_BLOCK_INHERIT_QOS_CLASS</span>) &#123;</span><br><span class="line">      <span class="comment">// 创建一个block，block的标志是DISPATCH_BLOCK_INHERIT_QOS_CLASS</span></span><br><span class="line">      <span class="keyword">let</span> index <span class="operator">=</span> <span class="type">Int</span>(i)</span><br><span class="line">      <span class="keyword">let</span> address <span class="operator">=</span> addresses[index]</span><br><span class="line">      <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">NSURL</span>(string: address)</span><br><span class="line">      <span class="keyword">let</span> photo <span class="operator">=</span> <span class="type">DownloadPhoto</span>(url: url<span class="operator">!</span>) &#123;</span><br><span class="line">        image, error <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> error <span class="operator">=</span> error &#123;</span><br><span class="line">          storedError <span class="operator">=</span> error</span><br><span class="line">        &#125;</span><br><span class="line">        dispatch_group_leave(downloadGroup)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">PhotoManager</span>.sharedManager.addPhoto(photo)</span><br><span class="line">    &#125;</span><br><span class="line">    blocks.append(block)</span><br><span class="line">    dispatch_async(<span class="type">GlobalMainQueue</span>, block)</span><br><span class="line">    <span class="comment">// 把这个block放到GlobalMainQueue上异步调用。因为全局队列是一个顺序队列所以方便取消对象block，同时可以保证下载任务在downloadPhotosWithCompletion返回后才开始执行。</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> block <span class="keyword">in</span> blocks[<span class="number">3</span> <span class="operator">..&lt;</span> blocks.count] &#123;</span><br><span class="line">    <span class="keyword">let</span> cancel <span class="operator">=</span> arc4random_uniform(<span class="number">2</span>) <span class="comment">// 随机返回一个整数，会返回0或1</span></span><br><span class="line">    <span class="keyword">if</span> cancel <span class="operator">==</span> <span class="number">1</span> &#123;</span><br><span class="line">      dispatch_block_cancel(block)</span><br><span class="line">      <span class="comment">// 如果是1就取消block，这个只能发生在block还在队列中并没有开始的情况下。因为把block已经放到了GlobalMainQueue中，所以这个地方会先执行，执行完了才会执行block。</span></span><br><span class="line">      <span class="comment">// 因为已经dispatch_group_enter了，所以取消时也要将其都leave掉。</span></span><br><span class="line">      dispatch_group_leave(downloadGroup)       </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  dispatch_group_notify(downloadGroup, <span class="type">GlobalMainQueue</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> completion <span class="operator">=</span> completion &#123;</span><br><span class="line">      completion(error: storedError)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="八、Dispatch-IO-文件操作"><a href="#八、Dispatch-IO-文件操作" class="headerlink" title="八、Dispatch IO 文件操作"></a>八、Dispatch IO 文件操作</h4><p>dispatch io读取文件的方式类似于下面的方式，多个线程去读取文件的切片数据，对于大的数据文件这样会比单线程要快很多。 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dispatch_async</span>(queue,^&#123;<span class="comment">/*read 0-99 bytes*/</span>&#125;);</span><br><span class="line"><span class="built_in">dispatch_async</span>(queue,^&#123;<span class="comment">/*read 100-199 bytes*/</span>&#125;);</span><br><span class="line"><span class="built_in">dispatch_async</span>(queue,^&#123;<span class="comment">/*read 200-299 bytes*/</span>&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>dispatch_io_create：创建dispatch io 。</li>
<li>dispatch_io_set_low_water：指定切割文件大小 。</li>
<li>dispatch_io_read：读取切割的文件然后合并。 </li>
</ul>
<blockquote>
<p>苹果系统日志API里用到了这个技术，可以在这里查看： </p>
<p><a href="https://github.com/Apple-FOSS-Mirror/Libc/blob/2ca2ae74647714acfc18674c3114b1a5d3325d7d/gen/asl.c">https://github.com/Apple-FOSS-Mirror/Libc/blob/2ca2ae74647714acfc18674c3114b1a5d3325d7d/gen/asl.c</a></p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">pipe_q = dispatch_queue_create(<span class="string">&quot;PipeQ&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">//创建</span></span><br><span class="line">pipe_channel = dispatch_io_create(DISPATCH_IO_STREAM, fd, pipe_q, ^(<span class="keyword">int</span> err)&#123;</span><br><span class="line">  close(fd);</span><br><span class="line">&#125;);</span><br><span class="line">*out_fd = fdpair[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置切割大小</span></span><br><span class="line">dispatch_io_set_low_water(pipe_channel, SIZE_MAX);</span><br><span class="line">dispatch_io_read(pipe_channel, <span class="number">0</span>, SIZE_MAX, pipe_q, ^(<span class="keyword">bool</span> done, dispatch_data_t pipedata, <span class="keyword">int</span> err) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err == <span class="number">0</span>) &#123;</span><br><span class="line">    size_t len = dispatch_data_get_size(pipedata);</span><br><span class="line">    <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">//对每次切块数据的处理</span></span><br><span class="line">      <span class="keyword">const</span> <span class="keyword">char</span> *bytes = <span class="literal">NULL</span>;</span><br><span class="line">      <span class="keyword">char</span> *encoded;</span><br><span class="line">      uint32_t eval;</span><br><span class="line">      dispatch_data_t md = dispatch_data_create_map(pipedata, </span><br><span class="line">                                                    (<span class="keyword">const</span> <span class="keyword">void</span> **)&amp;bytes, </span><br><span class="line">                                                    &amp;len);</span><br><span class="line">      encoded = asl_core_encode_buffer(bytes, len);</span><br><span class="line">      asl_msg_set_key_val(aux, ASL_KEY_AUX_DATA, encoded);</span><br><span class="line">      free(encoded);</span><br><span class="line">      eval = _asl_evaluate_send(<span class="literal">NULL</span>, (aslmsg)aux, <span class="number">-1</span>);</span><br><span class="line">      _asl_send_message(<span class="literal">NULL</span>, eval, aux, <span class="literal">NULL</span>);</span><br><span class="line">      asl_msg_release(aux);</span><br><span class="line">      dispatch_release(md);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (done) &#123;</span><br><span class="line">    <span class="comment">//semaphore +1使得不需要再等待继续执行下去。</span></span><br><span class="line">    dispatch_semaphore_signal(sem);</span><br><span class="line">    dispatch_release(pipe_channel);</span><br><span class="line">    dispatch_release(pipe_q);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h4 id="九、Dispatch-Source-用GCD监视进程"><a href="#九、Dispatch-Source-用GCD监视进程" class="headerlink" title="九、Dispatch Source 用GCD监视进程"></a>九、Dispatch Source 用GCD监视进程</h4><p>Dispatch Source用于监听系统的底层对象，比如文件描述符，Mach端口，信号量等。主要处理的事件如下表 </p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">DISPATCH_SOURCE_TYPE_DATA_ADD</td>
<td align="center">数据增加</td>
</tr>
<tr>
<td align="center">DISPATCH_SOURCE_TYPE_DATA_OR</td>
<td align="center">数据OR</td>
</tr>
<tr>
<td align="center">DISPATCH_SOURCE_TYPE_MACH_SEND</td>
<td align="center">Mach端口发送</td>
</tr>
<tr>
<td align="center">DISPATCH_SOURCE_TYPE_MACH_RECV</td>
<td align="center">Mach端口接收</td>
</tr>
<tr>
<td align="center">DISPATCH_SOURCE_TYPE_MEMORYPRESSURE</td>
<td align="center">内存情况</td>
</tr>
<tr>
<td align="center">DISPATCH_SOURCE_TYPE_PROC</td>
<td align="center">进程事件</td>
</tr>
<tr>
<td align="center">DISPATCH_SOURCE_TYPE_READ</td>
<td align="center">读数据</td>
</tr>
<tr>
<td align="center">DISPATCH_SOURCE_TYPE_SIGNAL</td>
<td align="center">信号</td>
</tr>
<tr>
<td align="center">DISPATCH_SOURCE_TYPE_TIMER</td>
<td align="center">定时器</td>
</tr>
<tr>
<td align="center">DISPATCH_SOURCE_TYPE_VNODE</td>
<td align="center">文件系统变化</td>
</tr>
<tr>
<td align="center">DISPATCH_SOURCE_TYPE_WRITE</td>
<td align="center">文件写入</td>
</tr>
</tbody></table>
<p>方法 </p>
<ul>
<li>dispatch_source_create：创建 dispatch source ，创建后会处于挂起状态进行事件接收，需要设置事件处理handler进行事件处理。 </li>
<li>dispatch_source_set_event_handler：设置事件处理 handler </li>
<li>dispatch_source_set_cancel_handler：事件取消handler，就是在 dispatch source 释放前做些清理的事。 </li>
<li>dispatch_source_cancel：关闭 dispatch source，设置的事件处理 handler 不会被执行，已经执行的事件handler不会取消。 </li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSRunningApplication</span> *mail = [<span class="built_in">NSRunningApplication</span> runningApplicationsWithBundleIdentifier:<span class="string">@&quot;com.apple.mail&quot;</span>];</span><br><span class="line"><span class="keyword">if</span> (mail == <span class="literal">nil</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pid_t <span class="keyword">const</span> pid = mail.processIdentifier;</span><br><span class="line"><span class="keyword">self</span>.source = dispatch_source_create(DISPATCH_SOURCE_TYPE_PROC, pid, </span><br><span class="line">                                     DISPATCH_PROC_EXIT, </span><br><span class="line">                                     DISPATCH_TARGET_QUEUE_DEFAULT);</span><br><span class="line">dispatch_source_set_event_handler(<span class="keyword">self</span>.source, ^()&#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@&quot;Mail quit.&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在事件源传到你的事件处理前需要调用dispatch_resume()这个方法</span></span><br><span class="line">dispatch_resume(<span class="keyword">self</span>.source);</span><br></pre></td></tr></table></figure>



<p>监视文件夹内文件变化 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSURL</span> *directoryURL; <span class="comment">// assume this is set to a directory</span></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">const</span> fd = open([[directoryURL path] fileSystemRepresentation], O_EVTONLY);</span><br><span class="line"><span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">char</span> buffer[<span class="number">80</span>];</span><br><span class="line">	strerror_r(errno, buffer, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@&quot;Unable to open &quot;</span>%<span class="string">@&quot;: %s (%d)&quot;</span>, [directoryURL path], buffer, errno);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dispatch_source_t source = dispatch_source_create(DISPATCH_SOURCE_TYPE_VNODE, </span><br><span class="line">                                                  fd,</span><br><span class="line">                                                  DISPATCH_VNODE_WRITE | </span><br><span class="line">                                                  DISPATCH_VNODE_DELETE, </span><br><span class="line">                                                  DISPATCH_TARGET_QUEUE_DEFAULT);</span><br><span class="line"></span><br><span class="line">dispatch_source_set_event_handler(source, ^()&#123;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">const</span> data = dispatch_source_get_data(source);</span><br><span class="line">	<span class="keyword">if</span> (data &amp; DISPATCH_VNODE_WRITE) &#123;</span><br><span class="line">		<span class="built_in">NSLog</span>(<span class="string">@&quot;The directory changed.&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (data &amp; DISPATCH_VNODE_DELETE) &#123;</span><br><span class="line">		<span class="built_in">NSLog</span>(<span class="string">@&quot;The directory has been deleted.&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line">dispatch_source_set_cancel_handler(source, ^()&#123;</span><br><span class="line">	close(fd);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">self</span>.source = source;</span><br><span class="line">dispatch_resume(<span class="keyword">self</span>.source);</span><br></pre></td></tr></table></figure>

<p><strong>还要注意需要用DISPATCH_VNODE_DELETE 去检查监视的文件或文件夹是否被删除，如果删除了就停止监听</strong></p>
<p>NSTimer在主线程的runloop里会在runloop切换其它模式时停止，这时就需要手动在子线程开启一个模式为 NSRunLoopCommonModes的runloop， 如果不想开启一个新的runloop可以用不跟runloop关联的dispatch source timer，如下。 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">dispatch_source_t source = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER,</span><br><span class="line">                                                  <span class="number">0</span>, </span><br><span class="line">                                                  <span class="number">0</span>, </span><br><span class="line">                                                  DISPATCH_TARGET_QUEUE_DEFAULT);</span><br><span class="line"></span><br><span class="line">dispatch_source_set_event_handler(source, ^()&#123;</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@&quot;Time flies.&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">dispatch_time_t start</span><br><span class="line">dispatch_source_set_timer(source, </span><br><span class="line">                          DISPATCH_TIME_NOW, </span><br><span class="line">                          <span class="number">5</span>ull * <span class="built_in">NSEC_PER_SEC</span>,</span><br><span class="line">                          <span class="number">100</span>ull * <span class="built_in">NSEC_PER_MSEC</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">self</span>.source = source;</span><br><span class="line">dispatch_resume(<span class="keyword">self</span>.source);</span><br></pre></td></tr></table></figure>



<h4 id="十、Dispatch-Semaphore和的介绍"><a href="#十、Dispatch-Semaphore和的介绍" class="headerlink" title="十、Dispatch Semaphore和的介绍"></a>十、Dispatch Semaphore和的介绍</h4><p>另外一种保证同步的方法。使用 dispatch_semaphore_signal 加1 dispatch_semaphore_wait 减1，为0时等待的设置方式来达到线程同步的目的和 同步锁一样能够解决资源抢占的问题。 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//dispatch semaphore</span></span><br><span class="line">- (<span class="keyword">void</span>)dispatchSemaphoreDemo &#123;</span><br><span class="line">  <span class="comment">//创建semaphore</span></span><br><span class="line">	dispatch_semaphore_t semaphore = dispatch_semaphore_create(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@&quot;start&quot;</span>);</span><br><span class="line">	[<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">1.</span>f];</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@&quot;semaphore +1&quot;</span>);</span><br><span class="line">	dispatch_semaphore_signal(semaphore); <span class="comment">//+1 semaphore</span></span><br><span class="line">    </span><br><span class="line">	&#125;);</span><br><span class="line">	dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@&quot;continue&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="十一、锁"><a href="#十一、锁" class="headerlink" title="十一、锁"></a>十一、锁</h4><p>这里简单介绍下iOS中常用的各种锁和他们的性能。 </p>
<ul>
<li>NSRecursiveLock：递归锁，可以在一个线程中反复获取锁不会造成死锁，这个过程会记录获取锁和释放锁的次数来达到何时释放的作用。 </li>
<li>NSDistributedLock：分布锁，基于文件方式的锁机制，可以跨进程访问。 </li>
<li>NSConditionLock：条件锁，用户定义条件，确保一个线程可以获取满足一定条件的锁。 因为线程间竞争会涉及到条件锁检测，系统调用上下切换频繁导致耗时是几个锁里最长的。 </li>
<li>OSSpinLock：自旋锁，不进入内核，减少上下文切换，性能最高，但抢占多时会占用较多cpu，好点多，这时使用pthread_mutex较好。 </li>
<li>pthread_mutex_t：同步锁基于C语言，底层api性能高，使用方法和其它的类似。 </li>
<li>@synchronized：更加简单。 </li>
</ul>
<h4 id="十二、dispatch-suspend和dispatch-resume挂起和恢复队列"><a href="#十二、dispatch-suspend和dispatch-resume挂起和恢复队列" class="headerlink" title="十二、dispatch_suspend和dispatch_resume挂起和恢复队列"></a>十二、dispatch_suspend和dispatch_resume挂起和恢复队列</h4><p>dispatch_suspend这里挂起不会暂停正在执行的block，只是能够暂停还没执行的block。 </p>
<h4 id="十三、dispatch-set-context和dispatch-get-context"><a href="#十三、dispatch-set-context和dispatch-get-context" class="headerlink" title="十三、dispatch_set_context和dispatch_get_context"></a>十三、dispatch_set_context和dispatch_get_context</h4><p>?</p>
<h2 id="GCD深入操作"><a href="#GCD深入操作" class="headerlink" title="GCD深入操作"></a>GCD深入操作</h2><ul>
<li>缓冲区：dispatch_data_t 基于零碎的内存区域，使用 dispatch_data_apply 来遍历，还可以用 dispatch_data_create_subrange 来创建一个不做任何拷贝的子区域 </li>
<li>I/O调度：使用GCD提供的dispatch_io_read，dispatch_io_write和dispatch_io_close </li>
<li>测试：使用 dispatch_benchmark 小工具 </li>
<li>原子操作： libkern/OSAtomic.h 里可以查看那些函数，用于底层多线程编程。 </li>
</ul>
<h3 id="GCD死锁"><a href="#GCD死锁" class="headerlink" title="GCD死锁"></a>GCD死锁</h3><p>串行队列里面同步一个串行队列就会死锁，解决的方法就是将同步的串行队列放到另外一个线程就能够解决。 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)deadLockCase1 &#123;</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@&quot;1&quot;</span>);</span><br><span class="line">	<span class="comment">//主队列的同步线程，按照FIFO的原则（先入先出），2排在3后面会等3执行完，但因为同步线程，3又要等2执行完，相互等待成为死锁。</span></span><br><span class="line">	<span class="built_in">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">		<span class="built_in">NSLog</span>(<span class="string">@&quot;2&quot;</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@&quot;3&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)deadLockCase2 &#123;</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@&quot;1&quot;</span>);</span><br><span class="line">	<span class="comment">//3会等2，因为2在全局并行队列里，不需要等待3，这样2执行完回到主队列，3就开始执行</span></span><br><span class="line">	<span class="built_in">dispatch_sync</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, <span class="number">0</span>), ^&#123;</span><br><span class="line">		<span class="built_in">NSLog</span>(<span class="string">@&quot;2&quot;</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@&quot;3&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)deadLockCase3 &#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">dispatch_queue_t</span> serialQueue = dispatch_queue_create(<span class="string">&quot;com.starming.gcddemo.serialqueue&quot;</span>, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@&quot;1&quot;</span>);</span><br><span class="line">	<span class="built_in">dispatch_async</span>(serialQueue, ^&#123;</span><br><span class="line">		<span class="built_in">NSLog</span>(<span class="string">@&quot;2&quot;</span>);</span><br><span class="line">			<span class="comment">//串行队列里面同步一个串行队列就会死锁</span></span><br><span class="line">		<span class="built_in">dispatch_sync</span>(serialQueue, ^&#123;</span><br><span class="line">			<span class="built_in">NSLog</span>(<span class="string">@&quot;3&quot;</span>);</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="built_in">NSLog</span>(<span class="string">@&quot;4&quot;</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@&quot;5&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)deadLockCase4 &#123;</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@&quot;1&quot;</span>);</span><br><span class="line">	<span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</span><br><span class="line">		<span class="built_in">NSLog</span>(<span class="string">@&quot;2&quot;</span>);</span><br><span class="line">		<span class="comment">//将同步的串行队列放到另外一个线程就能够解决</span></span><br><span class="line">		<span class="built_in">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">			<span class="built_in">NSLog</span>(<span class="string">@&quot;3&quot;</span>);</span><br><span class="line">		&#125;);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;4&quot;</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@&quot;5&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)deadLockCase5 &#123;</span><br><span class="line">	<span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</span><br><span class="line">		<span class="built_in">NSLog</span>(<span class="string">@&quot;1&quot;</span>);</span><br><span class="line">		<span class="comment">//回到主线程发现死循环后面就没法执行了</span></span><br><span class="line">		<span class="built_in">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">			<span class="built_in">NSLog</span>(<span class="string">@&quot;2&quot;</span>);</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="built_in">NSLog</span>(<span class="string">@&quot;3&quot;</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@&quot;4&quot;</span>);</span><br><span class="line">	<span class="comment">//死循环</span></span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="GCD实际使用"><a href="#GCD实际使用" class="headerlink" title="GCD实际使用"></a>GCD实际使用</h3><p>FMDB如何使用 <strong>dispatch_queue_set_specific</strong> 和 <strong>dispatch_get_specific</strong> 来防止死锁，作用类似objc_setAssociatedObject跟objc_getAssociatedObject </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">void</span> * <span class="keyword">const</span> kDispatchQueueSpecificKey = &amp;kDispatchQueueSpecificKey;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建串行队列，所有数据库的操作都在这个队列里</span></span><br><span class="line">_queue = dispatch_queue_create([[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;fmdb.%@&quot;</span>, <span class="keyword">self</span>] UTF8String],</span><br><span class="line">                               <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//标记队列</span></span><br><span class="line">dispatch_queue_set_specific(_queue, kDispatchQueueSpecificKey, (__bridge <span class="keyword">void</span> *)<span class="keyword">self</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查是否是同一个队列来避免死锁的方法</span></span><br><span class="line">- (<span class="keyword">void</span>)inDatabase:(<span class="keyword">void</span> (^)(FMDatabase *db))block &#123;</span><br><span class="line">	 FMDatabaseQueue *currentSyncQueue = (__bridge <span class="keyword">id</span>)dispatch_get_specific(kDispatchQueueSpecificKey);</span><br><span class="line">	assert(currentSyncQueue != <span class="keyword">self</span> &amp;&amp; <span class="string">&quot;inDatabase: was called reentrantly on the same queue,which would lead to a deadlock&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="iOS系统版本新特性"><a href="#iOS系统版本新特性" class="headerlink" title="iOS系统版本新特性"></a>iOS系统版本新特性</h2><h3 id="iOS8"><a href="#iOS8" class="headerlink" title="iOS8"></a>iOS8</h3><p>iOS8 新加了一个功能叫 Quality of Service(QoS)，里面提供了一下几个更容易理解的枚举名来使用user interactive，user initiated，utility和background。下面的表做了对比 </p>
<table>
<thead>
<tr>
<th align="center">Global queue</th>
<th align="center">Corresponding QoS class</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Main thread</td>
<td align="center">NSQualityOfServiceUserInteractive</td>
<td align="center">UI相关，交互等。</td>
</tr>
<tr>
<td align="center">DISPATCH_QUEUE_PRIORITY_HIGH</td>
<td align="center">NSQualityOfServiceUserInitiated</td>
<td align="center">用户发起需要马上得到结果进行后续任务。</td>
</tr>
<tr>
<td align="center">DISPATCH_QUEUE_PRIORITY_DEFAULT</td>
<td align="center">NSQualityOfServiceDefault</td>
<td align="center">默认的不应该使用这个设置任务。</td>
</tr>
<tr>
<td align="center">DISPATCH_QUEUE_PRIORITY_LOW</td>
<td align="center">NSQualityOfServiceUtility</td>
<td align="center">花费时间稍多比如下载，需要几秒或几分钟的。</td>
</tr>
<tr>
<td align="center">DISPATCH_QUEUE_PRIORITY_BACKGROUND</td>
<td align="center">NSQualityOfServiceBackground</td>
<td align="center">不可见在后台的操作可能需要好几分钟甚至几小时的。</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>Git-Flow 使用规范</title>
    <url>/2021/09/18/Git-Flow/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>Git-Flow 是构建在 Git 之上的一个组织软件开发活动的模型，是在 Git 之上构建的一项软件开发最佳实践。</p>
<p>2010 年 Vincent Driessen 提出了 <a href="http://nvie.com/posts/a-successful-git-branching-model/">A Successful Git Branching Model</a> 分支模型，用来帮助开发人员在大型软件项目中追踪 feature，hotfix 和 release。Gitflow 使整个分支模型自动化完成，更加易用。</p>
</blockquote>
<h2 id="分支说明"><a href="#分支说明" class="headerlink" title="分支说明"></a>分支说明</h2><ol>
<li>主分支：maser 分支和 develop 分支为主分支，是受保护分支，只有 master 权限可以操作，<strong>只接受代码合并不接受代码提交</strong>。</li>
<li>辅助分支：feature 功能分支、bugfix 功能修复分支、release 发布分支、hotfix 热修复分支为辅助分支，完成功能之后合并会主分支，并删除。</li>
</ol>
<p>Git-Flow 模型中定义了主分支和辅助分支两类分支。其中主分支用于组织与软件开发、部署相关的活动；辅助分支用于组织为了解决特定的问题而进行的各种开发活动。</p>
<h2 id="主分支"><a href="#主分支" class="headerlink" title="主分支"></a>主分支</h2><p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/git-flow-main.jpeg" alt="img"></p>
<span id="more"></span>

<p>Git-Flow 定义了两个主分支，是长期支持分支，不会被删除。<strong>注意，主分支只接受代码合并，不接受代码提交</strong>。</p>
<h3 id="master-分支"><a href="#master-分支" class="headerlink" title="master 分支"></a>master 分支</h3><blockquote>
<p>We consider origin/master to be the main branch where the source code of HEAD always reflects a production-ready state.</p>
</blockquote>
<p>引用原作者的描述，master 分支上的代码始终指向生产就绪状态。</p>
<p>我理解这句话的意思就是：master 分支上的代码应该是<strong>最近发布</strong>到生产环境的代码。</p>
<p>master 分支规定：</p>
<ul>
<li>和生产的代码保持一致</li>
<li><strong>仅在上线前才更新 master 分支上的代码</strong></li>
<li>每次更新 master，都需对 master 添加指定格式的 tag，用于发布或回滚</li>
<li>master 分支是保护分支，不可直接 push 到远程 master 分支</li>
<li>master 分支代码只能被 release 分支或 hotfix 分支合并，不接受其他分支的合并</li>
</ul>
<p>所以我们规定 (请大家牢记)：</p>
<p><strong>master 分支上的代码，随时可以上线</strong>。</p>
<p><strong>master 分支上的代码，随时可以上线。</strong></p>
<p><strong>master 分支上的代码，随时可以上线。</strong></p>
<h3 id="develop-分支"><a href="#develop-分支" class="headerlink" title="develop 分支"></a>develop 分支</h3><blockquote>
<p>We consider origin/develop to be the main branch where the source code of HEAD always reflects a state with the latest delivered development changes for the next release. Some would call this the “integration branch”. This is where any automatic nightly builds are built from.</p>
</blockquote>
<p>引用原作者的描述，develop 分支是下一个发布的最新交付代码，叫做 “集成分支”。每日构建应该在 develop 分支上。</p>
<p>我理解这句话的意思就是：develop 分支是我们的主要开发分支，为下一阶段需要上线功能的集成分支。</p>
<p>develop 分支规定：</p>
<ul>
<li>develop 分支不能与 master 分支直接交互</li>
</ul>
<p>这里我们就有几个问题了：</p>
<ol>
<li>develop 是开发分支，但是又不能提交代码？咋办？</li>
<li>master 分支是生产分支，develop 测试完了，又不能直接交互，咋办？</li>
<li>如果不合并，那要是不能及时上线，develop 没办法继续合并新的功能了，工作就停了？</li>
<li>但是有个问题，合并到 master 分之后，线上环境有个 bug 需要修复，咋办？</li>
</ol>
<p>Bingo~这个时候就用到了辅助分支。</p>
<h2 id="辅助分支"><a href="#辅助分支" class="headerlink" title="辅助分支"></a>辅助分支</h2><p>辅助分支是辅助团队进行并行开发，功能跟踪，线上快速修复，与主分支不同，这些分支不是长期支持分支，完成之后会删除。</p>
<p>这些分支每一个都有特定目的，必须遵守关于分支的起始分支以及合并目标分支的规则。</p>
<p>辅助分支有以下几种：</p>
<ul>
<li>feature 功能分支</li>
<li>bugfix 缺陷修复分支 (在原文中并未提及，但是 <a href="https://github.com/petervanderdoes/gitflow-avh/wiki/Installing-on-Mac-OS-X">avh</a> 版本 git-flow 包含此分支)</li>
<li>release 发布分支</li>
<li>hotfix 热修复分支</li>
<li>support 长期支持分支</li>
</ul>
<p>先来一张图，大家感受一下。</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/git-flow-branch.jpeg" alt="img"></p>
<h3 id="feature-分支"><a href="#feature-分支" class="headerlink" title="feature 分支"></a>feature 分支</h3><p>【强制】出自：develop 分支<br>【强制】合并回：develop 分支<br>【强制】命名规范：/feature/[英文功能名称]</p>
<p>功能分支的本质是，只要功能处于开发阶段，它就会存在，但最终会合并回 develop 或丢弃。</p>
<p>原文中提到一句话“Feature branches typically exist in developer repos only, not in origin. ”功能分支通常只存在于开发者本地仓库，而不在远程仓库。</p>
<p>这里我们根据实际情况来调整，功能开发多人协作很常见，所以我们认为功能分支应该存在远程仓库。</p>
<p>feature 规定：</p>
<ol>
<li>以功能为单位从 develop 拉一个 feature 分支</li>
<li>每个 feature 分支颗粒要尽量小，以利于快速迭代和避免冲突</li>
<li>在本地单元测试及 review 通过后，向项目主管申请，由项目主管或专人合并推送到 Gitlab 的 develop</li>
<li>合并前，应先拉取远程 develop 将本地 develop 更新</li>
<li>feature 分支只与 develop 分支交互，不能与 master 分支直接交互</li>
</ol>
<p>此分支解决了我们第一个疑问</p>
<ul>
<li>develop 是开发分支，但是又不能提交代码？咋办？</li>
</ul>
<p>所有的开发都是在 feature 分支上进行，最终合并回 develop 分支上。</p>
<h3 id="release-分支"><a href="#release-分支" class="headerlink" title="release 分支"></a>release 分支</h3><p>【强制】出自：develop 分支<br>【强制】合并回：develop 和 master 分支<br>【强制】命名规范：/release/[发布版本号]</p>
<p>发布分支为下一个生产版本，只允许小错误的修复和准备发布的元数据 [版本号，发布日志，日期等] 的修改。最终发布版本号，在发布分支决定。</p>
<p>通过发布分支，可以释放 develop 分支，以进行下一阶段的工作。</p>
<p>发布分支我们规定：</p>
<ol>
<li>生成 release 分支，首先修改版本号，以区别 develop 分支的版本</li>
<li>只存在一个发布分支 (这个是 gitflow 目前的规定，可以讨论一下)</li>
<li>当需要为发布新版做准备时，从 develop 衍生出一个 release 分支</li>
<li>release 分支也可以从 develop 分支上指定 commit 派生出</li>
<li>release 分支测试通过后，合并到 master 分支并且给 master 标记一个版本号</li>
<li><strong>release 分支一旦建立就将独立，不再从其他分支合并代码</strong></li>
<li>必须合并回 develop 分支和 master 分支或废弃</li>
</ol>
<p>此分支解决了我们两个疑问</p>
<ul>
<li>master 分支是生产分支，develop 测试完了，又不能直接交互，咋办？</li>
<li>如果不合并，那要是不能及时上线，develop 没办法继续合并新的功能了，工作就停了？</li>
</ul>
<p>master 通过引入 release 分支来进行 develop 进行交互，使用 release 分支，既能进行发布前的独立验证，又能不影响其他的功能分支合并会 develop 进行每日构建。</p>
<h3 id="bugfix-分支"><a href="#bugfix-分支" class="headerlink" title="bugfix 分支"></a>bugfix 分支</h3><p>【强制】出自：develop 分支<br>【强制】合并回：develop 分支<br>【强制】命名规范：/bugfix/[bug - 英文缺陷名称或者 bug 编号]</p>
<p>缺陷分支，主要进行缺陷的修复记录，和功能分支类似，gitflow 流程中，没有定义缺陷分支，为了区分缺陷与功能，新建缺陷分支用于区别功能，也可以忽略此分支，直接在功能分支中进行修复。注意在 commit message 中做区分。</p>
<h3 id="hotfix-分支"><a href="#hotfix-分支" class="headerlink" title="hotfix 分支"></a>hotfix 分支</h3><p>【强制】出自：master 分支<br>【强制】合并回：master 分支 和 [develop 分支 release 分支]<br>【强制】命名规范：/hotfix/[发布版本号]</p>
<p>热修复分支，类似于发布分支，都是为了准备新的生产上线版本。</p>
<p>当线上版本出现了不得不立即修复的缺陷时，可以从 master 分支新建热修复分支。修复完成之后，更改版本号，合并回 master 分支以及 develop 分支。</p>
<p><strong>注意，当在热修复之前已经发布了下一个发布版本的时候，此时热修复分支应该合并回 master 和 release 分支，release 分支完成之后，会把热修复的分支合并回 develop 分支。</strong></p>
<p>hotfix 分支规定：</p>
<ol>
<li>hotfix 分支用来快速给已发布产品修复 bug 或微调功能</li>
<li>只能从 master 分支指定 tag 版本衍生出来</li>
<li>一旦完成修复 bug，必须合并回 master 分支和 develop 分支</li>
<li>master 被合并后，应该被标记一个新的版本号</li>
<li>hotfix 分支一旦建立就将独立，不可再从其他分支 pull 代码</li>
</ol>
<p>此分支解决了我们最后一个疑问</p>
<ul>
<li>但是有个问题，合并到 master 分之后，线上环境有个 bug 需要修复，咋办？</li>
</ul>
<p>生产环境的 bug 修复由 hotfix 分支负责。</p>
<p>再来个大图 引自 <a href="https://www.jianshu.com/p/d46da933c180">https://www.jianshu.com/p/d46da933c180</a></p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/git-flow.png" alt="img"></p>
]]></content>
      <tags>
        <tag>7788</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 乱七八糟之 GoLand 不提示不高亮</title>
    <url>/2022/04/22/Go_No_Code_Tips/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p>当我正在愉快的使用 Go 编写 “Hello, World!” 时，GoLand 弹出了一个提示框、有三两个选项，说实话我没细看就随便选了一个，然后…再敲代码时，code 自动提示没有了、pkg 自动引入没有了、换行时自动缩进没有了、代码高亮没有了、方法旁边的绿色小按钮也不见了、打开 “Hello, World!” 项目居然都要转半分钟的菊花…</p>
<p>…哭笑不得…</p>
<p>跟同事鼓捣了半天 File Encodings，发现并不是编码格式的事儿。就在我要重装 GoLand 时，在偏好设置里发现了一个很突兀的 <code>2</code>…</p>
<img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/go-no-tips0.png" style="zoom:50%;">

<p>是的，Preferences -&gt; Editor -&gt; File Types，选中 Go files ，发现 Go 文件的后缀 *.go 里多了一个 2，然后 Text 类型文件的后缀里多了一个 *.go …<br>所以把 Text 中的 *.go 删掉，把 Go files 中的 *.go2 改为 *.go 就好了。</p>
<img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/go-no-tips1.png" style="zoom: 50%;">

<p>破案了破案了，至于为什么…小咪表示也不知道…😂<br>就…还是…哭笑不得…</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/%E5%99%97%E5%97%A4.gif"></p>
<hr>
]]></content>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + GitHub Pages 404</title>
    <url>/2017/10/02/GitHubPages404/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>如何配置GitHub Pages网上资料很多，这里就不多说了，我们补充一个问题的解决方式。很多人都出会出现，Hexo项目传到 GitHub 的仓库后，访问 <code>username.github.io</code> 域名，结果是404</p>
<p>我搜集到的解决办法大概有三个，希望能帮到你：</p>
<p>​        <span id="more"></span></p>
<h4 id="1、Git-仓库的仓库名和-GitHub-Pages-的域名，按照GitHub的要求，配置成："><a href="#1、Git-仓库的仓库名和-GitHub-Pages-的域名，按照GitHub的要求，配置成：" class="headerlink" title="1、Git 仓库的仓库名和 GitHub Pages 的域名，按照GitHub的要求，配置成："></a>1、Git 仓库的仓库名和 GitHub Pages 的域名，按照GitHub的要求，配置成：</h4><p>&lt;github账号名&gt;.github.io</p>
<p>像我就是 ATommyGirl.github.io</p>
<h4 id="2、检查-Hexo-站点的配置文件-condig-yml-中关于-Git-的设置是否有问题"><a href="#2、检查-Hexo-站点的配置文件-condig-yml-中关于-Git-的设置是否有问题" class="headerlink" title="2、检查 Hexo 站点的配置文件 _condig.yml 中关于 Git 的设置是否有问题"></a>2、检查 Hexo 站点的配置文件 _condig.yml 中关于 Git 的设置是否有问题</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:ATommyGirl/ATommyGirl.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p>看下 repo 和 branch 是否写错了，如果你是从网上复制的这一端配置，顺便检查一下yml 格式是不是错了，多了一个空格之类的呀，哈哈哈。</p>
<h4 id="3、缺少-index-html-文件，或者说”首页没了”，这个是我当时遇到的问题"><a href="#3、缺少-index-html-文件，或者说”首页没了”，这个是我当时遇到的问题" class="headerlink" title="3、缺少 index.html 文件，或者说”首页没了”，这个是我当时遇到的问题"></a>3、缺少 index.html 文件，或者说”首页没了”，这个是我当时遇到的问题</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在站点目录下，Git Bash 中 执行</span></span><br><span class="line">npm install hexo-generator-index --save</span><br></pre></td></tr></table></figure>

<p>之后就生成 index.html 文件了，然后重新执行上传 <code>hexo clean</code> <code>hexo g -d</code> 试试，反正我的是可以了。我是做移动端开发的，web前端着实有点迷……也都是东拼西凑的资料。</p>
<p>需要联系的，去 “关于(About)” 中找到我吧。</p>
]]></content>
      <tags>
        <tag>7788</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 乱七八糟之 command-line-arguments</title>
    <url>/2022/04/20/Go_command_line_arguments/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p>有段时间没有学习 Go 的开发，加之最近换了电脑，导致 Go 的开发环境需要重新安装一遍，但时间隔得太久我甚至连编译方式都快忘光了😂……赶紧做个记录。<br>今天遇到的小问题是在跑之前的一个 Demo 时，提示方法找不到：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># command-line-arguments</span></span><br><span class="line">./main.go:<span class="number">29</span>:<span class="number">14</span>: undefined: Add</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>Demo 的目录结构是：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">hello</span><br><span class="line">├── bin</span><br><span class="line">├── pkg</span><br><span class="line">└── src</span><br><span class="line">    └── main</span><br><span class="line">        ├── func<span class="built_in">_</span>use.go</span><br><span class="line">        ├── loop<span class="built_in">_</span>use.go</span><br><span class="line">        ├── main.go</span><br><span class="line">        ├── map<span class="built_in">_</span>use.go</span><br><span class="line">        ├── method<span class="built_in">_</span>use.go</span><br><span class="line">        ├── slice<span class="built_in">_</span>use.go</span><br><span class="line">        └── type<span class="built_in">_</span>use.go</span><br></pre></td></tr></table></figure>

<p>导致上面问题的原因是，Add 方法是在 type_use.go 内定义的，但是编译的时候只编译了 main.go 文件…<br>如果你使用的 IDE 也是 GoLand，可以尝试这样修改一下——修改编译方式:</p>
<p>1、打开 Edit Configurations…</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/command-line-arguments-0.png"></p>
<p>2、Run kind 选择的是 File 类型，只编译指定的文件，所以其他 go 文件内的方法找不到是正常的。</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/command-line-arguments-1.png"></p>
<p>3、将 Run kind 改为 Directory 类型，指定好编译目录。</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/command-line-arguments-2.png"></p>
<p>改完以后，估计就可以见到 “人生苦短，Let’s Go!” 了，美滋滋~~</p>
<hr>
]]></content>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP 的一点儿小知识</title>
    <url>/2015/08/02/HTTP%20%E7%9A%84%E4%B8%80%E7%82%B9%E5%84%BF%E5%B0%8F%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h2><h3 id="一、Hypertext-Transfer-Protocol"><a href="#一、Hypertext-Transfer-Protocol" class="headerlink" title="一、Hypertext Transfer Protocol"></a>一、Hypertext Transfer Protocol</h3><blockquote>
<p>超文本传输协议 超文本传输协议</p>
<p>http协议规定了客户端和服务器之间的数据传输格式。</p>
<p>http协议是在网络开发中最常用的协议，不管是移动客户端还是PC端,访问网络资源经常使用http协议。</p>
</blockquote>
<p>​        <span id="more"></span></p>
<p>http优点:</p>
<ul>
<li><strong>简单快速</strong>：http协议简单,通信速度很快.</li>
<li><strong>灵活</strong>：http协议允许传输任意类型的数据.</li>
<li>http协议是<strong>短连接</strong>(非持续性连接) (TCP/IP  UDP/IP)：http协议限制每次连接只处理一个请求，服务器对客户端的请求作出响应后，马上断开连接，这种方式可以节省传输时间。</li>
</ul>
<h3 id="二、-http协议的使用"><a href="#二、-http协议的使用" class="headerlink" title="二、 http协议的使用"></a>二、 http协议的使用</h3><ol>
<li><strong>请求</strong>：客户端向服务器索要数据。</li>
</ol>
<p>​        http协议规定：一个完整的http请求包含<code>请求行、请求头、请求体</code>三个部分。</p>
<ul>
<li>请求行 : 包含了请求方法，请求资源路径，http协议版本。</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/resources/images/</span> <span class="meta">HTTP/1.1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>请求头：包含了对客户端的环境描述，客户端请求的主机地址等信息。</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">:</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html // 客户端所能接收的数据类型</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-cn // 客户端的语言环境</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip // 客户端支持的数据压缩格式</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>m.baidu.com // 客户端想访问的服务器主机地址</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:37.0) Gecko/20100101 Firefox/37.0// 客户端的类型,客户端的软件环境</span><br></pre></td></tr></table></figure>

<ul>
<li>请求体：客户端发给服务器的具体数据，比如文件/图片等。 </li>
</ul>
<ol start="2">
<li><strong>响应</strong>：服务器返回客户端想要的数据。</li>
</ol>
<p>​        http协议规定：一个完整的http响应包含 <code>状态行、响应头、实体内容</code> 三个部分。</p>
<ul>
<li>状态行：包含了http协议版本,状态吗,状态英文名称。</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br></pre></td></tr></table></figure>

<ul>
<li>响应头：包含了对服务器的描述,对返回数据的描述。    </li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">:</span><br><span class="line"><span class="attribute">Content-Encoding</span><span class="punctuation">: </span>gzip // 服务器支持的数据压缩格式</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span> 1528 // 返回数据的长度</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span> application/xhtml+xml;charset=utf-8// 返回数据的类型</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Mon, 15 Jun 201509:06:46 GMT // 响应的时间</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>apache  // 服务器类型</span><br></pre></td></tr></table></figure>

<ul>
<li>实体内容：服务器返回给客户端的具体数据(图片/html/文件…)。  </li>
</ul>
<ol start="3">
<li>发送http请求</li>
</ol>
<p>​        在iOS开发中,发送http请求的方案有很多，常见的有如下几种：</p>
<ul>
<li>苹果原生:</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSURLConnection</span>: 用法简单,古老经典的一种方案.</span><br><span class="line"><span class="built_in">NSURLSession</span>: iOS7以后推出的技术,功能比<span class="built_in">NSURLConnection</span>更加强大.</span><br><span class="line"><span class="built_in">CFNetWork</span>: <span class="built_in">NSURL</span> 的底层,纯C语言,一般不用.</span><br></pre></td></tr></table></figure>

<ul>
<li>第三方框架:</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">ASIHttpRequest: http终结者,功能很强大,可惜作者已停止更新.</span><br><span class="line">AFNetWorking: 简单易用,提供了基本够用的常用功能,维护和使用者多.</span><br><span class="line"><span class="built_in">MKNetWorkKit</span>: 简单易用,产自印度,维护和使用者少. </span><br></pre></td></tr></table></figure>

<p>​      </p>
<h3 id="三、方法"><a href="#三、方法" class="headerlink" title="三、方法"></a>三、方法</h3><h4 id="1-http方法"><a href="#1-http方法" class="headerlink" title="1. http方法"></a>1. http方法</h4><p>​    http协议定义了很多方法对应不同的资源操作,其中最常用的是GET 和 POST 方法.</p>
<blockquote>
<p>GET、POST、OPTIONS、HEAD、PUT、DELETE、TRACE、CONNECT、PATCH</p>
<p>增:PUT</p>
<p> 删:DELETE</p>
<p>改:POST</p>
<p>查:GET    </p>
</blockquote>
<ul>
<li>OPTIONS</li>
</ul>
<p>返回服务器针对特定资源所支持的HTTP请求方法。也可以利用向Web服务器发送’*’的请求来测试服务器的功能性。</p>
<ul>
<li>HEAD</li>
</ul>
<p>向服务器索要与GET请求相一致的响应，只不过响应体将不会被返回。这一方法可以在不必传输整个响应内容的情况下，就可以获取包含在响应消息头中的元信息。</p>
<ul>
<li>GET</li>
</ul>
<p>向特定的资源发出请求。注意：GET方法不应当被用于产生“副作用”的操作中。</p>
<ul>
<li>POST</li>
</ul>
<p>向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。</p>
<ul>
<li>PUT</li>
</ul>
<p>向指定资源位置上传其最新内容。</p>
<ul>
<li>DELETE</li>
</ul>
<p>请求服务器删除Request-URI所标识的资源。</p>
<ul>
<li>TRACE</li>
</ul>
<p>回显服务器收到的请求，主要用于测试或诊断。</p>
<ul>
<li>CONNECT</li>
</ul>
<p>HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</p>
<p>​       </p>
<h4 id="2-参数"><a href="#2-参数" class="headerlink" title="2. 参数"></a>2. 参数</h4><p>因为 GET 和 POST 可以实现上述所有操作，所以，在现实开发中，我们只要会用GET 和 POST 方法就可以了。在与服务器交互时，有时候需要给服务器发送一些数据，比如登录时需要发送用户名和密码。</p>
<p><strong>参数</strong>:就是指传递给服务器的具体数据.</p>
<h4 id="3-GET-和-POST-的主要区别表现在参数的传递上"><a href="#3-GET-和-POST-的主要区别表现在参数的传递上" class="headerlink" title="3. GET 和 POST 的主要区别表现在参数的传递上"></a>3. GET 和 POST 的主要区别表现在参数的传递上</h4><h6 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h6><p>​    GET的本质是从服务器得到数据，效率更高，并且GET请求可以被缓存。</p>
<p>​    注意：网络缓存数据，保存在SQLite的数据库中(路径：NSHomeDirectory())。</p>
<p>​        查看缓存数据命令行：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">cd 文件目录   (打开文件目录)</span><br><span class="line">ls   查看当前文件下目录</span><br><span class="line">sqlite3 Cache.db   打开数据库</span><br><span class="line">.tables    查看数据库中的表单</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> cfurl_cache_response;   查看服务器响应缓存</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> cfurl_cache_receiver_data;   查看服务器返回的数据缓存</span><br></pre></td></tr></table></figure>

<p>​    在请求 URL 后面以 ? 的形式跟上发给服务器的参数，参数以 “参数名”=”参数值” 的形式拼接，多个参数之间用 &amp; 分隔。</p>
<p>​    注意：GET的长度是有限制的，不同的浏览器有不同的长度限制，一般在2~8K之间。         </p>
<h6 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h6><p>​    POST的本质是向服务器发送数据，也可以获得服务器处理之后的结果，效率不如GET。POST请求不可以被缓存，每次刷新之后都需要重新提交表单。发送给服务器的参数全部放在 <code>请求体</code> 中，理论上，POST传递的数据量没有限制。</p>
<p>​    注意：所有涉及到用户隐私的数据(密码/银行卡号等…)都要用POST的方式传递。    </p>
<h4 id="4-注意-URL中不能出现空格以及中文等特殊符号"><a href="#4-注意-URL中不能出现空格以及中文等特殊符号" class="headerlink" title="4. 注意:URL中不能出现空格以及中文等特殊符号"></a>4. 注意:URL中不能出现空格以及中文等特殊符号</h4><ul>
<li><p>URL中,所有的字符都必须是 ASCII 码</p>
</li>
<li><p>URL中不能出现中文和特殊符号(如空格)</p>
</li>
</ul>
<p>​    所以，如果 URL 中出现了中文，需要添加百分号转义。    </p>
<h2 id="URL-中-井号（锚点）的用法"><a href="#URL-中-井号（锚点）的用法" class="headerlink" title="URL 中 # 井号（锚点）的用法"></a>URL 中 # 井号（锚点）的用法</h2><p>​       我们经常使用URL 定位，传递参数等应用，最经常使用的是？ 问号，一般作为参数传递，而我们在接触到单页开发模式的时候会接触到url 中大量# 井号的使用，有时候会对这三个常见符号有些分不清，搞不懂具体含义。 </p>
<h3 id="涵义"><a href="#涵义" class="headerlink" title="涵义"></a>涵义</h3><p> 在url 中使用# 例如  index.html#product  含义一般是定位到本页面的product位置，所以# 在url 中一般是作为页面定位使用，那么product 到底是用什么定位 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;product&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;product&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这两种方式都可以把滚动条定位到页面的响应位置 </p>
<blockquote>
<p>Twitter 在改版的时候把 改版前的用户主页网址为<a href="http://twitter.com/username%E6%94%B9%E7%89%88%E5%90%8E%EF%BC%8C%E5%B0%B1%E5%8F%98%E6%88%90%E4%BA%86http://twitter.com/#!/username">http://twitter.com/username改版后，就变成了http://twitter.com/#!/username</a> 这是主流网站第一次将”#”大规模用于重要URL中。这表明井号（Hash）的作用正在被重新认识 </p>
</blockquote>
<h3 id="特性1：HTTP-请求中的作用"><a href="#特性1：HTTP-请求中的作用" class="headerlink" title="特性1：HTTP 请求中的作用"></a>特性1：HTTP 请求中的作用</h3><p>​    是用来指导浏览器动作的，对服务器端完全无用。所以，HTTP请求中不包括#。</p>
<p>​    比如，访问下面的网址，<a href="http://www.example.com/index.html#print%EF%BC%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%9E%E9%99%85%E5%8F%91%E5%87%BA%E7%9A%84%E8%AF%B7%E6%B1%82%E6%98%AF%E8%BF%99%E6%A0%B7%E7%9A%84%EF%BC%9A">http://www.example.com/index.html#print，浏览器实际发出的请求是这样的：</a></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">GET /index.html HTTP/1.1 </span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>www.example.com </span><br></pre></td></tr></table></figure>

<pre><code> 在第一个#后面出现的任何字符，都会被浏览器解读为位置标识符。这意味着，这些字符都不会被发送到服务器端。
</code></pre>
<p>​    比如，下面URL的原意是指定一个颜色值：<a href="http://www.example.com/?color=#fff%EF%BC%8C%E4%BD%86%E6%98%AF%EF%BC%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%9E%E9%99%85%E5%8F%91%E5%87%BA%E7%9A%84%E8%AF%B7%E6%B1%82%E6%98%AF%EF%BC%9A">http://www.example.com/?color=#fff，但是，浏览器实际发出的请求是：</a></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">GET /?color= HTTP/1.1 </span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>www.example.com </span><br></pre></td></tr></table></figure>

<h3 id="特性2：改版-不会导致网页重载"><a href="#特性2：改版-不会导致网页重载" class="headerlink" title="特性2：改版#不会导致网页重载"></a>特性2：改版#不会导致网页重载</h3><p>​    单单改变#后的部分，浏览器只会滚动到相应位置，不会重新加载网页。</p>
<p>​    比如，从<a href="http://www.example.com/index.html#location1%E6%94%B9%E6%88%90http://www.example.com/index.html#location2%EF%BC%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8D%E4%BC%9A%E9%87%8D%E6%96%B0%E5%90%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%B7%E6%B1%82index.html%E3%80%82">http://www.example.com/index.html#location1改成http://www.example.com/index.html#location2，浏览器不会重新向服务器请求index.html。</a></p>
<h3 id="特性3：改版-后对history-范围历史的影响"><a href="#特性3：改版-后对history-范围历史的影响" class="headerlink" title="特性3：改版# 后对history 范围历史的影响"></a>特性3：改版# 后对history 范围历史的影响</h3><p>​    每一次改变#后的部分，都会在浏览器的访问历史中增加一个记录，使用”后退”按钮，就可以回到上一个位置。这对于ajax应用程序特别有用，可以用不同的#值，表示不同的访问状态，然后向用户给出可以访问某个状态的链接。值得注意的是，上述规则对IE 6和IE 7不成立，它们不会因为#的改变而增加历史记录。</p>
<p>​    鉴于特性2、3 实现了在单页下view 的路由和历史回退，目前h5手机开发所采用的单页模式的基础。</p>
<h3 id="特性4：window-location-hash读取-值"><a href="#特性4：window-location-hash读取-值" class="headerlink" title="特性4：window.location.hash读取#值"></a>特性4：window.location.hash读取#值</h3><pre><code> window.location.hash 这个属性可读可写。读取时，可以用来判断网页状态是否改变；写入时，则会在不重载网页的前提下，创造一条访问历史记录。
</code></pre>
<h3 id="特性5：onhashchange事件-H5新增"><a href="#特性5：onhashchange事件-H5新增" class="headerlink" title="特性5：onhashchange事件 H5新增"></a>特性5：onhashchange事件 H5新增</h3><p>​    这是一个HTML 5新增的事件，当#值发生变化时，就会触发这个事件。IE8+、Firefox 3.6+、Chrome 5+、Safari 4.0+支持该事件。</p>
<p>　　它的使用方法有三种：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">window.onhashchange = func; </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onhashchange</span>=<span class="string">&quot;func();&quot;</span>&gt;</span> </span><br><span class="line">window.addEventListener(&quot;hashchange&quot;， func, false); </span><br></pre></td></tr></table></figure>

<p>对于不支持onhashchange的浏览器，可以用setInterval监控location.hash的变化。</p>
<h3 id="特性6：Google抓取-的机制"><a href="#特性6：Google抓取-的机制" class="headerlink" title="特性6：Google抓取#的机制"></a>特性6：Google抓取#的机制</h3><p>​    默认情况下，Google的网络蜘蛛忽视URL的#部分。但是，Google还规定，如果你希望Ajax生成的内容被浏览引擎读取，那么URL中可以使用”#!”，Google会自动将其后面的内容转成查询字符串escaped_fragment的值。</p>
<p>　　比如，Google发现新版Twitter的URL：<a href="http://twitter.com/#!/username">http://twitter.com/#!/username</a></p>
<p>　　就会自动抓取另一个URL：<a href="http://twitter.com/?escaped_fragment=/username">http://twitter.com/?escaped_fragment=/username</a> </p>
<p>　　通过这种机制，Google就可以索引动态的Ajax内容。</p>
<p>群讨论：</p>
<p>URL中的#只是作为一个分解符，#后面的内容，服务器不会处理，但是浏览器页面能获取到，但是拿到这个值干啥用，就看怎么处理了，比如现在H5做的SPA，就是靠#后面的内容作为参数，来处理前端路由。</p>
<h2 id="网络响应的常见状态"><a href="#网络响应的常见状态" class="headerlink" title="网络响应的常见状态"></a>网络响应的常见状态</h2><h3 id="1xx消息"><a href="#1xx消息" class="headerlink" title="1xx消息"></a>1xx消息</h3><p>​    这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。由于HTTP/1.0协议中没有定义任何1xx状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送1xx响应。这些状态码代表的响应都是信息性的，标示客户应该采取的其他行动。</p>
<h4 id="100-Continue"><a href="#100-Continue" class="headerlink" title="100 Continue"></a>100 Continue</h4><p>​    客户端应当继续发送请求。这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。</p>
<h4 id="101-Switching-Protocols"><a href="#101-Switching-Protocols" class="headerlink" title="101 Switching Protocols"></a>101 Switching Protocols</h4><p>​    服务器已经理解了客户端的请求，并将通过Upgrade消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到在Upgrade消息头中定义的那些协议。: 只有在切换新的协议更有好处的时候才应该采取类似措施。例如，切换到新的HTTP版本比旧版本更有优势，或者切换到一个实时且同步的协议以传送利用此类特性的资源。</p>
<h4 id="102-Processing"><a href="#102-Processing" class="headerlink" title="102 Processing"></a>102 Processing</h4><p>​    由WebDAV（RFC 2518）扩展的状态码，代表处理将被继续执行。</p>
<h3 id="2xx成功"><a href="#2xx成功" class="headerlink" title="2xx成功"></a>2xx成功</h3><p>​    这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。</p>
<h4 id="200-OK"><a href="#200-OK" class="headerlink" title="200 OK"></a>200 OK</h4><p>​    请求已成功，请求所希望的响应头或数据体将随此响应返回。</p>
<h4 id="201-Created"><a href="#201-Created" class="headerlink" title="201 Created"></a>201 Created</h4><p>​    请求已经被实现，而且有一个新的资源已经依据请求的需要而创建，且其URI已经随Location头信息返回。假如需要的资源无法及时创建的话，应当返回’202 Accepted’。</p>
<h4 id="202-Accepted"><a href="#202-Accepted" class="headerlink" title="202 Accepted"></a>202 Accepted</h4><p>​    服务器已接受请求，但尚未处理。正如它可能被拒绝一样，最终该请求可能会也可能不会被执行。在异步操作的场合下，没有比发送这个状态码更方便的做法了。:返回202状态码的响应的目的是允许服务器接受其他过程的请求（例如某个每天只执行一次的基于批处理的操作），而不必让客户端一直保持与服务器的连接直到批处理操作全部完成。在接受请求处理并返回202状态码的响应应当在返回的实体中包含一些指示处理当前状态的信息，以及指向处理状态监视器或状态预测的指针，以便用户能够估计操作是否已经完成。</p>
<h4 id="203-Non-Authoritative-Information"><a href="#203-Non-Authoritative-Information" class="headerlink" title="203 Non-Authoritative Information"></a>203 Non-Authoritative Information</h4><p>​    服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝。当前的信息可能是原始版本的子集或者超 集。例如，包含资源的元数据可能导致原始服务器知道元信息的超集。使用此状态码不是必须的，而且只有在响应不使用此状态码便会返回200 OK的情况下才是合适的。</p>
<h4 id="204-No-Content"><a href="#204-No-Content" class="headerlink" title="204 No Content"></a>204 No Content</h4><p>​    服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。响应可能通过实体头部的形式，返回新的或更新后的元信息。如果存在这些头部信息，则应当与所请求的变量相呼应。</p>
<p>​    如果客户端是浏览器的话，那么用户浏览器应保留发送了该请求的页面，而不产生任何文档视图上的变化，即使按照规范新的或更新后的元信息应当被应用到用户浏览器活动视图中的文档。</p>
<p>​    由于204响应被禁止包含任何消息体，因此它始终以消息头后的第一个空行结尾。</p>
<h4 id="205-Reset-Content"><a href="#205-Reset-Content" class="headerlink" title="205 Reset Content"></a>205 Reset Content</h4><p>​    服务器成功处理了请求，且没有返回任何内容。但是与204响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。</p>
<pre><code> 与204响应一样，该响应也被禁止包含任何消息体，且以消息头后的第一个空行结束。
</code></pre>
<h4 id="206-Partial-Content"><a href="#206-Partial-Content" class="headerlink" title="206 Partial Content"></a>206 Partial Content</h4><p>​    服务器已经成功处理了部分GET请求。类似于FlashGet或者迅雷这类的HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。</p>
<p>​    该请求必须包含Range头信息来指示客户端希望得到的内容范围，并且可能包含If-Range来作为请求条件。</p>
<p>​    响应必须包含如下的头部域：</p>
<blockquote>
<p>Content-Range用以指示本次响应中返回的内容的范围；如果是Content-Type为multipart/byteranges的多段下载，则每一multipart段中都应包含Content-Range域用以指示本段的内容范围。假如响应中包含Content-Length，那么它的数值必须匹配它返回的内容范围的真实字节数。</p>
<p>Date</p>
<p>ETag和／或Content-Location，假如同样的请求本应该返回200响应。</p>
<p>Expires, Cache-Control，和／或Vary，假如其值可能与之前相同变量的其他响应对应的值不同的话。</p>
</blockquote>
<p>​    假如本响应请求使用了If-Range强缓存验证，那么本次响应不应该包含其他实体头；假如本响应的请求使用了If-Range弱缓存验证，那么本次响应禁止包含其他实体头；这避免了缓存的实体内容和更新了的实体头信息之间的不一致。否则，本响应就应当包含所有本应该返回200响应中应当返回的所有实体头部域。</p>
<p>​    假如ETag或Last-Modified头部不能精确匹配的话，则客户端缓存应禁止将206响应返回的内容与之前任何缓存过的内容组合在一起。</p>
<p>​    任何不支持Range以及Content-Range头的缓存都禁止缓存206响应返回的内容。</p>
<p>207 Multi-Status</p>
<p>​    由WebDAV(RFC 2518)扩展的状态码，代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。</p>
<h3 id="3xx重定向"><a href="#3xx重定向" class="headerlink" title="3xx重定向"></a>3xx重定向</h3><p>​    这类状态码代表需要客户端采取进一步的操作才能完成请求。通常，这些状态码用来重定向，后续的请求地址（重定向目标）在本次响应的Location域中指明。</p>
<p>​    当且仅当后续的请求所使用的方法是GET或者HEAD时，用户浏览器才可以在没有用户介入的情况下自动提交所需要的后续请求。客户端应当自动监测无限循环重定向（例如：A→B→C→……→A或A→A），因为这会导致服务器和客户端大量不必要的资源消耗。按照HTTP/1.0版规范的建议，浏览器不应自动访问超过5次的重定向。</p>
<h4 id="300-Multiple-Choices"><a href="#300-Multiple-Choices" class="headerlink" title="300 Multiple Choices"></a>300 Multiple Choices</h4><p>​    被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。</p>
<p>​    除非这是一个HEAD请求，否则该响应应当包括一个资源特性及地址的列表的实体，以便用户或浏览器从中选择最合适的重定向地址。这个实体的格式由Content-Type定义的格式所决定。浏览器可能根据响应的格式以及浏览器自身能力，自动作出最合适的选择。当然，RFC 2616规范并没有规定这样的自动选择该如何进行。</p>
<p>​    如果服务器本身已经有了首选的回馈选择，那么在Location中应当指明这个回馈的URI；浏览器可能会将这个Location值作为自动重定向的地址。此外，除非额外指定，否则这个响应也是可缓存的。</p>
<h4 id="301-Moved-Permanently"><a href="#301-Moved-Permanently" class="headerlink" title="301 Moved Permanently"></a>301 Moved Permanently</h4><p>​    被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个URI之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。</p>
<p>​    新的永久性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。</p>
<p>​    如果这不是一个GET或者HEAD请求，因此浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。</p>
<p>​    注意：对于某些使用HTTP/1.0协议的浏览器，当它们发送的POST请求得到了一个301响应的话，接下来的重定向请求将会变成GET方式。</p>
<h4 id="302-Found"><a href="#302-Found" class="headerlink" title="302 Found"></a>302 Found</h4><p>​    请求的资源现在临时从不同的URI响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。</p>
<p>​    新的临时性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。</p>
<p>​    如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。</p>
<p>​    注意：虽然RFC 1945和RFC 2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为303响应，并且使用GET方式访问在Location中规定的URI，而无视原先请求的方法。状态码303和307被添加了进来，用以明确服务器期待客户端进行何种反应。</p>
<h4 id="303-See-Other"><a href="#303-See-Other" class="headerlink" title="303 See Other"></a>303 See Other</h4><p>​    对应当前请求的响应可以在另一个URI上被找到，而且客户端应当采用GET的方式访问那个资源。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的URI不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。</p>
<p>​    新的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。</p>
<p>​    注意：许多HTTP/1.1版以前的浏览器不能正确理解303状态。如果需要考虑与这些浏览器之间的互动，302状态码应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的。</p>
<h4 id="304-Not-Modified"><a href="#304-Not-Modified" class="headerlink" title="304 Not Modified"></a>304 Not Modified</h4><p>​    如果客户端发送了一个带条件的GET请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。304响应禁止包含消息体，因此始终以消息头后的第一个空行结尾。</p>
<p>​    该响应必须包含以下的头信息：</p>
<blockquote>
<p>Date，除非这个服务器没有时钟。假如没有时钟的服务器也遵守这些规则，那么代理服务器以及客户端可以自行将Date字段添加到接收到的响应头中去（正如RFC 2068中规定的一样），缓存机制将会正常工作。</p>
<p>ETag和／或Content-Location，假如同样的请求本应返回200响应。</p>
<p>Expires, Cache-Control，和／或Vary，假如其值可能与之前相同变量的其他响应对应的值不同的话。</p>
</blockquote>
<p>​    假如本响应请求使用了强缓存验证，那么本次响应不应该包含其他实体头；否则（例如，某个带条件的GET请求使用了弱缓存验证），本次响应禁止包含其他实体头；这避免了缓存了的实体内容和更新了的实体头信息之间的不一致。</p>
<p>​    假如某个304响应指明了当前某个实体没有缓存，那么缓存系统必须忽视这个响应，并且重复发送不包含限制条件的请求。</p>
<p>​    假如接收到一个要求更新某个缓存条目的304响应，那么缓存系统必须更新整个条目以反映所有在响应中被更新的字段的值。</p>
<h4 id="305-Use-Proxy"><a href="#305-Use-Proxy" class="headerlink" title="305 Use Proxy"></a>305 Use Proxy</h4><p>​    被请求的资源必须通过指定的代理才能被访问。Location域中将给出指定的代理所在的URI信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。只有原始服务器才能创建305响应。</p>
<p>​    注意：RFC 2068中没有明确305响应是为了重定向一个单独的请求，而且只能被原始服务器创建。忽视这些限制可能导致严重的安全后果。</p>
<h4 id="306-Switch-Proxy"><a href="#306-Switch-Proxy" class="headerlink" title="306 Switch Proxy"></a>306 Switch Proxy</h4><p>​    在最新版的规范中，306状态码已经不再被使用。</p>
<h4 id="307-Temporary-Redirect"><a href="#307-Temporary-Redirect" class="headerlink" title="307 Temporary Redirect"></a>307 Temporary Redirect</h4><p>​    请求的资源现在临时从不同的URI响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。</p>
<p>​    新的临时性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。因为部分浏览器不能识别307响应，因此需要添加上述必要信息以便用户能够理解并向新的URI发出访问请求。</p>
<p>​    如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。</p>
<h3 id="4xx客户端错误"><a href="#4xx客户端错误" class="headerlink" title="4xx客户端错误"></a>4xx客户端错误</h3><p>​    这类的状态码代表了客户端看起来可能发生了错误，妨碍了服务器的处理。除非响应的是一个HEAD请求，否则服务器就应该返回一个解释当前错误状况的实体，以及这是临时的还是永久性的状况。这些状态码适用于任何请求方法。浏览器应当向用户显示任何包含在此类错误响应中的实体内容。</p>
<p>​    如果错误发生时客户端正在传送数据，那么使用TCP的服务器实现应当仔细确保在关闭客户端与服务器之间的连接之前，客户端已经收到了包含错误信息的数据包。如果客户端在收到错误信息后继续向服务器发送数据，服务器的TCP栈将向客户端发送一个重置数据包，以清除该客户端所有还未识别的输入缓冲，以免这些数据被服务器上的应用程序读取并干扰后者。</p>
<h4 id="400-Bad-Request"><a href="#400-Bad-Request" class="headerlink" title="400 Bad Request"></a>400 Bad Request</h4><p>​    由于包含语法错误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求。</p>
<h4 id="401-Unauthorized"><a href="#401-Unauthorized" class="headerlink" title="401 Unauthorized"></a>401 Unauthorized</h4><p>​    当前请求需要用户验证。该响应必须包含一个适用于被请求资源的WWW-Authenticate信息头用以询问用户信息。客户端可以重复提交一个包含恰当的Authorization头信息的请求。如果当前请求已经包含了Authorization证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。参见RFC 2617。</p>
<h4 id="402-Payment-Required"><a href="#402-Payment-Required" class="headerlink" title="402 Payment Required"></a>402 Payment Required</h4><p>​    该状态码是为了将来可能的需求而预留的。</p>
<h4 id="403-Forbidden"><a href="#403-Forbidden" class="headerlink" title="403 Forbidden"></a>403 Forbidden</h4><p>​    服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个HEAD请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。</p>
<h4 id="404-Not-Found"><a href="#404-Not-Found" class="headerlink" title="404 Not Found"></a>404 Not Found</h4><p>​    请求失败，请求所希望得到的资源未被在服务器上发现。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。</p>
<h4 id="405-Method-Not-Allowed"><a href="#405-Method-Not-Allowed" class="headerlink" title="405 Method Not Allowed"></a>405 Method Not Allowed</h4><p>​    请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow头信息用以表示出当前资源能够接受的请求方法的列表。</p>
<p>​    鉴于PUT，DELETE方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。</p>
<h4 id="406-Not-Acceptable"><a href="#406-Not-Acceptable" class="headerlink" title="406 Not Acceptable"></a>406 Not Acceptable</h4><p>​    请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体。</p>
<p>​    除非这是一个HEAD请求，否则该响应就应当返回一个包含可以让用户或者浏览器从中选择最合适的实体特性以及地址列表的实体。实体的格式由Content-Type头中定义的媒体类型决定。浏览器可以根据格式及自身能力自行作出最佳选择。但是，规范中并没有定义任何作出此类自动选择的标准。</p>
<h4 id="407-Proxy-Authentication-Required"><a href="#407-Proxy-Authentication-Required" class="headerlink" title="407 Proxy Authentication Required"></a>407 Proxy Authentication Required</h4><p>​    与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个Proxy-Authenticate用以进行身份询问。客户端可以返回一个Proxy-Authorization信息头用以验证。参见RFC 2617。</p>
<h4 id="408-Request-Timeout"><a href="#408-Request-Timeout" class="headerlink" title="408 Request Timeout"></a>408 Request Timeout</h4><p>​    请求超时。客户端没有在服务器预备等待的时间内完成一个请求的发送。客户端可以随时再次提交这一请求而无需进行任何更改。</p>
<h4 id="409-Conflict"><a href="#409-Conflict" class="headerlink" title="409 Conflict"></a>409 Conflict</h4><p>​    由于和被请求的资源的当前状态之间存在冲突，请求无法完成。这个代码只允许用在这样的情况下才能被使用：用户被认为能够解决冲突，并且会重新提交新的请求。该响应应当包含足够的信息以便用户发现冲突的源头。</p>
<p>​    冲突通常发生于对PUT请求的处理中。例如，在采用版本检查的环境下，某次PUT提交的对特定资源的修改请求所附带的版本信息与之前的某个（第三方）请求向冲突，那么此时服务器就应该返回一个409错误，告知用户请求无法完成。此时，响应实体中很可能会包含两个冲突版本之间的差异比较，以便用户重新提交归并以后的新版本。</p>
<h4 id="410-Gone"><a href="#410-Gone" class="headerlink" title="410 Gone"></a>410 Gone</h4><p>​    被请求的资源在服务器上已经不再可用，而且没有任何已知的转发地址。这样的状况应当被认为是永久性的。如果可能，拥有链接编辑功能的客户端应当在获得用户许可后删除所有指向这个地址的引用。如果服务器不知道或者无法确定这个状况是否是永久的，那么就应该使用404状态码。除非额外说明，否则这个响应是可缓存的。</p>
<p>​    410响应的目的主要是帮助网站管理员维护网站，通知用户该资源已经不再可用，并且服务器拥有者希望所有指向这个资源的远端连接也被删除。这类事件在限时、增值服务中很普遍。同样，410响应也被用于通知客户端在当前服务器站点上，原本属于某个个人的资源已经不再可用。当然，是否需要把所有永久不可用的资源标记为’410 Gone’，以及是否需要保持此标记多长时间，完全取决于服务器拥有者。</p>
<h4 id="411-Length-Required"><a href="#411-Length-Required" class="headerlink" title="411 Length Required"></a>411 Length Required</h4><p>​    服务器拒绝在没有定义Content-Length头的情况下接受请求。在添加了表明请求消息体长度的有效Content-Length头之后，客户端可以再次提交该请求。</p>
<h4 id="412-Precondition-Failed"><a href="#412-Precondition-Failed" class="headerlink" title="412 Precondition Failed"></a>412 Precondition Failed</h4><p>​    服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。</p>
<h4 id="413-Request-Entity-Too-Large"><a href="#413-Request-Entity-Too-Large" class="headerlink" title="413 Request Entity Too Large"></a>413 Request Entity Too Large</h4><p>​    服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。</p>
<p>​    如果这个状况是临时的，服务器应当返回一个Retry-After的响应头，以告知客户端可以在多少时间以后重新尝试。</p>
<h4 id="414-Request-URI-Too-Long"><a href="#414-Request-URI-Too-Long" class="headerlink" title="414 Request-URI Too Long"></a>414 Request-URI Too Long</h4><p>​    请求的URI长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。这比较少见，通常的情况包括：</p>
<p>​        本应使用POST方法的表单提交变成了GET方法，导致查询字符串（Query String）过长。</p>
<p>​        重定向URI“黑洞”，例如每次重定向把旧的URI作为新的URI的一部分，导致在若干次重定向后URI超长。</p>
<p>​        客户端正在尝试利用某些服务器中存在的安全漏洞攻击服务器。这类服务器使用固定长度的缓冲读取或操作请求的URI，当GET后的参数超过某个数值后，可能会产生缓冲区溢出，导致任意代码被执行[1]。没有此类漏洞的服务器，应当返回414状态码。</p>
<h4 id="415-Unsupported-Media-Type"><a href="#415-Unsupported-Media-Type" class="headerlink" title="415 Unsupported Media Type"></a>415 Unsupported Media Type</h4><p>​    对于当前请求的方法和所请求的资源，请求中提交的实体并不是服务器中所支持的格式，因此请求被拒绝。</p>
<p>416 Requested Range Not Satisfiable</p>
<p>​    如果请求中包含了Range请求头，并且Range中指定的任何数据范围都与当前资源的可用范围不重合，同时请求中又没有定义If-Range请求头，那么服务器就应当返回416状态码。</p>
<p>​    假如Range使用的是字节范围，那么这种情况就是指请求指定的所有数据范围的首字节位置都超过了当前资源的长度。服务器也应当在返回416状态码的同时，包含一个Content-Range实体头，用以指明当前资源的长度。这个响应也被禁止使用multipart/byteranges作为其Content-Type。</p>
<h4 id="417-Expectation-Failed"><a href="#417-Expectation-Failed" class="headerlink" title="417 Expectation Failed"></a>417 Expectation Failed</h4><p>​    在请求头Expect中指定的预期内容无法被服务器满足，或者这个服务器是一个代理服务器，它有明显的证据证明在当前路由的下一个节点上，Expect的内容无法被满足。</p>
<h4 id="418-I’m-a-teapot"><a href="#418-I’m-a-teapot" class="headerlink" title="418 I’m a teapot"></a>418 I’m a teapot</h4><p>​    本操作码是在1998年作为IETF的传统愚人节笑话, 在RFC 2324超文本咖啡壶控制协议中定义的，并不需要在真实的HTTP服务器中定义。</p>
<h4 id="421-There-are-too-many-connections-from-your-internet-address"><a href="#421-There-are-too-many-connections-from-your-internet-address" class="headerlink" title="421 There are too many connections from your internet address"></a>421 There are too many connections from your internet address</h4><p>​    从当前客户端所在的IP地址到服务器的连接数超过了服务器许可的最大范围。通常，这里的IP地址指的是从服务器上看到的客户端地址（比如用户的网关或者代理服务器地址）。在这种情况下，连接数的计算可能涉及到不止一个终端用户。</p>
<h4 id="422-Unprocessable-Entity"><a href="#422-Unprocessable-Entity" class="headerlink" title="422 Unprocessable Entity"></a>422 Unprocessable Entity</h4><p>​    请求格式正确，但是由于含有语义错误，无法响应。（RFC 4918 WebDAV）</p>
<h4 id="423-Locked"><a href="#423-Locked" class="headerlink" title="423 Locked"></a>423 Locked</h4><p>​    当前资源被锁定。（RFC 4918 WebDAV）</p>
<h4 id="424-Failed-Dependency"><a href="#424-Failed-Dependency" class="headerlink" title="424 Failed Dependency"></a>424 Failed Dependency</h4><p>​    由于之前的某个请求发生的错误，导致当前请求失败，例如PROPPATCH。（RFC 4918 WebDAV）</p>
<h4 id="425-Unordered-Collection"><a href="#425-Unordered-Collection" class="headerlink" title="425 Unordered Collection"></a>425 Unordered Collection</h4><p>​    在WebDav Advanced Collections草案中定义，但是未出现在《WebDAV顺序集协议》（RFC 3658）中。</p>
<h4 id="426-Upgrade-Required"><a href="#426-Upgrade-Required" class="headerlink" title="426 Upgrade Required"></a>426 Upgrade Required</h4><p>​    客户端应当切换到TLS/1.0。（RFC 2817）</p>
<h4 id="449-Retry-With"><a href="#449-Retry-With" class="headerlink" title="449 Retry With"></a>449 Retry With</h4><p>​    由微软扩展，代表请求应当在执行完适当的操作后进行重试。</p>
<h3 id="5xx服务器错误"><a href="#5xx服务器错误" class="headerlink" title="5xx服务器错误"></a>5xx服务器错误</h3><p>​    这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。除非这是一个HEAD请求，否则服务器应当包含一个解释当前错误状态以及这个状况是临时的还是永久的解释信息实体。浏览器应当向用户展示任何在当前响应中被包含的实体。</p>
<p>​    这些状态码适用于任何响应方法。</p>
<h4 id="500-Internal-Server-Error"><a href="#500-Internal-Server-Error" class="headerlink" title="500 Internal Server Error"></a>500 Internal Server Error</h4><p>​    服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。一般来说，这个问题都会在服务器的程序码出错时出现。</p>
<h4 id="501-Not-Implemented"><a href="#501-Not-Implemented" class="headerlink" title="501 Not Implemented"></a>501 Not Implemented</h4><p>​    服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求。</p>
<h4 id="502-Bad-Gateway"><a href="#502-Bad-Gateway" class="headerlink" title="502 Bad Gateway"></a>502 Bad Gateway</h4><p>​    作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。</p>
<h4 id="503-Service-Unavailable"><a href="#503-Service-Unavailable" class="headerlink" title="503 Service Unavailable"></a>503 Service Unavailable</h4><p>​    由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是临时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个Retry-After头用以标明这个延迟时间。如果没有给出这个Retry-After信息，那么客户端应当以处理500响应的方式处理它。</p>
<h4 id="504-Gateway-Timeout"><a href="#504-Gateway-Timeout" class="headerlink" title="504 Gateway Timeout"></a>504 Gateway Timeout</h4><p>​    作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。</p>
<p>​    注意：某些代理服务器在DNS查询超时时会返回400或者500错误</p>
<h4 id="505-HTTP-Version-Not-Supported"><a href="#505-HTTP-Version-Not-Supported" class="headerlink" title="505 HTTP Version Not Supported"></a>505 HTTP Version Not Supported</h4><p>​    服务器不支持，或者拒绝支持在请求中使用的HTTP版本。这暗示着服务器不能或不愿使用与客户端相同的版本。响应中应当包含一个描述了为何版本不被支持以及服务器支持哪些协议的实体。</p>
<h4 id="506-Variant-Also-Negotiates"><a href="#506-Variant-Also-Negotiates" class="headerlink" title="506 Variant Also Negotiates"></a>506 Variant Also Negotiates</h4><p>​    由《透明内容协商协议》（RFC 2295）扩展，代表服务器存在内部配置错误：被请求的协商变元资源被配置为在透明内容协商中使用自己，因此在一个协商处理中不是一个合适的重点。</p>
<h4 id="507-Insufficient-Storage"><a href="#507-Insufficient-Storage" class="headerlink" title="507 Insufficient Storage"></a>507 Insufficient Storage</h4><p>​    服务器无法存储完成请求所必须的内容。这个状况被认为是临时的。WebDAV（RFC 4918）</p>
<h4 id="509-Bandwidth-Limit-Exceeded"><a href="#509-Bandwidth-Limit-Exceeded" class="headerlink" title="509 Bandwidth Limit Exceeded"></a>509 Bandwidth Limit Exceeded</h4><p>​    服务器达到带宽限制。这不是一个官方的状态码，但是仍被广泛使用。</p>
<h4 id="510-Not-Extended"><a href="#510-Not-Extended" class="headerlink" title="510 Not Extended"></a>510 Not Extended</h4><p>​    获取资源所需要的策略并没有没满足。</p>
]]></content>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客等静态网页提交到谷歌和百度收录</title>
    <url>/2021/06/29/Hexo%E5%8D%9A%E5%AE%A2%E7%AD%89%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E6%8F%90%E4%BA%A4%E5%88%B0%E8%B0%B7%E6%AD%8C%E5%92%8C%E7%99%BE%E5%BA%A6%E6%94%B6%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="什么是-站点地图-？"><a href="#什么是-站点地图-？" class="headerlink" title="什么是 站点地图 ？"></a>什么是 站点地图 ？</h2><blockquote>
<p> 站点地图是一个网站所有链接的容器。很多网站的连接层次比较深，爬虫很难抓取到，站点地图可以方便爬虫抓取网站页面，通过抓取网站页面，清晰了解网站的架构，网站地图一般存放在根目录下并命名 sitemap，为爬虫指路，增加网站重要内容页面的收录。站点地图就是根据网站的结构、框架、内容，生成的导航网页文件。站点地图对于提高用户体验有好处，它们为网站访问者指明方向，并帮助迷失的访问者找到他们想看的页面。</p>
<p>–百度百科</p>
</blockquote>
<h2 id="一、生成站点地图"><a href="#一、生成站点地图" class="headerlink" title="一、生成站点地图"></a>一、生成站点地图</h2><span id="more"></span>

<ol>
<li><p>安装站点地图生成插件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-generator</span><span class="literal">-baidu</span><span class="literal">-sitemap</span> -<span class="literal">-save</span></span><br><span class="line">npm install hexo<span class="literal">-generator</span><span class="literal">-sitemap</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure>

<!--more--></li>
<li><p>在博客根目录的<code>_config.yml</code>中添加自动生成 sitemap 的配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidusitemap.xml</span></span><br></pre></td></tr></table></figure>

<p>同时确认一下该文件里面 url 对应的是否是接下来要提交的域名</p>
</li>
<li><p>生成和部署</p>
<p>此时会在<code>public</code>目录下生成两个文件</p>
<blockquote>
<p><code>sitemap.xml</code> 用于提交给谷歌</p>
<p><code>baidusitemap.xml</code> 用于提交给百度</p>
</blockquote>
</li>
<li><p>部署成功后，在浏览器打开 <code>你的域名/baidusitemap.xml</code>，成功展示即代表成功</p>
<p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200413210038.png" alt="img"></p>
</li>
</ol>
<h2 id="二、提交到百度站长（百度收录）"><a href="#二、提交到百度站长（百度收录）" class="headerlink" title="二、提交到百度站长（百度收录）"></a>二、提交到百度站长（百度收录）</h2><h4 id="解决百度不爬取-Github-Pages-的问题"><a href="#解决百度不爬取-Github-Pages-的问题" class="headerlink" title="解决百度不爬取 Github Pages 的问题"></a>解决百度不爬取 Github Pages 的问题</h4><p>如果你的博客部署在 Github Pages, 百度是不会爬取的，这种情况需要借用其他平台转换一下。</p>
<p>这里以 coding 为例</p>
<ol>
<li><p>在 coding 中也创建一个博客项目，取得提交地址</p>
</li>
<li><p>在博客根目录的<code>_config.yml</code>中添加 coding 仓库的配置，注意增加了<code>-</code>号，这样在部署的时候会同时部署到 Github 和 coding</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://github.com/hansionit/hansionit.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://e.coding.net/hansion_it/Blog.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>hexo g -d</code>生成部署一下，会提交代码到 coding</p>
</li>
<li><p>在 coding 中开启 pages 服务，配置自定义域名，在你的域名解析控制台增加两条 CNAME，解析线路选择<code>百度</code>，让百度解析到 coding 的地址</p>
<p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200414122236.png" alt="img"></p>
</li>
</ol>
<h4 id="sitemap-方式提交"><a href="#sitemap-方式提交" class="headerlink" title="sitemap 方式提交"></a>sitemap 方式提交</h4><ol>
<li><p>查询是否被收录</p>
<p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200413204214.png" alt="img"></p>
</li>
<li><p>若没有收录，则点击<code>提交网址</code>进行提交</p>
<p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200414122915.png" alt="img"></p>
<p>然后打开 <a href="https://ziyuan.baidu.com/">百度搜索资源平台</a>，进入<code>站点管理</code> -&gt; <code>添加网站</code>    </p>
<p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200413202939.png" alt="img"></p>
</li>
<li><p>添加完网站后，点击<code>管理站点</code> -&gt; <code>站点属性设置</code></p>
<p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200413210128.png" alt="img"></p>
</li>
<li><p>选择链接提交</p>
<p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200413210323.png" alt="img"></p>
</li>
<li><p>选择 sitemap，输入上文中的 sitmap 地址，点击提交</p>
<p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200413210527.png" alt="img">    如果提示错误，<strong>以下文件已经提交过了，如想重新提交，请先到文件对应工具的站点下删除此文件。</strong></p>
<p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200413211123.png" alt="img"></p>
<p>可在下方进行勾选删除后重新提交，如果链接一模一样，没有必要删除，点击删除按钮左边的手动更新文件更新一下即可</p>
<p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200413211221.png" alt="img"></p>
</li>
</ol>
<h4 id="主动推送方式提交"><a href="#主动推送方式提交" class="headerlink" title="主动推送方式提交"></a>主动推送方式提交</h4><ol>
<li><p>安装插件<code>npm install hexo-baidu-url-submit --save</code></p>
</li>
<li><p>在博客根目录的<code>config.yml</code>中添加</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">baidu_url_submit:</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">100</span>                 <span class="comment"># 提交最新的多少个链接</span></span><br><span class="line">  <span class="attr">host:</span>       <span class="comment"># 在百度站长平台中添加的域名</span></span><br><span class="line">  <span class="attr">token:</span>     <span class="comment"># 秘钥</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidu_urls.txt</span></span><br></pre></td></tr></table></figure>

<p>token 在推送的接口中有</p>
<p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200413212519.png" alt="img"></p>
</li>
<li><p>同样是该文件，在<code>deployer</code>中新加一行<code>type: baidu_url_submitter</code>, 注意需要为两个<code>type</code>前面添加<code>-</code>符号，结果如：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://e.coding.net/hansion_it/Blog.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">baidu_url_submitter</span></span><br></pre></td></tr></table></figure></li>
<li><p>生成部署</p>
</li>
</ol>
<p>若最后有输出<code>&#123;&quot;remain&quot;:2997,&quot;success&quot;:3&#125; INFO Deploy done: baidu_url_submitter</code>, 则代表成功, success 的值代表成功多少条，remain 的值代表当天剩余可推送条数</p>
<h4 id="自动推送方式提交"><a href="#自动推送方式提交" class="headerlink" title="自动推送方式提交"></a>自动推送方式提交</h4><p>Hexo 的有些主题已完成了此步骤，可先自行确认是否已经完成，一般完成此步骤的主题的<code>_config.yml</code>文件中会有<code>baidu_push</code>属性，将其设置为<code>true</code></p>
<p>选择<code>自动推送</code> -&gt; <code>复制代码</code></p>
<p>没有集成这项功能的，我们可以把代码粘贴到 <code>header.ejs</code> 文件的 <code>&lt;head&gt;</code> 与 <code>&lt;/head&gt;</code> 标签之间</p>
<p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200413211705.png" alt="img"></p>
<h2 id="三、提交到谷歌搜索（谷歌收录）"><a href="#三、提交到谷歌搜索（谷歌收录）" class="headerlink" title="三、提交到谷歌搜索（谷歌收录）"></a>三、提交到谷歌搜索（谷歌收录）</h2><ol>
<li><p>进入 <a href="https://www.google.com/webmasters/tools/home?hl=zh-CN">Google Search Console</a> 登录你的谷歌账号</p>
</li>
<li><p>在<code>网址前缀</code>中填写地址</p>
</li>
<li><p>下载验证文件</p>
<p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200414124339.png" alt="img"></p>
</li>
<li><p>存入<strong>主题</strong>的<code>source</code>目录，而不是根目录的 source 目录，<code>hexo g -d</code>生成部署，然后点击<code>验证</code>，验证成功如下图所示。若提示<code>您的验证文件中的内容不正确。您使用的验证文件是从这里下载的吗?</code>, 你需要检查一下目录是否放至正确</p>
<p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200414132047.png" alt="img"></p>
</li>
<li><p>点击<code>前往资源页面</code>，点击<code>站点地图</code>, 输入站点地图的地址，点击<code>提交</code></p>
<p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200414132514.png" alt="img"></p>
</li>
<li><p>提交成功后，若显示<code>无法获取</code>，点击<code>无法获取</code>会进行网页获取，再刷新网页即可显示成功</p>
<p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200414132654.png" alt="img"></p>
</li>
<li><p>可以顺便把百度的 sitemap 也提交上<code>baidusitemap.xml</code>, 成功结果如下：</p>
<p><img src="https://my-online-pics.oss-cn-beijing.aliyuncs.com/img/20200414132951.png" alt="img"></p>
</li>
</ol>
<p>PS: <a href="https://www.hansion.win/2020/04/13/hexo-bo-ke-deng-jing-tai-wang-ye-ti-jiao-bai-du-he-google-gu-ge-shou-lu/#toc-heading-8">转载自Hansion</a>，按照博主的说明，基本上算是完成了，可以成功搜到一部分内容，有些搜到的标题很诡异，还在看~~</p>
]]></content>
      <tags>
        <tag>7788</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 文字中如何插入图片</title>
    <url>/2018/02/22/Hexo%E6%96%87%E5%AD%97%E4%B8%AD%E5%A6%82%E4%BD%95%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在Hexo 的文章中加入图片，很简单的，来试试先：</p>
<span id="more"></span>

<ul>
<li><p><strong>设置站点配置_config.yml</strong>:</p>
<p>将 <code>post_asset_folder: false</code> 改为 <code>post_asset_folder: true</code></p>
</li>
<li><p><strong>安装插件</strong>:</p>
<p> <code>npm install https://github.com/CodeFalling/hexo-asset-image -- save</code></p>
</li>
<li><p><strong>运行</strong>:</p>
<p> <code>hexo n &quot;XXXXXX&quot;</code></p>
<p>生成 XXXXX.md 博文时就会在 <code>/source/_posts</code> 目录下生成 XXXXXX 的文件夹，将你想在XXXXX文章中插入的照片放置到这个同名文件夹中即可，图片的命名随意。</p>
</li>
<li><p><strong>添加图片</strong>:</p>
<p>在想添加的位置写入<code>![](图片名字.图片格式)</code>，例如<code>![](1.png)</code></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>7788</tag>
      </tags>
  </entry>
  <entry>
    <title>Command CompileAssetCatalog failed with a nonzero exit code</title>
    <url>/2020/02/14/LaunchImage/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>几年前较老的工程 用 xcode 11 打开以后，debug报错，原因是  LaunchImage 文件没找到<br>如果遇到了同样的问题，可以检查下是否缺失了。</p>
<span id="more"></span>

<p>更新：<br>在 iOS 13 以后，LaunchImage 被废弃了，要求使用 LaunchScreen.storyboard。老项目里下图中的这个位置会默认指定的使用  LaunchImage，但文件中又没有，所以会报这个错误。删掉这里的配置就好了。</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/23.png" alt="LaunchImage Setting.png"></p>
<div contenteditable="plaintext-only"><div contenteditable="plaintext-only"><center>
  <div style="display:inline-block;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/flag.jpeg" class width="200"></div>
</center>

</div></div>]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Inferred (Constraints) 和 Autoresizing Mask</title>
    <url>/2021/01/07/Inferred-Constraints-%E5%92%8C-Autoresizing-Mask/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>很久没有写过UI了，前一阵更新完 Xcode 12.2 和 iOS 14.* 后，老项目和新项目都需要调整点页面布局的问题。在 Copy 或者 新建 View 后，切换使用的设备时布局没有自适应。以为约束没加上，但当我要去加约束的时候，发现已经无法操作了？！！！</p>
<h5 id="乌龙"><a href="#乌龙" class="headerlink" title="乌龙"></a>乌龙</h5><p>可用与不可用：</p>
<p>​        <span id="more"></span></p>
<center>
    <div style="display:inline-block;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/18.png" class width="300"></div>
    <div style="display:inline-block;margin-left:10px;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/19.png" class width="300"></div>
</center>


<p>吓死我了，CV 大法居然都不好使了？！！！！！</p>
<p>对比了一下两个 View 的设置以后，发现是 Layout 选项不同的原因，<code>Inferred (Constraints)</code> 和 <code>Autoresizing Mask</code> 。</p>
<center>
    <div style="display:inline-block;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/20.png" class width="300"></div>
    <div style="display:inline-block;margin-left:10px;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/21.png" class width="300"></div>
</center>


<p>新页面自动使用 <code>Autoresizing Mask</code> ，不清楚是不是 Xcode 12.* 的bug，我记得 <code>Autoresizing Mask</code>  早些时候就不怎么用了，居然又出来了，还是很有意思的。</p>
<h5 id="PS-有兴趣可以看看这两个讨论"><a href="#PS-有兴趣可以看看这两个讨论" class="headerlink" title="PS: 有兴趣可以看看这两个讨论"></a>PS: 有兴趣可以看看这两个讨论</h5><p><a href="https://developer.apple.com/forums/thread/669586">Constraint Layout No Longer Available</a></p>
<p><a href="https://dev.classmethod.jp/articles/new-auto-layout-feature/">[iOS 10] Auto Layout の新機能について</a></p>
<h5 id="PPS-Hexo-里图片并排原来可以这样写……"><a href="#PPS-Hexo-里图片并排原来可以这样写……" class="headerlink" title="PPS:  Hexo 里图片并排原来可以这样写……"></a>PPS:  Hexo 里图片并排原来可以这样写……</h5><p><a href="https://blog.ahao.moe/posts/Hexo_multiple_images_side_by_side.html">参考自</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;display:inline-block;&quot;</span>&gt;</span>&#123;%img /img/1.png 300%&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;display:inline-block;margin-left:10px;&quot;</span>&gt;</span>&#123;%img /img/2.png 300%&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>关于调整 cordova.js 注入时机的讨论</title>
    <url>/2022/04/15/InjectCordova/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p>Cordova 是一个轻量级的移动端混合开发框架，在公司项目中担任桥接器的作用，为前端提供一些原生底层能力，在“插件”中以异步的形式将执行结果返回给前端。考虑到前端的页面可能在本地、远程、跨各种域等等问题，一般的做法是把<br>www/cordova.js<br>www/cordova_plugins.js…<br>www/plugins/*.js<br>…<br>这一连串的 js 放在原生的工程中，由原生动态注入到页面中。功能方面没什么问题，但是插件的调用性能却一直被前端的同事诟病：目前只能等到 cordova 发出 “deviceready” 通知以后，才可以正常调用插件功能。这导致页面想使用插件的信息预加载某些内容时(例如提前做认证等等)没办法正常访问到插件，会提示 Undefine…肉眼可见的效果就是页面前期会白页一两秒。</p>
<p>这两天抽空做了一下 Android 端的尝试，想要的效果就是尽量提前完成 cordova 相关 js 的注入。Demo 中达到了我预期的效果，高兴的一晚上没睡着觉，但是，Android 和前端我只是略懂皮毛，不确定测试的方案有没有问题、应对复杂的场景是否可行，所以写在这里做一个讨论，希望有共同需求的朋友一起探讨一下。</p>
<h2 id="Android-端所作的尝试"><a href="#Android-端所作的尝试" class="headerlink" title="Android 端所作的尝试"></a>Android 端所作的尝试</h2><p><a href="https://github.com/ATommyGirl/cordova.git">Demo 在此。</a></p>
<h3 id="尝试前"><a href="#尝试前" class="headerlink" title="尝试前"></a>尝试前</h3><p>搜了一下 Android 端注入 js 的方式，大部分都是采用下面的方案（目测此方案是对标自 GitHub 上的一个 InjectCordova 插件）：<br>1、监听 WebView 的 <code>onPageFinished</code> 事件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//监听 onPageFinished 事件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">CordovaActivity</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">onMessage</span><span class="params">(String id, Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id.equals(<span class="string">&quot;onPageFinished&quot;</span>)) &#123;</span><br><span class="line">            injectCordova(mEngine); <span class="comment">//标签注入</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、拼接一个 <code>&lt;script&gt;</code> 标签 - 通过 <code>document.createElement()</code> 方法创建一个 <code>&lt;script&gt;</code> 标签，标签内容是所有要注入的 js 源码拼接而成的字符串，再使用 <code>appendChild()</code> 方法把 <code>&lt;script&gt;</code> 拼接在 <code>&lt;head&gt;</code> 标签的后面：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">CordovaActivity</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;String&gt; preInjectionFileNames = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">injectCordova</span><span class="params">(CordovaWebViewEngine engine)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; jsPaths = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String path: preInjectionFileNames) &#123;</span><br><span class="line">            jsPaths.add(path);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        jsPaths.add(<span class="string">&quot;www/cordova.js&quot;</span>);</span><br><span class="line">        jsPaths.addAll(jsPathsToInject(getResources().getAssets(), <span class="string">&quot;www/plugins&quot;</span>));</span><br><span class="line">        jsPaths.add(<span class="string">&quot;www/cordova_plugins.js&quot;</span>);</span><br><span class="line"></span><br><span class="line">        StringBuilder jsToInject = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (String path: jsPaths) &#123;</span><br><span class="line">            jsToInject.append(readFile(getResources().getAssets(), path));</span><br><span class="line">        &#125;</span><br><span class="line">        String jsUrl = <span class="string">&quot;javascript:var script = document.createElement(&#x27;script&#x27;);&quot;</span>;</span><br><span class="line">        jsUrl += <span class="string">&quot;script.src=\&quot;data:text/javascript;charset=utf-8;base64,&quot;</span>;</span><br><span class="line"></span><br><span class="line">        jsUrl += Base64.encodeToString(jsToInject.toString().getBytes(), Base64.NO_WRAP);</span><br><span class="line">        jsUrl += <span class="string">&quot;\&quot;;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        jsUrl += <span class="string">&quot;document.getElementsByTagName(&#x27;head&#x27;)[0].appendChild(script);&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//webView.getEngine().loadUrl(jsUrl, false);</span></span><br><span class="line">        engine.loadUrl(jsUrl, <span class="keyword">false</span>);<span class="comment">//false参数表示，不重启plugin，用于加载js库文件</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">readFile</span><span class="params">(AssetManager assets, String filePath)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">          <span class="comment">//详见 Demo。</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">jsPathsToInject</span><span class="params">(AssetManager assets, String path)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">          <span class="comment">//详见 Demo。</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、使用 WebView.loadUrl() 方法注入拼接后的 js。</p>
<p>上面的方案涉及到了获取、拼接标签元素，如果想在 WebView 加载完成之前提前注入似乎是不太现实的，因为时机太早的话，是拿不到标签的。</p>
<h3 id="尝试后"><a href="#尝试后" class="headerlink" title="尝试后"></a>尝试后</h3><p>读了一下 Android WebView 的 API 文档，貌似能够实现 js 注入的方法只有两个：<code>loadUrl(String url)</code> 和 <code>evaluateJavascript(String, ValueCallback)</code>。考虑到 cordova 相关 js 中一般不会针对前端标签做什么操作，是在页面中声明一个名为 cordova 的“模块”，这个模块又定义了若干个插件模块和方法，即使是自己写的插件，目的也是为了能让前端使用原生能力(相机、相册等等)，那是否不需要等到 WebView 把 DOM 的内容都渲染完成才可以开始注入？于是做了如下的尝试：</p>
<p>与之前的方案相似，依旧是循环读取各个 js 中的源码，但不再拼接 <code>&lt;script&gt;</code> 标签，而是使用 <code>evaluateJavascript(String, ValueCallback)</code> 将每段 js 注入到页面中，并且注入时机提前到 <code>onPageStarted</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">CordovaActivity</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">onMessage</span><span class="params">(String id, Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id.equals(<span class="string">&quot;onPageStarted&quot;</span>)) &#123;</span><br><span class="line">            evaluateCordovaJavascript(mWebView); <span class="comment">//执行 js 注入</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">evaluateCordovaJavascript</span><span class="params">(WebView webView)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; jsPaths = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String path: preInjectionFileNames) &#123;</span><br><span class="line">            jsPaths.add(path);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        jsPaths.add(<span class="string">&quot;www/cordova.js&quot;</span>);</span><br><span class="line">        jsPaths.addAll(jsPathsToInject(getResources().getAssets(), <span class="string">&quot;www/plugins&quot;</span>));</span><br><span class="line">        jsPaths.add(<span class="string">&quot;www/cordova_plugins.js&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String path: jsPaths) &#123;</span><br><span class="line">            String js = readFile(getResources().getAssets(), path);</span><br><span class="line">            webView.evaluateJavascript(js, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来我们做验证，在 index.js 中添加如下测试代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//正常情况下需监听到 cordova 的 deviceready 通知后，才可以调用插件方法：</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;deviceready&#x27;</span>, onDeviceReady, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onDeviceReady</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Cordova is now initialized. Have fun!</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;YY: Running cordova - &#x27;</span> + cordova.platformId + <span class="string">&#x27;@&#x27;</span> + cordova.version);</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;deviceready&#x27;</span>).classList.add(<span class="string">&#x27;ready&#x27;</span>);</span><br><span class="line">    testMyPlugin(<span class="string">&#x27;Device Ready: &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里我们用一个 IIFE - 立即调用函数，使得 index.js 加载的时候立即执行这个方法来调用 cordova 的插件：</span></span><br><span class="line">(</span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;YY: Just do IT!&#x27;</span>);</span><br><span class="line">    testMyPlugin(<span class="string">&#x27;Device Start: &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">)();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testMyPlugin</span>(<span class="params">tag</span>) </span>&#123;</span><br><span class="line">   MPKeyChain.getValueForKey(</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">success</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;YY: &#x27;</span>+ tag + result);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;YY: &#x27;</span>+ tag + <span class="string">&quot;获取用户信息失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">    MPKeyChain.getServerUrl(</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">success</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;YY: &#x27;</span>+ tag + result);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;YY: &#x27;</span>+ tag + <span class="string">&quot;获取服务器信息失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据 log 输出的结果，确实像我所预期的效果，是可以提前注入的：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">&quot;YY: Just do IT!&quot;, source: https://localhost/js/index.js (39)</span><br><span class="line">&quot;YY: Device Start: zhengyt&quot;, source: https://localhost/js/index.js (49)</span><br><span class="line">&quot;YY: Device Start: https://tommygirl.cn&quot;, source: https://localhost/js/index.js (59)</span><br><span class="line">&quot;YY: Running cordova - android@10.1.1&quot;, source: https://localhost/js/index.js (70)</span><br><span class="line">&quot;YY: Device Ready: zhengyt&quot;, source: https://localhost/js/index.js (49)</span><br><span class="line">&quot;YY: Device Ready: https://tommygirl.cn&quot;, source: https://localhost/js/index.js (59)</span><br></pre></td></tr></table></figure>

<p>进行到这一步的时候，有两点我不太确定：一个是 Android WebView 提供的 onPageStarted、onPageFinished 事件与 DOM 的各个生命周期 DOMContentLoaded、Load 事件之间的关系，二是在 DOM 的生命周期完成之前注入 js 是否存在什么我不懂的问题。</p>
<p>在 index.js 中增加了对 DOM 生命周期的监听，打印了一下这些事件的顺序：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">2022-04-15 11:25:26.259 I/System.out: YY: onProgressChanged - 10</span><br><span class="line">2022-04-15 11:25:26.321 I/System.out: YY: onMessage - onPageStarted</span><br><span class="line">2022-04-15 11:25:26.355 I/System.out: YY: onMessage - spinner</span><br><span class="line">2022-04-15 11:25:26.361 I/chromium: [INFO:CONSOLE(39)] &quot;YY: Just do IT!&quot;, source: https://localhost/js/index.js (39)</span><br><span class="line">2022-04-15 11:25:26.363 I/chromium: [INFO:CONSOLE(49)] &quot;YY: Device Start: zhengyt&quot;, source: https://localhost/js/index.js (49)</span><br><span class="line">2022-04-15 11:25:26.363 I/chromium: [INFO:CONSOLE(59)] &quot;YY: Device Start: https://tommygirl.cn&quot;, source: https://localhost/js/index.js (59)</span><br><span class="line">2022-04-15 11:25:26.364 I/chromium: [INFO:CONSOLE(33)] &quot;YY: Ready state change!&quot;, source: https://localhost/js/index.js (33)</span><br><span class="line">2022-04-15 11:25:26.364 I/chromium: [INFO:CONSOLE(25)] &quot;YY: DOMContentLoaded&quot;, source: https://localhost/js/index.js (25)</span><br><span class="line">2022-04-15 11:25:26.364 I/System.out: YY: onProgressChanged - 80</span><br><span class="line">2022-04-15 11:25:26.365 I/chromium: [INFO:CONSOLE(33)] &quot;YY: Ready state change!&quot;, source: https://localhost/js/index.js (33)</span><br><span class="line">2022-04-15 11:25:26.365 I/chromium: [INFO:CONSOLE(29)] &quot;YY: Load&quot;, source: https://localhost/js/index.js (29)</span><br><span class="line">2022-04-15 11:25:26.365 I/System.out: YY: onProgressChanged - 100</span><br><span class="line">2022-04-15 11:25:26.365 I/System.out: YY: onProgressChanged - 100</span><br><span class="line">2022-04-15 11:25:26.365 I/chromium: [INFO:CONSOLE(70)] &quot;YY: Running cordova - android@10.1.1&quot;, source: https://localhost/js/index.js (70)</span><br><span class="line">2022-04-15 11:25:26.366 I/System.out: YY: onMessage - onPageFinished</span><br><span class="line">2022-04-15 11:25:26.367 I/chromium: [INFO:CONSOLE(49)] &quot;YY: Device Ready: zhengyt&quot;, source: https://localhost/js/index.js (49)</span><br><span class="line">2022-04-15 11:25:26.367 I/chromium: [INFO:CONSOLE(59)] &quot;YY: Device Ready: https://tommygirl.cn&quot;, source: https://localhost/js/index.js (59)</span><br></pre></td></tr></table></figure>

<p>顺序可见：onPageStarted -&gt; IIFE 中可以调用插件 -&gt; DOMContentLoaded -&gt; Load -&gt; onPageFinished -&gt; cordova 通知 deviceready。</p>
<p>那这样是否可以证明提前完成注入是可行的呢？又或者我进入了“越无知越拥有莫名其妙勇气”的误区？🤓哈哈哈，求路过的各位大佬赐教、讨论。</p>
<h2 id="iOS-UIWebView"><a href="#iOS-UIWebView" class="headerlink" title="iOS - UIWebView"></a>iOS - UIWebView</h2><p>cordova 4.0 之后，在 UIWebView 中注入 JS 也需要自己手动完成，但 4.0 之前是怎么样的我记不清了…<a href="https://github.com/ATommyGirl/cordova.git">Demo 在此。</a> 借助 InjectCordova 的插件监听 <code>CDVPageDidLoadNotification</code> 通知，在收到通知后使用 UIWebView 的 <code>stringByEvaluatingJavaScriptFromString:</code> 方法把 JS 注入进去。其实完全不用插件，在继承自 <code>CDVViewController</code> 的子类中，做这个监听也是可以的。</p>
<p>UIWebView 中目前不知道怎么可以提前完成注入，貌似 iOS 中 <code>webViewDidStartLoad</code> 和 <code>webViewDidFinishLoad</code> 的概念，同 Android 中的概念不是一回事儿。但…管它呢，升级 WKWebView 吧，美滋滋~~</p>
<h2 id="iOS-WKWebView"><a href="#iOS-WKWebView" class="headerlink" title="iOS - WKWebView"></a>iOS - WKWebView</h2><p>如果升级至 WKWebView 的话完全不用纠结上面的内容，之前的文章中我们也提到过了，通过 <a href="/2021/12/01/WKWebView/#WKUserScript">WKUserScript、WKUserScriptInjectionTimeAtDocumentStart</a> 可以轻松实现提前注入，关于注入的 js 作用域的问题，也欢迎在博客中讨论。在此不再赘述。</p>
<hr>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>Cordova</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 学习笔记（四）- 文件系统</title>
    <url>/2022/03/15/Linux_FileSystem/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p>&#8195;&#8195;说实话我看了一下文件系统架构的介绍，不是很明白，至少按照《Linux 从入门到精通》的顺序读到这里的时候，我没看明白，只知道 Linux 里几乎所有操作最终都可以理解为对文件的修改。所以我就不在这里写太多的学习笔记了，借用作者书中的一段话：</p>
<blockquote>
<p>要理解Linux的文件系统架构，看来的确需要耗费一定的脑力。 如果经过努力仍然不明白上面这些文字在说些什么，一个好的建议是：不要管那么多，先使用。没有人会为了上网而首先去学习路由器原理，但一个接触了几年网络的人总能对路由器是什么这个问题说上几句。所以无论如何，首先去<strong>实践</strong>。</p>
</blockquote>
<p>So…… 管他呢，先实践起来~</p>
<h2 id="Linux-系统主要目录及其内容"><a href="#Linux-系统主要目录及其内容" class="headerlink" title="Linux 系统主要目录及其内容"></a>Linux 系统主要目录及其内容</h2><span id="more"></span>

<table>
<thead>
<tr>
<th>目录</th>
<th>内容</th>
</tr>
</thead>
<tbody><tr>
<td>/bin</td>
<td>构建最小系统所需要的命令(最常用的命令)</td>
</tr>
<tr>
<td>/boot</td>
<td>内核与启动文件</td>
</tr>
<tr>
<td>/dev</td>
<td>各种设备文件</td>
</tr>
<tr>
<td>/etc</td>
<td>系统软件的启动和配置文件</td>
</tr>
<tr>
<td>/home</td>
<td>用户的主目录</td>
</tr>
<tr>
<td>/lib</td>
<td>C 编译器的库</td>
</tr>
<tr>
<td>/media</td>
<td>可移动介质的安装点</td>
</tr>
<tr>
<td>/opt</td>
<td>可选的应用软件包(很少使用)</td>
</tr>
<tr>
<td>/proc</td>
<td>进程的映像</td>
</tr>
<tr>
<td>/root</td>
<td>超级用户 root 的主目录</td>
</tr>
<tr>
<td>/sbin</td>
<td>和系统操作有关的命令</td>
</tr>
<tr>
<td>/tmp</td>
<td>临时文件存放点</td>
</tr>
<tr>
<td>/usr</td>
<td>非系统的程序和命令</td>
</tr>
<tr>
<td>/var</td>
<td>系统专用的数据和配置文件</td>
</tr>
</tbody></table>
<h2 id="快速上手：搞一个小团体"><a href="#快速上手：搞一个小团体" class="headerlink" title="快速上手：搞一个小团体"></a>快速上手：搞一个小团体</h2><p>&#8195;&#8195;共享文件对一个团队而言非常重要。团队的成员常常需要在一台服务器上共同完成一项任务。那我们来创建一个“小团体”吧，看看如何实现成员间的文件共享，假设团队成员如下：</p>
<p>用户组：fancy<br>工作目录：/home/blog/<br>组长：yylittlecat<br>成员：tommy、archie<br>编外人员：apple</p>
<ul>
<li>创建用户组和用户成员：</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建一个名为 fancy 的用户组</span></span><br><span class="line"><span class="variable">$</span> sudo groupadd fancy</span><br><span class="line"><span class="comment"># 新建用户，并归入 fancy 组</span></span><br><span class="line"><span class="variable">$</span> sudo useradd <span class="literal">-G</span> fancy yylittlecat</span><br><span class="line"><span class="variable">$</span> sudo passwd yylittlecat <span class="comment"># 为用户 yylittlecat 设置登录密码</span></span><br><span class="line"><span class="variable">$</span> sudo useradd <span class="literal">-G</span> fancy tommy</span><br><span class="line"><span class="variable">$</span> sudo passwd tommy <span class="comment"># 为用户 tommy 设置登录密码</span></span><br><span class="line"><span class="variable">$</span> sudo useradd <span class="literal">-G</span> fancy archie</span><br><span class="line"><span class="variable">$</span> sudo passwd archie <span class="comment"># 为用户 archie 设置登录密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建编外用户，不在分享范畴内</span></span><br><span class="line"><span class="variable">$</span> sudo useradd <span class="literal">-G</span> apple apple</span><br><span class="line"><span class="variable">$</span> sudo passwd apple <span class="comment">#为用户 apple 设置登录密码</span></span><br></pre></td></tr></table></figure>

<ul>
<li>新建博客的工作目录：</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> /home</span><br><span class="line"><span class="variable">$</span> sudo mkdir blog</span><br></pre></td></tr></table></figure>

<ul>
<li>现在，任何人都可以访问这个新建的目录，而只有 root 用户才拥有该目录的写权限，我们希望让 fancy 组的成员拥有这个目录的读写权限，并禁止其他无关的用户查看这个目录：</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> sudo chgrp fancy blog/        <span class="comment"># 将 blog 目录的所有权交给 fancy 组</span></span><br><span class="line"><span class="variable">$</span> sudo chmod g+rwx blog/        <span class="comment"># 增加 fancy 组对 blog 目录的读、写、执行权限</span></span><br><span class="line"><span class="variable">$</span> sudo chmod o<span class="literal">-rwx</span> blog/        <span class="comment"># 撤销其他用户对 blog 目录的读、写、执行权限</span></span><br><span class="line"><span class="variable">$</span> sudo chown yylittlecat blog/	<span class="comment"># 将 blog 目录的所有者改为 yylittlecat</span></span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;这个时候我们 /home 目录下的文件列表和他们的权限是这样的，为了方便查看，我们把主机和目录信息贴上：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">yylittlecat</span>@<span class="type">VM</span>-<span class="number">0</span>-<span class="number">13</span>-<span class="type">centos</span> <span class="type">home</span>]<span class="variable">$</span> <span class="built_in">ls</span> <span class="literal">-l</span></span><br><span class="line">总用量 <span class="number">20</span></span><br><span class="line">drwxrwx--- <span class="number">4</span> yylittlecat fancy <span class="number">4096</span> <span class="number">7</span>月  <span class="number">22</span> <span class="number">2021</span>  blog</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">2</span> root        root  <span class="number">4096</span> <span class="number">7</span>月  <span class="number">22</span> <span class="number">2021</span>  httpbin</span><br><span class="line">drwx------ <span class="number">2</span> archie      fancy <span class="number">4096</span> <span class="number">3</span>月  <span class="number">16</span> <span class="number">17</span>:<span class="number">23</span> archie</span><br><span class="line">drwx------ <span class="number">2</span> apple       apple <span class="number">4096</span> <span class="number">3</span>月  <span class="number">16</span> <span class="number">18</span>:<span class="number">35</span> apple</span><br><span class="line">drwx------ <span class="number">2</span> tommy       fancy <span class="number">4096</span> <span class="number">2</span>月  <span class="number">21</span> <span class="number">14</span>:<span class="number">03</span> tommy</span><br><span class="line">drwx------ <span class="number">2</span> yylittlecat fancy <span class="number">4096</span> <span class="number">3</span>月  <span class="number">11</span> <span class="number">09</span>:<span class="number">43</span> yylittlecat</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;此刻 /home/blog 目录的权限，对于拥有者 yylittlecat 和属于 fancy 用户组的成员都具备可读可写可执行的权限，但我们计划了一位“编外人员” apple 对吧，我们切换到 apple ，会发现他没有权限访问该目录：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">apple</span>@<span class="type">VM</span>-<span class="number">0</span>-<span class="number">13</span>-<span class="type">centos</span> <span class="type">home</span>]<span class="variable">$</span> <span class="built_in">cd</span> blog</span><br><span class="line">bash: <span class="built_in">cd</span>: blog: 权限不够</span><br></pre></td></tr></table></figure>


<p>&#8195;&#8195;截止到这里，建立小团体体验完毕了。/home/blog/ 存放的是我们的博客内容，这个时候会发现访问博客 403 了，哈哈哈…403 状态码意为服务器成功解析了请求但是客户端没有访问该资源的权限。那这又是怎么回事儿呢？</p>
<h2 id="文件和目录的权限"><a href="#文件和目录的权限" class="headerlink" title="文件和目录的权限"></a>文件和目录的权限</h2><p>&#8195;&#8195;上面我们通过 <code>ll</code> 或者 <code>ls -l</code> 命令查看到的文件属性，(选几行为例)从左至右依次是：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">文件的权限标志 | 文件的链接个数 | 文件所有者的用户名 | 该用户所在的用户组 | 文件的大小 | 最后一次被修改的日期 | 目录/文件名 </span><br><span class="line">drwxrwx---     	<span class="number">4</span>              yylittlecat        fancy              <span class="number">4096</span>       <span class="number">7</span>月  <span class="number">22</span> <span class="number">2021</span>         blog        </span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>      <span class="number">2</span>              root               root               <span class="number">4096</span>       <span class="number">7</span>月  <span class="number">22</span> <span class="number">2021</span>         httpbin     </span><br><span class="line">drwx------    	<span class="number">2</span>              archie             fancy              <span class="number">4096</span>       <span class="number">3</span>月  <span class="number">16</span> <span class="number">17</span>:<span class="number">23</span>        archie      </span><br><span class="line"><span class="literal">-rwxr</span><span class="literal">-xr</span><span class="literal">-x</span>      <span class="number">1</span>              root               root               <span class="number">24323</span>      <span class="number">3</span>月  <span class="number">14</span> <span class="number">17</span>:<span class="number">23</span>        gDark.css   </span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;我们注意到，权限标志貌似是一些特殊的符号：d、r、w、x 、- 等等，通过 chmod 命令修改的也是这些内容，这几个符号到底代表什么呢？让我们一探究竟：</p>
<h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><p>&#8195;&#8195;Linux 为 3 种人准备了权限——文件所有者 (属主)、文件属组用户和其他人。因为有了“其他人”，这样的分类将世界上所有的人都包含进来了。但 root 用户其实是不应该被算在“其他人”里面的。root 用户可以查看、修改、删除所有人的文件——即不要忘了 root 拥有控制一台计算机的完整权限。</p>
<p>&#8195;&#8195;<strong>文件所有者</strong>通常是文件的创建者，但这也不是一定的。可以中途改变一个文件的属主用户，这必须直接由 root 用户来实施。这句话换一种说法或许更贴切：文件的创建者自动成为文件所有者(属主)，文件的所有权可以转让，转让“手续”必须使用 root 权限办理。</p>
<p>&#8195;&#8195;可以(也必须)把文件交给一个组，这个组就是<strong>文件的属组</strong>。文件属组中的用户按照设置对该文件享有特定的权限。通常来说，当某个用户(如 tommy)建立一个文件时，这个文件的属主就是 tommy，文件的属组是只包含一个用户 tommy 的 tommy 组。当然，也可以设置文件的属组是一个不包括文件所有者的组，在文件所有者执行文件操作时，系统只关心属主权限，而组权限对属主是没有影响的。</p>
<p>&#8195;&#8195;最后，“<strong>其他人</strong>” 就是不包括前两类人和root用户在内的“其他”用户。通常来说，“其他人”总是享有最低的权限(或者干脆没有权限)。</p>
<p>&#8195;&#8195;那都需要设置哪些权限呢？</p>
<p>&#8195;&#8195;可以赋予某类用户对文件和目录享有 3 种权限：可读(read)权限，可写(write)权限，可执行(execute)权限。对于文件而言，拥有读取权限意味着可以打开并查看文件的内容，写入位控制着对文件的修改权限。而是否能够删除和重命名一个文件则是由其父目录的权限设置所控制的。</p>
<p>&#8195;&#8195;要让一个文件可执行，必须设置其执行权限。可执行文件有两类，一类是可以直接由 CPU 执行的二进制代码；另一类是 Shell 脚本程序，例如我们常用的命令。</p>
<p>&#8195;&#8195;对目录而言，所谓的可执行权限实际控制了用户能否进入该目录；而可读权限则负责确定能否列出该目录中的内容；可写权限控制着在目录中创建、删除和重命名文件。因此目录的可执行权限是其最基本的权限，换句话说是想访问一个目录以及里面的文件，至少要给到可读可执行两个权限，只有可读，我们还是访问不了的。</p>
<p>&#8195;&#8195;<strong>FYI：只有文件的所有者和 root 用户才有权修改文件的权限。</strong></p>
<p>&#8195;&#8195;<strong>drwxrwxrwx</strong> 这个权限标志一共10位，<strong>第 1 位</strong> 代表文件类型，常用有两个数值：<code>d</code> 和 <code>-</code>，<code>d</code> 代表目录，<code>-</code> 代表非目录，当然还有其他的（、b、c）。后面 9 位可以拆分为 3 组来看，分别对应不同用户：<strong>2-4</strong> 位代表所有者 user 的权限说明，<strong>5-7</strong> 位代表组群 group 的权限说明，<strong>8-10</strong> 位代表其他人 other 的权限说明。<code>r</code> 代表可读(read)权限，<code>w</code> 代表可写(write)权限，<code>x</code> 代表可执行(execute)权限，后 9 位中 <code>-</code> 表示不具备对应的权限。<code>drwxrwxrwx</code> 表示所有用户都对这个目录有可读可写可执行权限。</p>
<p>Linux 中的文件类型：</p>
<table>
<thead>
<tr>
<th>文件类型</th>
<th align="center">符号</th>
<th>文件类型</th>
<th align="center">符号</th>
</tr>
</thead>
<tbody><tr>
<td>普通文件</td>
<td align="center">-</td>
<td>本地域套接口</td>
<td align="center">s</td>
</tr>
<tr>
<td>目录</td>
<td align="center">d</td>
<td>有名管道</td>
<td align="center">p</td>
</tr>
<tr>
<td>符号设备文件</td>
<td align="center">c</td>
<td>符号链接</td>
<td align="center">l</td>
</tr>
<tr>
<td>块设备文件</td>
<td align="center">b</td>
<td></td>
<td align="center"></td>
</tr>
</tbody></table>
<h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h3><p>说回修改权限的命令，不好记的话，笔者觉得记英文缩写是个不错的选择：</p>
<blockquote>
<p>chmod - change file mode bits</p>
</blockquote>
<h4 id="使用字母修改权限："><a href="#使用字母修改权限：" class="headerlink" title="使用字母修改权限："></a>使用字母修改权限：</h4><p>u 代表所有者（user）<br>g 代表所有者所在的组群（group）<br>o 代表其他人，但不是 u 和 g （other）<br>a 代表全部的人，也就是包括 u、g 和 o</p>
<p>&#8195;&#8195;所以 chmod 参数的简单拼接方式就是，修改谁的权限就使用对应位置的字母，授予权限就是 +，删除权限就是 - ，直接设置权限用 =，后面跟上想修改的权限、要操作的目录。</p>
<p>举例 - 给其他人(other)授予写 /home/apple/test 这个文件的权限：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> sudo chmod o+w /home/apple/test</span><br></pre></td></tr></table></figure>

<p>举例 - 删除组群(group)和其他人(other)对 /home/apple/test 这个文件的读和写的权限：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> sudo chmod go<span class="literal">-rw</span> /home/apple/test</span><br></pre></td></tr></table></figure>

<p>举例 - 给所有者（user）、用户组（group）设置读写权限，其他人（other）只读：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> sudo chmod ug=rw,o=<span class="built_in">r</span> /home/apple/test</span><br></pre></td></tr></table></figure>

<h4 id="使用数字修改权限："><a href="#使用数字修改权限：" class="headerlink" title="使用数字修改权限："></a>使用数字修改权限：</h4><p>&#8195;&#8195;r、w、x 有对应的数字：r - 4，w - 2，x - 1。那这些数字是怎么来的呢？rwx 在计算中实际上占用了 3 位，对于一个权限只有 1 和 0 ，也就是有没有的区别，对应到二进制上，3 位二进制数对应 1 位八进制数，因此就可以用一个八进制数字表示一组权限。前面说了权限标志十位中的后九位分为三组，用数字修改权限时也是对应三组，每三个一组把想修改的权限数字加起来，得到三位数的一个数字。</p>
<p>举例 - 针对 /home/blog/www 目录，给所有人授予可读可写可执行的权限：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> sudo chmod  <span class="literal">-R</span> <span class="number">777</span> /home/blog/www</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;按照规则：user 的三个加起来 4+2+1=7，group 的三个加起来 4+2+1=7，other 的三个加起来 4+2+1=7，=&gt;777。对应的：5=4+1，表示拥有可读可执行权限，但是没有写权限；0 代表没有任何权限。想记的话，也可以算几个常用的：<br><code>-rw-------</code> (600) 只有所有者才有读和写的权限<br><code>-rw-r--r--</code> (644) 只有所有者才有读和写的权限，组群和其他人只有读的权限<br><code>-rwx------</code> (700) 只有所有者才有读，写，执行的权限<br><code>-rwxr-xr-x</code> (755) 只有所有者才有读，写，执行的权限，组群和其他人只有读和执行的权限<br><code>-rwx–-x--x</code> (711) 只有所有者才有读，写，执行的权限，组群和其他人只有执行的权限<br><code>-rw-rw-rw-</code> (666) 每个人都有读写的权限</p>
<table>
<thead>
<tr>
<th align="center">八进制</th>
<th align="center">二进制</th>
<th align="center">权限</th>
<th align="center">八进制</th>
<th align="center">二进制</th>
<th align="center">权限</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="center">000</td>
<td align="center"><code>---</code></td>
<td align="center">4</td>
<td align="center">100</td>
<td align="center"><code>r--</code></td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">001</td>
<td align="center"><code>--x</code></td>
<td align="center">5</td>
<td align="center">101</td>
<td align="center"><code>r-x</code></td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">010</td>
<td align="center"><code>-w-</code></td>
<td align="center">6</td>
<td align="center">110</td>
<td align="center"><code>rw-</code></td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">011</td>
<td align="center"><code>-wx</code></td>
<td align="center">7</td>
<td align="center">111</td>
<td align="center"><code>rwx</code></td>
</tr>
</tbody></table>
<p>这个好像也不用死记硬背，会 8 以内的加减法是不是就可以了~😂</p>
<h3 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h3><blockquote>
<p>chown - change file owner and group</p>
</blockquote>
<p>用于设置文件所有者和文件关联的组，需要 root 权限。</p>
<h3 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h3><blockquote>
<p>chgrp - change group ownership</p>
</blockquote>
<p>用于变更文件或目录的所属群组，与 chown 命令不同，chgrp 允许普通用户改变文件所属的组，只要该用户是该组的一员。</p>
<p>更多的使用方式在实践中进行吧~~</p>
<h3 id="R"><a href="#R" class="headerlink" title="-R"></a>-R</h3><blockquote>
<p> -R  Change the user ID and/or the group ID for the file hierarchies rooted in the files instead of just the files themselves.</p>
</blockquote>
<p>这三个命令常用的一个选项是 <code>-R</code>，注意这里是大写。加上这个选项会循环把该目录下的子目录、子文件的权限、所有者等等都一起进行修改，不然改的只是父目录，等我们需要访问子目录的时候就发现有问题啦…</p>
<h2 id="操作文件和目录"><a href="#操作文件和目录" class="headerlink" title="操作文件和目录"></a>操作文件和目录</h2><p>学会建立文件和目录，是 Linux 系统管理的第一步。虽然我没有先学这里，哈哈…</p>
<h3 id="建立目录-mkdir"><a href="#建立目录-mkdir" class="headerlink" title="建立目录 - mkdir"></a>建立目录 - mkdir</h3><blockquote>
<p>mkdir - make directories</p>
<p>可以建立一个或多个目录。</p>
<p>-m, –mode=MODE<br>    set file mode (as in chmod), not a=rwx - umask</p>
<p>-p, –parents<br>    no error if existing, make parent directories as needed</p>
</blockquote>
<p>举例 - 在用户主目录下新建两个文件夹 document、picture：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> ~ <span class="comment"># 进入用户主目录</span></span><br><span class="line"><span class="variable">$</span> mkdir document picture <span class="comment"># 新建两个目录</span></span><br></pre></td></tr></table></figure>

<p>举例 - 用户也可以使用绝对路径来新建目录：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> mkdir ~/picture/temp <span class="comment"># 在主目录下新建名为temp的目录</span></span><br></pre></td></tr></table></figure>

<p>由于主目录下 picture 已经存在，因此这条命令是合法的。但是当用户试图运行下面这条命令时，mkdir 将提示错误：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> mkdir ~/test/temp</span><br><span class="line">mkdir: 无法创建目录<span class="string">&quot;/home/tommy/test/temp&quot;</span>: 没有那个文件或目录</span><br></pre></td></tr></table></figure>

<p>这是因为当前在用户主目录下并没有 test 这个目录,自然也无法在 test 下创建 temp 目录了。为此 mkdir 提供了 <code>-p</code> 选项，用于完整地创建一个子目录结构：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> mkdir <span class="literal">-p</span> ~/test/temp</span><br></pre></td></tr></table></figure>


<p>&#8195;&#8195;在这个例子中，mkdir 会首先创建 test 目录，然后创建 temp，在需要创建一个完整目录结构的时候，这个选项是非常有用的。</p>
<p>&#8195;&#8195;另外一个常用的选项是 <code>-m</code> ，在新建目录的同时指定对应的权限：<code>mkdir -p -m 700 ~/test/tempx</code>，到这里不禁要问了，不特意指定的话默认权限是什么样的呢？这就涉及到另一个命令：umask。</p>
<h3 id="权限掩码-umask"><a href="#权限掩码-umask" class="headerlink" title="权限掩码 - umask"></a>权限掩码 - umask</h3><blockquote>
<p>umask (1) - bash built-in commands, see bash(1)?<br>指定在建立文件时预设的权限掩码。</p>
</blockquote>
<p>&#8195;&#8195;umask 可用来设定[权限掩码]。[权限掩码]是由3个八进制的数字所组成，将”满级(a=rwx)(777)”的权限减掉权限掩码后，即可产生建立文件时预设的权限。使用 <code>umask</code> 查看8进制数字或者 <code>umask -S</code> 查看以符号形式表示的权限掩码，如果后面跟上参数，那意味着重新指定权限掩码或设定默认权限：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> umask</span><br><span class="line"><span class="number">0022</span></span><br><span class="line"><span class="variable">$</span> umask <span class="literal">-S</span></span><br><span class="line">u=rwx,g=rx,o=rx</span><br><span class="line"><span class="variable">$</span> umask <span class="literal">-S</span> g=rwx  <span class="comment"># 以符号类型设置默认权限</span></span><br><span class="line">u=rwx,g=rwx,o=rx  <span class="comment"># 修改以后，新目录的默认权限就是 drwxrwxr-x 了</span></span><br><span class="line"><span class="variable">$</span> umask <span class="number">0002</span>      <span class="comment"># 以数字形式恢复掩码</span></span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;所以我用的这台虚拟机上，目录的默认权限就是 <code>drwxr-xr-x</code> ，也就是 <code>777-022=755</code> 。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">yylittlecat</span>@<span class="type">VM</span>-<span class="number">0</span>-<span class="number">13</span>-<span class="type">centos</span> <span class="type">test</span>]<span class="variable">$</span> ll</span><br><span class="line">总用量 <span class="number">20</span></span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">2</span> yylittlecat fancy <span class="number">4096</span> <span class="number">3</span>月  <span class="number">22</span> <span class="number">17</span>:<span class="number">59</span> temp    <span class="comment"># 使用 mkdir -p ~/test/temp 创建</span></span><br><span class="line">drwx------ <span class="number">2</span> yylittlecat fancy <span class="number">4096</span> <span class="number">3</span>月  <span class="number">22</span> <span class="number">18</span>:<span class="number">01</span> tempx   <span class="comment"># 使用 mkdir -p -m 700 ~/test/tempx 创建</span></span><br></pre></td></tr></table></figure>

<h3 id="建立空文件-touch"><a href="#建立空文件-touch" class="headerlink" title="建立空文件 - touch"></a>建立空文件 - touch</h3><blockquote>
<p>touch – change file access and modification times</p>
<p>设置文件的访问和修改时间，如果文件不存在的话，会使用默认权限创建一个空文件。</p>
</blockquote>
<p>举例 - 在当前目录下新建一个名为 test 的文件。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> touch test</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;用 touch 命令建立的文件是空文件(也就是不包含任何内容的文件)。空文件对建立某些特定的实验环境是有用。另外，当某些应用程序因为缺少文件而无法启动，而这个文件实际上并不那么重要时，可以建立一个空文件暂时“骗过”这个程序。<br>&#8195;&#8195;touch 命令的另一个用途是更新一个文件的建立日期和时间。例如，对于 hello 这个文件，使用 <code>ls-l</code> 命令显示这个文件的建立时间为2022年2月18日的10点30分，并且文件是有内容的。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">ls</span> <span class="literal">-l</span></span><br><span class="line"><span class="literal">-rwxrwxrwx</span>  <span class="number">1</span> yylittlecat fancy    <span class="number">6</span> <span class="number">2</span>月  <span class="number">18</span> <span class="number">10</span>:<span class="number">30</span> hello</span><br><span class="line"><span class="variable">$</span> <span class="built_in">cat</span> hello</span><br><span class="line">Hello, World!</span><br></pre></td></tr></table></figure>

<p>使用 touch 命令更新后，建立时间变成了2022年3月15日的15点18分，但内容并没有变化。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> touch hello</span><br><span class="line"><span class="variable">$</span> <span class="built_in">ls</span> <span class="literal">-l</span></span><br><span class="line"><span class="literal">-rwxrwxrwx</span>  <span class="number">1</span> yylittlecat fancy   <span class="number">14</span> <span class="number">3</span>月  <span class="number">15</span> <span class="number">15</span>:<span class="number">18</span> hello</span><br><span class="line"><span class="variable">$</span> <span class="built_in">cat</span> hello</span><br><span class="line">Hello, World!</span><br></pre></td></tr></table></figure>

<p>touch 命令的这个功能在自动备份和整理文件时非常有用，这使得程序可以决定哪些文件已经被备份或整理过了。</p>
<h3 id="移动和重命名-mv"><a href="#移动和重命名-mv" class="headerlink" title="移动和重命名 - mv"></a>移动和重命名 - mv</h3><blockquote>
<p>mv - move (rename) files</p>
<p>对文件或目录进行移动、重命名。</p>
</blockquote>
<p>测试目录：用户主目录 ~ 和主目录下的 test/ 目录。<br>可以移动文件或者目录：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">mv</span> hello test/</span><br><span class="line"><span class="variable">$</span> <span class="built_in">mv</span> Photo/ test/</span><br></pre></td></tr></table></figure>

<p>mv 命令在执行过程中不会显示任何提示信息，那如果目录下有一个同名文件会怎么样呢？做一个小测试：<br>(1) 首先在主目录下新建一个名为 hello 的文件：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> ~</span><br><span class="line"><span class="variable">$</span> <span class="built_in">echo</span> <span class="string">&quot;Hello in ~, named hello.&quot;</span> &gt; hello</span><br><span class="line"><span class="variable">$</span> <span class="built_in">cat</span> hello</span><br><span class="line">Hello <span class="keyword">in</span> ~, named hello.</span><br></pre></td></tr></table></figure>

<p>(2) 在主目录下新建一个 test 目录，然后在 test/ 下同样建立一个名为 hello 的文件：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> mkdir test</span><br><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> test/</span><br><span class="line"><span class="variable">$</span> <span class="built_in">echo</span> <span class="string">&quot;Hello in ~/test/, named hello.&quot;</span> &gt; hello</span><br><span class="line"><span class="variable">$</span> <span class="built_in">cat</span> hello</span><br><span class="line">Hello <span class="keyword">in</span> ~/test/, named hello.</span><br></pre></td></tr></table></figure>

<p>(3) 我们在两个 hello 文件的内容上做了区分，现在把主目录下的 hello 移动到 test/ 目录下，并且查看 test/hello 的内容，会发现文件中原本的内容已经被覆盖了，也就是 mv 把 test/ 目录下的同名文件替换了，但却没有给出任何警告：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> ..</span><br><span class="line"><span class="variable">$</span> <span class="built_in">mv</span> hello test/</span><br><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> test/</span><br><span class="line"><span class="variable">$</span> <span class="built_in">cat</span> hello</span><br><span class="line">Hello <span class="keyword">in</span> ~, named hello.</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;这样有没有问题呢？可能有。用户可能不经意间就把一个重要文件给删除了。为此 mv 提供了一个 <code>-i</code> 选项用于发现这样的情况：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">mv</span> <span class="literal">-i</span> hello test/</span><br><span class="line"><span class="built_in">mv</span>: 是否覆盖<span class="string">&quot;test/hello&quot;</span>？</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;回答 y 表示覆盖，回答 n 表示跳过这个文件（保持原样不动）。<br>&#8195;&#8195;另一个比较有用的选项是 <code>-b</code>。这个选项用一种不同的方式来处理刚才这个问题。在移动文件前，首先在目标目录的同名文件的文件名后加一个“~”号，从而避免这个文件被覆盖。例如:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">mv</span> <span class="literal">-b</span> hello test/</span><br><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> test/</span><br><span class="line"><span class="variable">$</span> <span class="built_in">ls</span></span><br><span class="line">hello</span><br><span class="line">hello~</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;Linux 没有“重命名”这个命令，原因很简单，即没有这个必要。重命名无非就是将一个文件在同一个目录里移动，这是 mv 最擅长的工作。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">mv</span> hello~ hello_bak</span><br><span class="line"><span class="variable">$</span> <span class="built_in">ls</span></span><br><span class="line">hello</span><br><span class="line">hello_bak</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;因此对 mv 比较准确的描述是，mv 可以在移动文件和目录的同时对其重命名。<br>&#8195;&#8195;诶，那如果 test/ 目录下已经存在一个 <code>hello~</code>，重复执行 <code>mv -b hello test/</code> 会是什么效果呢？又或者同时使用这两个选项 <code>mv -i -b hello test/</code> 会发生什么呢？我有够无聊，是不是~哈哈😂</p>
<h3 id="复制文件和目录-cp"><a href="#复制文件和目录-cp" class="headerlink" title="复制文件和目录 - cp"></a>复制文件和目录 - cp</h3><blockquote>
<p>cp – copy files<br>复制文件和目录。</p>
</blockquote>
<p>&#8195;&#8195;cp命令用来复制文件和目录。下面这条命令将文件 hello.log 复制到 test 目录下。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cp</span> test.php test/</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;和 mv命令一样，cp 默认情况下会覆盖目标目录中的同名文件。可以使用 -i 选项对这种情况进行提示，也可以使用 -b 选项对同名文件改名后再复制。这两个选项的使用和 mv 命令中一样。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cp</span> <span class="literal">-i</span> hello.log test/</span><br><span class="line"><span class="built_in">cp</span>:是否覆盖<span class="string">&quot;test/hello.log&quot;</span>?</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;回答 y 表示覆盖，回答 n 表示跳过这个文件。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cp</span> <span class="literal">-b</span> hello.log test/</span><br><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> test/</span><br><span class="line"><span class="variable">$</span> <span class="built_in">ls</span></span><br><span class="line">hello.log</span><br><span class="line">hello.log~</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;cp命令在执行复制任务的时候会自动跳过目录。例如:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cp</span> test/ document/</span><br><span class="line"><span class="built_in">cp</span>:略过目录<span class="string">&quot;test/&quot;</span></span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;为此，可以使用 -r 选项，这个选项将子目录连同其中的文件一起复制到另一个子目录下。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cp</span> <span class="literal">-r</span> test/ document/</span><br></pre></td></tr></table></figure>

<h3 id="删除目录和文件-rmdir、rm"><a href="#删除目录和文件-rmdir、rm" class="headerlink" title="删除目录和文件 - rmdir、rm"></a>删除目录和文件 - rmdir、rm</h3><blockquote>
<p>rmdir – remove directories</p>
<p>删除目录。</p>
<p>rm, unlink – remove files or directories</p>
<p>删除文件、目录。</p>
</blockquote>
<p>&#8195;&#8195;rmdir 命令用于删除目录。使用起来很简单，只需要在后面跟上要删除的目录作为参数即可，也可以同时删除多个目录：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">rmdir</span> temp</span><br><span class="line"><span class="variable">$</span> <span class="built_in">rmdir</span> tempx tempxx tempxxx    <span class="comment">#或者 rmdir temp*</span></span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;但是 rmdir 只能删除空目录，删除非空目录会提示错误：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">rmdir</span> test</span><br><span class="line"><span class="built_in">rmdir</span>: 删除 <span class="string">&quot;test&quot;</span> 失败: 目录非空</span><br><span class="line"><span class="variable">$</span> <span class="built_in">ls</span> test/</span><br><span class="line">hello</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;因此，在使用 rmdir 删除一个目录之前，首先要将这个目录下的文件和子目录删除。删除文件需要用到 rm 命令了，当然 rm 也可以用来删除目录，而且比 rmdir 更为“高效”。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">ls</span> test/</span><br><span class="line">hello hello1 hello2 hello3</span><br><span class="line"><span class="variable">$</span> <span class="built_in">rm</span> test/hello*	<span class="comment">#删除 test 目录下所有以 hello 开头的文件</span></span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;和 mv 等命令一样，rm 不会对此作任何提示。通过 rm 命令删除的文件将永远地从系统中消失了，而不会被放入一个称作“回收站”的临时目录下(尽管某些恢复软件可能找回一些文件，但只是“可能”而已)。一个比较安全的使用 rm 命令的方式是使用 -i 选项，这个选项会在删除文件前给出提示，并等待用户确认。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">rm</span> <span class="literal">-i</span> test/hello</span><br><span class="line"><span class="built_in">rm</span>：是否删除普通文件 “test/hello<span class="string">&quot; ?</span></span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;回答 y 表示确认删除，回答 n 表示跳过这个文件。对于只读文件，即便不加上 -i 选项，rm 命令也会对此进行提示。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">rm</span> hello_bak</span><br><span class="line"><span class="built_in">rm</span>：是否删除有写保护的普通文件 “hello_bak<span class="string">&quot;?</span></span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;可以使用 -f 选项来避免这样的交互式操作。rm 会自动对这些问题回答 y。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">rm</span> <span class="operator">-f</span> hello_bak</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;带有 -r 参数的 rm 命令会递归地删除目录下所有的文件和子目录。例如，下面这个命令会删除  Photos 目录下所有的目录、子目录及子目录下的文件和子目…..最后删除 Photos目录。也就是说，把 Photos 目录完整地从磁盘上移除了(当然前提是拥有这样操作的权限)。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">rm</span> <span class="literal">-r</span> Photos/</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;使用 rm 命令的时候应该格外小心，特别是以 root 身份执行该命令时。无论熟不熟悉 Linux，可能大家都看过下面这个动图，哈哈，说的就是这个意思：</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/sudo-rm.gif"></p>
<p>&#8195;&#8195;前面的学习中提到过，<code>/</code> 表示 Linux 的根目录，<code>~</code> 表示用户的主目录，图中的命令是把根目录的一切都删除掉了。我怀疑是不是有人习惯性的把 <code>/</code> 理解为当前所工作的目录了，因为我有两次手贱也在想要打开的子目录前面输入 <code>/</code> ，提示我目录不存在，才反应过来输错了😂……<br>&#8195;&#8195;所以在删除一个文件/目录前，一定要认真评估后果。如果要使用 -f 和 -r 选项，要确定这是必须的。</p>
<h2 id="输入输出重定向和管道"><a href="#输入输出重定向和管道" class="headerlink" title="输入输出重定向和管道"></a>输入输出重定向和管道</h2><h3 id="输出重定向-gt-、-gt-gt"><a href="#输出重定向-gt-、-gt-gt" class="headerlink" title="输出重定向 - &gt;、&gt;&gt;"></a>输出重定向 - &gt;、&gt;&gt;</h3><p>&#8195;&#8195;程序在默认情况下输出结果的地方被称为标准输出(stdout)。通常来说，标准输出总是指向显示器。例如，下面的 ls 命令获取当前目录下的文件列表,并将其输出到标准输出，于是用户在屏幕上看到了这些文件名：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> ~</span><br><span class="line"><span class="variable">$</span> <span class="built_in">ls</span> ~</span><br><span class="line">document  hello  picture  test</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;输出重定向用于把程序的输出转移到另一个地方去。下面这条命令将 ls 的输出重定向到 ls_out 文件中：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">ls</span> ~ &gt; test/ls_out</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;这样，ls 的输出就不会在显示器上显示出来，而是出现在 test 目录下的 ls_out 文件中，每行显示一个文件名:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cat</span> test/ls_out</span><br><span class="line">document</span><br><span class="line">hello</span><br><span class="line">picture</span><br><span class="line">test</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;如果 ls_out 文件不存在，那么输出重定向符号 <code>&gt;</code> 会试图建立这个文件。如果 ls_out 文件已经存在了，那么 <code>&gt;</code> 会删除文件中原有的内容，然后用新内容替代：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> uname <span class="literal">-r</span> &gt; test/ls_out</span><br><span class="line"><span class="variable">$</span> <span class="built_in">cat</span> test/ls_out</span><br><span class="line"><span class="number">3.10</span>.<span class="number">0</span><span class="literal">-1160</span>.<span class="number">31.1</span>.el7.x86_64</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;可以看到，<code>&gt;</code> 并不会礼貌地在原来那堆文件名的后面添上版本信息，而是直接覆盖了刚刚 ls 命令的输出。如果要保留原来文件中的内容，应该使用输出重定向符号 <code>&gt;&gt;</code>：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> date &gt; test/date_out                 <span class="comment"># 将 date 命令的输出重定向到 date_out 文件</span></span><br><span class="line"><span class="variable">$</span> <span class="built_in">cat</span> test/date_out	                   <span class="comment"># 查看 date_out 文件的内容</span></span><br><span class="line"><span class="number">2022</span>年 <span class="number">03</span>月 <span class="number">15</span>日 星期二 <span class="number">16</span>:<span class="number">12</span>:<span class="number">00</span> CST</span><br><span class="line"><span class="variable">$</span> uname <span class="literal">-r</span> &gt;&gt; test/date_out	           <span class="comment"># 将 uname 命令产生的版本信息追加到 date_out 文件的末尾</span></span><br><span class="line"><span class="variable">$</span> <span class="built_in">cat</span> test/date_out	                   <span class="comment"># 再次查看 date_out 文件的内容</span></span><br><span class="line"><span class="number">2022</span>年 <span class="number">03</span>月 <span class="number">15</span>日 星期二 <span class="number">16</span>:<span class="number">12</span>:<span class="number">00</span> CST</span><br><span class="line"><span class="number">3.10</span>.<span class="number">0</span><span class="literal">-1160</span>.<span class="number">31.1</span>.el7.x86_64</span><br></pre></td></tr></table></figure>

<h3 id="输入重定向-lt-、-lt-lt"><a href="#输入重定向-lt-、-lt-lt" class="headerlink" title="输入重定向 - &lt;、&lt;&lt;"></a>输入重定向 - &lt;、&lt;&lt;</h3><p>&#8195;&#8195;和标准输出类似，程序默认情况下接收输入的地方被称为标准输入(stdin)。通常来说，标准输入总是指向键盘。例如，如果使用不带任何参数的 cat 命令，那么 cat 会停在那里，等待从标准输入(也就是键盘)获取数据。书上说使用 <code>&lt;</code> 重定向符号可以让程序从一个文本中获取输入……所以下面的两个命令是一回事儿吧：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> ~</span><br><span class="line"><span class="variable">$</span> <span class="built_in">cat</span> &lt; test/date_out</span><br><span class="line"><span class="variable">$</span> <span class="built_in">cat</span> test/data_out</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;另一种输入重定向的例子被称为立即文档(here document)。这种重定向方式使用操作符 <code>&lt;&lt;</code>。立即文档明确告诉 Shell 从键盘接受输入，并传递给程序。现在看下面这个例子:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cat</span>&lt;&lt; EOF</span><br><span class="line">&gt; Hello</span><br><span class="line">&gt; Bye</span><br><span class="line">Hello</span><br><span class="line">Bye</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;cat 命令从键盘接受两行输入，并将其送往标准输出。和本节开头的例子不同的是，给立即文档指定了一个代表输入结束的分隔符(在这里是单词 EOF)，当 Shell 遇到这个单词的时候，即认为输入结束，并把刚才的键盘输入一起传递给命令。所以这次 cat 命令会将用户的输入一块显示，而不是每收到一行就迫不及待地把它打印出来。<br>&#8195;&#8195;用户可以选择任意一个单词作为立即文档的分隔符，像 EOF、END、eof 等都是不错的选择，只要可以确保它不是正文的一部分即可。<br>&#8195;&#8195;那么，是否可以让输入重定向和输出重定向结合在一起使用？答案是肯定的。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cat</span> &lt;&lt; <span class="keyword">END</span> &gt;&gt; test/date_out</span><br><span class="line">&gt; Hi Tommy,</span><br><span class="line">&gt; it<span class="string">&#x27;s time to be off duty!</span></span><br><span class="line"><span class="string">&gt; Let&#x27;</span>s go to the bar.</span><br><span class="line">&gt; <span class="keyword">END</span></span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;这条命令首先让 cat 命令以立即文档的方式获取输入，然后再把 cat 的输出重定向到 date_out 文件。查看 date_out 文件，应该可以看到拼接的这些内容:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cat</span> test/date_out</span><br><span class="line"><span class="number">2022</span>年 <span class="number">03</span>月 <span class="number">15</span>日 星期二 <span class="number">16</span>:<span class="number">12</span>:<span class="number">00</span> CST</span><br><span class="line"><span class="number">3.10</span>.<span class="number">0</span><span class="literal">-1160</span>.<span class="number">31.1</span>.el7.x86_64</span><br><span class="line">Hi Tommy,</span><br><span class="line">it<span class="string">&#x27;s time to be off duty!</span></span><br><span class="line"><span class="string">Let&#x27;</span>s go to the bar.</span><br></pre></td></tr></table></figure>

<h3 id="管道"><a href="#管道" class="headerlink" title="管道 - |"></a>管道 - |</h3><p>&#8195;&#8195;管道将“重定向”再向前推进了一步。通过一根竖线 <code>|</code>，将一条命令的输出连接到另一条命令输入。下面这条命令显示了如何在文件列表中查找文件名中包含某个特定字符串的文件:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> test/</span><br><span class="line"><span class="variable">$</span> <span class="built_in">ls</span> | grep out</span><br><span class="line">date_out</span><br><span class="line">ls_out</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;ls 首先列出当前目录下的所有文件名，管道 <code>|</code> 接收到这些输出，并把它们发送给 grep 命令作为其输入，最后 grep 在这堆文件列表中查找包含字符串 out 的文件名，并在标准输出(也就是显示器)显示。<br>&#8195;&#8195;可以在以行命令中使用多个管道，将多个命令结合起来，写出复杂的 Shell 脚本。看书看到这里，我仿佛已经会写脚本了一样，哈哈哈~🤓</p>
<hr>
<p>Linux 的文件系统，暂时学习到这里。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 学习笔记（二）- Shell 初识</title>
    <url>/2022/02/23/Linux_Shell/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="什么是-Shell"><a href="#什么是-Shell" class="headerlink" title="什么是 Shell"></a>什么是 Shell</h2><p>之前我一直混淆了几个概念：命令行、脚本、命令解释器、Shell。</p>
<blockquote>
<p>从严格意义上讲，命令行指的是供用户输入命令的界面，其本身只是接受输入，然后把命令传递给命令解释器。后者就是 Shell。从本质上讲，Shell 是一个程序，它在用户和操作系统之间提供了一个面向行的可交互接口。用户在命令行中输入命令，运行在后台的 Shell 把命令转换成指令代码发送给操作系统。Shell 提供了很多高级特性，使得用户和操作系统间的交互变得简便和高效。</p>
<p>目前，在 Linux 环境下有几种不同类型的 Shell, 常用的有 Bourne Again Shell(BASH)、TCSH Shell、 Z-Shell 等。不同的 Shell 提供不尽相同的语法和特性，用户可以使用任何一种 Shell。在 Linux 上，BASH shell 是默认安装和使用的 Shell。</p>
</blockquote>
<p>在 BASH 中，命令行以 <code>$</code> 为提示符，表示我们可以开始输入命令了，以 root 身份执行命令时，Shell 提示符号为 <code>#</code>：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">##[用户名@主机名 目录]提示符 命令</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">VM</span>-<span class="number">0</span>-<span class="number">13</span>-<span class="type">centos</span> ~]<span class="comment"># 登出</span></span><br><span class="line">[<span class="type">tommy</span>@<span class="type">VM</span>-<span class="number">0</span>-<span class="number">13</span>-<span class="type">centos</span> ~]<span class="variable">$</span> 登出</span><br></pre></td></tr></table></figure>

<p><strong>FYI</strong>：Linux 中命令和文件名都是区分大小写的。</p>
<h2 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h2><span id="more"></span>

<h3 id="cd"><a href="#cd" class="headerlink" title="cd /"></a>cd /</h3><blockquote>
<p>进入根目录</p>
</blockquote>
<h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><blockquote>
<p>列出文件和目录</p>
</blockquote>
<h3 id="cd-home"><a href="#cd-home" class="headerlink" title="cd home/"></a>cd home/</h3><blockquote>
<p>进入 /home 目录，home 目录中存放着系统中所有用户的主目录，主目录的名字就是用户名。</p>
</blockquote>
<h3 id="cd-1"><a href="#cd-1" class="headerlink" title="cd"></a>cd</h3><blockquote>
<p>不带任何参数的 cd 命令进入当前用户的主目录。用户主目录默认对其他用户关闭访问权限。</p>
</blockquote>
<h3 id="cd-etc"><a href="#cd-etc" class="headerlink" title="cd /etc/"></a>cd /etc/</h3><blockquote>
<p>进入 /etc/ 目录，这个目录存放着系统以及绝大部分应用软件的配置文件。</p>
</blockquote>
<h3 id="cat-fstab"><a href="#cat-fstab" class="headerlink" title="cat fstab"></a>cat fstab</h3><blockquote>
<p>查看 fstab 文件，这个文件定义了各硬盘分区所挂载到的目录路径。（这里我有点儿懵）</p>
</blockquote>
<h2 id="命令行补全：Tab-键"><a href="#命令行补全：Tab-键" class="headerlink" title="命令行补全：Tab 键"></a>命令行补全：Tab 键</h2><p>&#8195;&#8195;有些命令并不是一个单词，亦或者文件名作为最常见的参数有的名字也很长不容易记住。BASH 提供了一种特性：<strong>命令行补全</strong>。例如我们输入 ss，然后点击 Tab 键，Shell 会把 ss 开头的命令打印出来，我们也可以继续按 Tab 键进行选择：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> ss&lt;TAB&gt;</span><br><span class="line">SSH_AUTH_SOCK  ssh<span class="literal">-add</span>        ssh<span class="literal">-copy</span><span class="literal">-id</span>    ssh<span class="literal">-keyscan</span>    sso_util</span><br><span class="line">ssh            ssh<span class="literal">-agent</span>      ssh<span class="literal">-keygen</span>     sshd</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;那对于输入文件名的时候，只需要输入前面几个字符，然后按 Tab 键，Shell 会自动把文件名补全，当然这得是对应目录里面存在这个文件，并且只有一个：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">tommy</span>@<span class="type">VM</span>-<span class="number">0</span>-<span class="number">13</span>-<span class="type">centos</span> ~]<span class="variable">$</span> <span class="built_in">cd</span> /etc/</span><br><span class="line">[<span class="type">tommy</span>@<span class="type">VM</span>-<span class="number">0</span>-<span class="number">13</span>-<span class="type">centos</span> <span class="type">etc</span>]<span class="variable">$</span> <span class="built_in">cat</span> fs&lt;TAB&gt;</span><br><span class="line"><span class="comment">#自动补全为：</span></span><br><span class="line">[<span class="type">tommy</span>@<span class="type">VM</span>-<span class="number">0</span>-<span class="number">13</span>-<span class="type">centos</span> <span class="type">etc</span>]<span class="variable">$</span> <span class="built_in">cat</span> fscat</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;如果以输入的字符开头的文件不止一个，Shell 会列出字符开头的文件列表：(我看有的书上说要按两次 Tab？)</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">tommy</span>@<span class="type">VM</span>-<span class="number">0</span>-<span class="number">13</span>-<span class="type">centos</span> <span class="type">etc</span>]<span class="variable">$</span> <span class="built_in">cat</span> b&lt;TAB&gt;</span><br><span class="line">bash_completion.d/ bashrc             bashrc.rpmnew      binfmt.d/</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p><strong>FYI</strong>：系统命令本质上就是一些可执行文件，可以在 /usr/bin/ 目录下找到。从这种意义上讲，命令补全和文件名补全其实是一回事。</p>
<h2 id="通配符："><a href="#通配符：" class="headerlink" title="通配符："></a>通配符：</h2><h3 id><a href="#" class="headerlink" title="*"></a>*</h3><blockquote>
<p>“*” 用于匹配文件名中任意长度的字符串。</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">tommy</span>@<span class="type">VM</span>-<span class="number">0</span>-<span class="number">13</span>-<span class="type">centos</span> <span class="type">etc</span>]<span class="variable">$</span> <span class="built_in">ls</span> *.conf</span><br><span class="line">asound.conf    libuser.conf    sos.conf</span><br><span class="line">chrony.conf    locale.conf     sudo.conf</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="-1"><a href="#-1" class="headerlink" title="?"></a>?</h3><blockquote>
<p>和“/*” 相类似的通配符是“?”。但和“/*” 匹配任意长度的字符串不同，“?” 只匹配一个字符。</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">tommy</span>@<span class="type">VM</span>-<span class="number">0</span>-<span class="number">13</span>-<span class="type">centos</span> <span class="type">etc</span>]<span class="variable">$</span> <span class="built_in">ls</span> host?</span><br><span class="line">hosts</span><br><span class="line">[<span class="type">tommy</span>@<span class="type">VM</span>-<span class="number">0</span>-<span class="number">13</span>-<span class="type">centos</span> <span class="type">etc</span>]<span class="variable">$</span> <span class="built_in">ls</span> host*</span><br><span class="line">host.conf  hostname  hosts  hosts.allow  hosts.deny</span><br></pre></td></tr></table></figure>

<h3 id="-2"><a href="#-2" class="headerlink" title="[]"></a>[]</h3><blockquote>
<p>“[]”用于匹配所有出现在方括号内的字符。</p>
</blockquote>
<p>例如，列出以 rp 开头而仅以 c 或 m 结尾的文件名或目录。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">tommy</span>@<span class="type">VM</span>-<span class="number">0</span>-<span class="number">13</span>-<span class="type">centos</span> <span class="type">etc</span>]<span class="variable">$</span> <span class="built_in">ls</span> <span class="built_in">rp</span>[<span class="type">cm</span>]</span><br><span class="line">rpc</span><br><span class="line"></span><br><span class="line">rpm:</span><br><span class="line">macros.dist  macros.perl</span><br></pre></td></tr></table></figure>

<p>其他用法：<code>ls text[1-3]</code> 列出所有以 text 开头并以 1~3 中某个字符(包括1和3)结束的文件；也可以使用字母范围，在 ASCII 字符集中，A-Z 匹配所有大写字母：<code>ls text[A-C]</code>。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 学习笔记（五）- 进程管理</title>
    <url>/2022/04/28/Linux_Progress/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p>无论是系统管理员还是普通用户，监视系统进程的运行情况，并适时终止一些失控的进程是每天的例行事务…就像人生一样，总有那么几个失控的瞬间，怎么办呢，扼杀掉它。🤓</p>
<h2 id="快速上手：结束一个失控的程序"><a href="#快速上手：结束一个失控的程序" class="headerlink" title="快速上手：结束一个失控的程序"></a>快速上手：结束一个失控的程序</h2><p>传说中有一个古老而有名的“恶作剧”程序，会在 Shell 中不停地创建目录和文件。如果不赶快终止，那么它将在系统中创建一棵很深的目录树：</p>
<ol>
<li>在主目录中用文本编辑器创建一个名为 badpro 的文本文件，包含以下内容:</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">echo</span> <span class="string">&quot;I&#x27;m making files! !&quot;</span></span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">	mkdir adir</span><br><span class="line">	<span class="built_in">cd</span> adir</span><br><span class="line">	touch afile</span><br><span class="line">	</span><br><span class="line">	sleep 2s</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>这是一个 Shell 脚本, 会不停的新建目录和文件。为了让这个恶作剧表现得尽可能“温和”，这里让它在每次建完目录和文件后休息2秒钟。</p>
<ol start="2">
<li>将这个文件加上可执行权限，并从后台执行。</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> sudo chmod +x badpro</span><br><span class="line"><span class="variable">$</span> ./badpro &amp;</span><br></pre></td></tr></table></figure>

<p><strong>FYI</strong>：运行这个程序存在一些风险。千万不要漏了 sleep 2s 这一行，否则创建的目录树的深度会很快超出系统的允许范围。在这种情况下，我们可能必须要使用 <code>rm -fr adir</code> 来删除这些“垃圾”目录。为什么要从后台运行？原因只有一个，即迫使自己使用 kill 命令杀死这个进程。</p>
<ol start="3">
<li>现在程序已经跑起来了，可以看到终端在不停地输出 I’m making files! ! 。新开一个终端窗口，使用 <code>ps</code> 命令看一下 badpro 的进程信息，使用管道配合 <code>grep</code> 命令查找 PID，这里 PID 唯一表示一个进程。<code>ps</code> 命令的输出中第二个字段表示 PID，根据 <code>grep</code> 的搜索结果，可以判断出 10221 就是 badpro 的 PID。</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">ps</span> aux | grep badpro</span><br><span class="line">tommy   <span class="number">10221</span>  <span class="number">0.0</span>  <span class="number">0.0</span> <span class="number">113288</span>  <span class="number">1408</span> pts/<span class="number">0</span>    S    <span class="number">10</span>:<span class="number">08</span>   <span class="number">0</span>:<span class="number">00</span> /bin/bash ./badpro</span><br><span class="line">tommy   <span class="number">10764</span>  <span class="number">0.0</span>  <span class="number">0.0</span> <span class="number">112828</span>   <span class="number">984</span> pts/<span class="number">1</span>    <span class="built_in">R</span>+   <span class="number">10</span>:<span class="number">10</span>   <span class="number">0</span>:<span class="number">00</span> grep -<span class="literal">-color</span>=auto badpro</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>现在使用 <code>kill</code> 命令”杀死“比尔，哦不，是”杀死“这个进程。</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">kill</span> <span class="number">10221</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>回到运行 badpro 的终端，可以看到程序已经终止了，记得把 adir 删掉就好了</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">rm</span> <span class="literal">-r</span> adir</span><br></pre></td></tr></table></figure>

<h2 id="什么是进程"><a href="#什么是进程" class="headerlink" title="什么是进程"></a>什么是进程</h2><blockquote>
<p>看似简单的概念往往很难给出定义，一个比较“正规”的说法是：进程是操作系统的一种抽象概念，用来表示正在运行的程序。其实，读者可以简单地把进程理解为正在运行的程序。Linux 是一种多用户、多进程的操作系统。在 Linux 的内核中，维护着一张表。这张表记录了当前系统中运行的所有进程的各种信息。Linux 内核会自动完成对进程的控制和调度。当然，这是所有操作系统都必须拥有的基本功能。内核中一些重要的进程信息如下:</p>
<ul>
<li>进程的内存地址;<br>进程当前的状态;<br>进程正在使用的资源;<br>进程的优先级(谦让度);<br>进程的属主。</li>
</ul>
<p>Linux 提供了让用户可以对进程进行监视和控制的工具。在这方面，Linux 对系统进程和用户进程一视同仁，使用户能够用一套工具控制这两种进程。</p>
</blockquote>
<p>读到这里，小咪突然想起来上大学的时候学习操作系统，那是一本黑色封面的教材，名字就是《操作系统》，整本书没有一个图片，全™是文字，给我们上课的女老师是计算机系的副主任，这门课真的是所谓的”读书“，她全程都是在读，可想而知这门课是旷课率最高的…哈哈哈…好了，不闹了~所以我们可以简单的理解为一个进程就是一个程序。</p>
<h2 id="进程的属性"><a href="#进程的属性" class="headerlink" title="进程的属性"></a>进程的属性</h2><h3 id="PID-进程的-ID-号"><a href="#PID-进程的-ID-号" class="headerlink" title="PID: 进程的 ID 号"></a>PID: 进程的 ID 号</h3><p>用户管理那一篇曾经学到过，系统为每个用户都分配了用于标识其身份的 ID 号(UID)。同样地，进程也有这样一个 ID 号，被称作 PID。用 ID 确定进程的方法是非常有好处的，对于计算机而言，认识数字永远比认识一串字符方便得多，Linux 没有必要去理解那些对人类非常“有意义”的进程名。Linux 不仅自己使用 PID 来确定进程，还要求用户在管理进程时也提供相应的 PID 号。几乎所有的进程管理工具都接受 PID 号，而不是进程名。这也是为什么在“快速上手”环节中必需要使用 ps 命令获得 PID 号的原因。</p>
<h3 id="PPID-父进程的-PID"><a href="#PPID-父进程的-PID" class="headerlink" title="PPID: 父进程的 PID"></a>PPID: 父进程的 PID</h3><p>在 Linux 中，所有的进程都必须由另一个进程创建一除了在系统引导时，由内核自主创建并安装的那几个进程。当一个进程被创建时，创建它的那个进程被称作父进程，而这个进程则相应地被称作子进程。子进程使用 PPID 指出谁是其“父亲”，很容易可以理解，PPID 就等于其父进程的 PID。</p>
<p>在刚才的叙述中，多次用到了“创建”这个词，这是出于表述和理解上的方便。事实上在 Linux 中，进程是不能被“凭空”创建的。也就是说，Linux 并没有提供一种系统调用让应用程序“创建”一个进程。应用程序只能通过克隆自已来产生新进程。因此，子进程应该是其父进程的克隆体。所以 Gra-Gra-Gra Father 是🤓？</p>
<h3 id="UID-和-EUID：真实和有效的用户-ID"><a href="#UID-和-EUID：真实和有效的用户-ID" class="headerlink" title="UID 和 EUID：真实和有效的用户 ID"></a>UID 和 EUID：真实和有效的用户 ID</h3><p>只有进程的创建者和 root 用户才有权利对该进程进行操作。于是，记录一个进程的创建者(也就是属主)就显得非常必要。进程的 UID 就是其创建者的用户 ID 号，用于标识进程的属主。Linux 还为进程保存了一个“有效用户 ID 号”，被称作 EUID。这个特殊的 UID 号用来确定进程对某些资源和文件的访问权限。在绝大部分情况下，进程的 UID 和 EUID 是一样的，除了著名的 setuid 程序。</p>
<p>什么是 setuid 程序？用户管理中的 passwd 命令，这个命令允许用户修改自己的登录口令。但是密码保存在 /etc/shadow 文件中，这个文件对普通用户是不可读的，那么用户怎么能够通过修改 shadow 文件来修改自己的口令呢？这就是 setuid 的妙处了，通过使 passwd 在执行阶段具有文件所有者(也就是 root)的权限，让用户临时有了修改 shadow 文件的能力(当然这种能力是受到限制的)。因此，passwd 就是一个典型的 setuid 程序，其 UID 是当前执行这个命令的用户 ID，而 EUID 则是 root 用户的 ID (也就是0)。</p>
<h3 id="GID-和-EGID：真实和有效的组-ID"><a href="#GID-和-EGID：真实和有效的组-ID" class="headerlink" title="GID 和 EGID：真实和有效的组 ID"></a>GID 和 EGID：真实和有效的组 ID</h3><p>类似的，进程的 GID 就是其创建者所属组的 ID，EGID 可以通过 setgid 程序来设置。但好像日常没什么用~</p>
<h3 id="谦让度和优先级"><a href="#谦让度和优先级" class="headerlink" title="谦让度和优先级"></a>谦让度和优先级</h3><p>顾名思义，进程的优先级决定了其受到 CPU “优待”的程度。优先级高的进程能够更早地被处理，并获得更多的处理器时间。Linux 内核会综合考虑一个进程的各种因素来决定其优先级。这些因素包括进程已经消耗的 CPU 时间、进程已经等待的时间等。在绝大多数情况下，决定进程何时被处理是内核的事情，不需要用户插手。</p>
<p>用户可以通过设置进程的“谦让度”来影响内核的想法。“谦让度” 和“优先级”刚好是一对相反的概念，高“谦让度”意味着低“优先级”，反之亦然。需要注意的是，进程管理工具让用户设置的总是“谦让度”，而不是“优先级”。如果希望让一个进程更早地被处理，那么应该把它的谦让度设置得低一些，使其变得不那么“谦让”。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 学习笔记（三）- Shell 基础命令</title>
    <url>/2022/02/24/Linux_Shell1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="查看目录和文件"><a href="#查看目录和文件" class="headerlink" title="查看目录和文件"></a>查看目录和文件</h2><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><blockquote>
<p>显示当前所在的位置，即工作目录。</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">blog</span>@<span class="type">VM</span>-<span class="number">0</span>-<span class="number">13</span>-<span class="type">centos</span> ~]<span class="variable">$</span> <span class="built_in">pwd</span></span><br><span class="line">/home/blog</span><br></pre></td></tr></table></figure>

<h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><blockquote>
<p>改变目录。</p>
</blockquote>
<p>日常用法：<br><code>cd /home/blog</code> 进入 /home/blog 目录；<br><code>cd ..</code> 返回上一层目录；<br><code>cd /</code> 进入根目录，<code>cd .. / ..</code> 也是进入根目录；<br><code>cd</code> 不带参数总是可以回到自己用户的主目录，或者 <code>cd ~</code> 也是一样的效果。<br><strong>FYI</strong>：在 Shell 中，<code>..</code> 代表当前目录的上一级目录，而 <code>.</code> 则代表当前目录，另外，<code>~</code> 代表用户主目录。</p>
<span id="more"></span>

<h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><blockquote>
<p>列出目录内容。</p>
</blockquote>
<p>ls 是 list 的简写。常用选项：<br><code>ls</code> 不带参数时，会列出当前目录下的所有文件和子目录。默认情况下，目录显示为蓝色，普通文件显示为黑色，可执行文件显示为草绿色，淡蓝色则表示这个文件是一个链接文件(相当于 Windows 下的快捷方式)。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">blog</span>@<span class="type">VM</span>-<span class="number">0</span>-<span class="number">13</span>-<span class="type">centos</span> ~]<span class="variable">$</span> <span class="built_in">cd</span> /etc/</span><br><span class="line">[<span class="type">blog</span>@<span class="type">VM</span>-<span class="number">0</span>-<span class="number">13</span>-<span class="type">centos</span> <span class="type">etc</span>]<span class="variable">$</span> <span class="built_in">ls</span></span><br><span class="line">acpi                     e2fsck.conf    libreport                 pm              shells.rpmnew</span><br><span class="line">adjtime                  environment    libuser.conf              polkit<span class="literal">-1</span>        skel</span><br><span class="line">aliases                  ethertypes     locale.conf               popt.d          sos.conf</span><br><span class="line">alternatives             exports        localtime                 postfix         ssh</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p><code>ls -F</code> 用户也可以使用带 -F 选项的 ls 命令。可以看到，-F 选项会在每个目录后加上 /，在可执行文件后加 *，在链接文件后加上 @。这个选项在某些无法显示颜色的终端上会比较有用:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">blog</span>@<span class="type">VM</span>-<span class="number">0</span>-<span class="number">13</span>-<span class="type">centos</span> ~]<span class="variable">$</span> <span class="built_in">cd</span> /etc/</span><br><span class="line">[<span class="type">blog</span>@<span class="type">VM</span>-<span class="number">0</span>-<span class="number">13</span>-<span class="type">centos</span> <span class="type">etc</span>]<span class="variable">$</span> <span class="built_in">ls</span> <span class="operator">-F</span></span><br><span class="line">acpi/                    e2fsck.conf    libreport/                pm/              shells.rpmnew</span><br><span class="line">adjtime                  environment    libuser.conf              polkit<span class="literal">-1</span>/        skel/</span><br><span class="line">aliases                  ethertypes     locale.conf               popt.d/          sos.conf</span><br><span class="line">alternatives/            exports        localtime<span class="selector-tag">@</span>                postfix/         ssh/</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p><code>ls -a</code> 查看所有文件，包括隐藏文件。<br><code>ls -aF</code> 命令的选项也可以组合使用，只需要一个 <code>-</code> 符号：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">blog</span>@<span class="type">VM</span>-<span class="number">0</span>-<span class="number">13</span>-<span class="type">centos</span> <span class="type">etc</span>]<span class="variable">$</span> <span class="built_in">ls</span> <span class="literal">-aF</span></span><br><span class="line">./                       dracut.conf.d/  libreport/                polkit<span class="literal">-1</span>/        skel/</span><br><span class="line">../                      e2fsck.conf     libuser.conf              popt.d/          sos.conf</span><br><span class="line">acpi/                    environment     locale.conf               postfix/         ssh/</span><br><span class="line">adjtime                  ethertypes      localtime<span class="selector-tag">@</span>                ppp/             ssl/</span><br></pre></td></tr></table></figure>

<p><code>ls -l</code> 查看文件的属性，从左至右依次是：文件的权限标志；文件的链接个数；文件所有者的用户名；该用户所在的用户组；文件的大小；最后一次被修改的日期；文件名。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">blog</span>@<span class="type">VM</span>-<span class="number">0</span>-<span class="number">13</span>-<span class="type">centos</span> <span class="type">etc</span>]<span class="variable">$</span> <span class="built_in">ls</span> <span class="literal">-l</span></span><br><span class="line">总用量 <span class="number">1536</span></span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span>.  <span class="number">4</span> root root     <span class="number">4096</span> <span class="number">4</span>月  <span class="number">11</span> <span class="number">2018</span> acpi</span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-<span class="literal">-r</span>--.  <span class="number">1</span> root root       <span class="number">16</span> <span class="number">4</span>月  <span class="number">21</span> <span class="number">2016</span> adjtime</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p><code>ls [路径]</code> 路径作为参数，就是查看该子目录的内容：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">blog</span>@<span class="type">VM</span>-<span class="number">0</span>-<span class="number">13</span>-<span class="type">centos</span> ~]<span class="variable">$</span> <span class="built_in">ls</span> /etc/yum</span><br><span class="line">fssnap.d  pluginconf.d  protected.d  vars  version<span class="literal">-groups</span>.conf</span><br></pre></td></tr></table></figure>

<h3 id="dir-vdir"><a href="#dir-vdir" class="headerlink" title="dir/vdir"></a>dir/vdir</h3><p><code>dir</code> 类似 <code>ls</code>，<code>vdir</code> 类似 <code>ls -l</code>。</p>
<h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><blockquote>
<p>用于查看文件内容，后面跟文件名作为参数。</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cat</span> helloworld</span><br><span class="line"><span class="variable">$</span> <span class="built_in">cat</span> <span class="literal">-n</span> helloworld <span class="comment"># 带行号的 -n </span></span><br></pre></td></tr></table></figure>

<p>cat 会将文件的所有内容显示在屏幕上，那对于大文件来说，cat 显得毫无用处。</p>
<h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><blockquote>
<p>考虑到 cat 命令的缺点，Linux 提供了 more 命令一页一页的显示文件内容…</p>
</blockquote>
<p>&#8195;&#8195;可以看到，more 命令会在最后显示一个百分比，表示已显示内容占整个文件的比例，按下空格键向下翻动一页，按 Enter 键向下滚动一行，按 Q 键退出，或者滚到最后一行时自动就退出了。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> more <span class="number">404</span>.html</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD XHTML 1.1//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;html xmlns=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span> xml:lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;The page is not found&lt;/title&gt;</span><br><span class="line">        &lt;meta http<span class="literal">-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> /&gt;</span><br><span class="line">        &lt;style <span class="built_in">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">            /*&lt;![<span class="type">CDATA</span>[*/</span><br><span class="line">            <span class="type">body</span> &#123;</span><br><span class="line">                <span class="type">background</span>-<span class="type">color</span>: <span class="comment">#fff;</span></span><br><span class="line">                <span class="type">color</span>: <span class="comment">#000;</span></span><br><span class="line">                <span class="type">font</span>-<span class="type">size</span>: <span class="number">0.9</span><span class="type">em</span>;</span><br><span class="line">                <span class="type">font</span>-<span class="type">family</span>: <span class="type">sans</span>-<span class="type">serif</span>,<span class="type">helvetica</span>;</span><br><span class="line">                <span class="type">margin</span>: <span class="number">0</span>;</span><br><span class="line">                <span class="type">padding</span>: <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            :<span class="type">link</span> &#123;</span><br><span class="line">                <span class="type">color</span>: <span class="comment">#c00;</span></span><br><span class="line">            &#125;</span><br><span class="line">            :<span class="type">visited</span> &#123;</span><br><span class="line">                <span class="type">color</span>: <span class="comment">#c00;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">a</span>:<span class="type">hover</span> &#123;</span><br><span class="line">                <span class="type">color</span>: <span class="comment">#f50;</span></span><br><span class="line">            &#125;</span><br><span class="line">--<span class="type">More</span>--(<span class="number">41</span>%)</span><br></pre></td></tr></table></figure>

<h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><blockquote>
<p>显示文件的开头。</p>
</blockquote>
<h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><blockquote>
<p>显示文件的结尾。</p>
</blockquote>
<p>head 和 tail 可以使用 <code>-n</code> 参数指定显示的行数。默认不指定行数的话，我也不太清楚它显示的行数是根据什么判断的😂</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> head <span class="literal">-n</span> <span class="number">5</span> <span class="number">404</span>.html</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD XHTML 1.1//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;html xmlns=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span> xml:lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;The page is not found&lt;/title&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> tail <span class="literal">-n</span> <span class="number">5</span> <span class="number">404</span>.html</span><br><span class="line">                    width=<span class="string">&quot;88&quot;</span> height=<span class="string">&quot;31&quot;</span> /&gt;&lt;/a&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> head <span class="literal">-n</span> <span class="number">2</span> index.html search.xml</span><br><span class="line">==&gt; index.html &lt;==</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=zh&gt;</span><br><span class="line"></span><br><span class="line">==&gt; search.xml &lt;==</span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;search&gt;</span><br></pre></td></tr></table></figure>

<p>两个命令如果查看多个文件的话，默认会把文件名输出，放在 ==&gt; 和 &lt;== 之间。</p>
<h3 id="less"><a href="#less" class="headerlink" title="less"></a>less</h3><p>&#8195;&#8195;less 和 more 非常相似，但其功能更为强大。less 改进了 more 命令的很多细节，并添加了许多的特性。这些特性让 less 看起来更像是一个文本编辑器，只是去掉了文本编辑功能。总体来说，less 命令提供了下面这些增强功能：</p>
<ul>
<li>使用光标键在文本文件中前后(甚至左右)滚屏;</li>
<li>用行号或百分比作为书签浏览文件;</li>
<li>实现复杂的检索、高亮显示等操作;</li>
<li>兼容常用的字处理程序(如Emacs、Vim)的键盘操作;</li>
<li>阅读到文件结束时 less 命令不会退出，按 Q 键退出;</li>
<li>屏幕底部的信息提示更容易控制使用，而且提供了更多的信息。</li>
</ul>
<p>下面简单地介绍 less 命令的使用方法。以博客的 index.html 文件为例，执行 <code>less index.html</code> ：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=zh&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;!-- so meta --&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta http<span class="literal">-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;IE=edge&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;HandheldFriendly&quot;</span> content=<span class="string">&quot;True&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=5&quot;</span> /&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;description&quot;</span> content=<span class="string">&quot;能改变自己的都是神，想改变别人的都是神经病。&lt;U+1F34A&gt;&quot;</span>&gt;</span><br><span class="line">&lt;meta property=<span class="string">&quot;og:type&quot;</span> content=<span class="string">&quot;website&quot;</span>&gt;</span><br><span class="line">&lt;meta property=<span class="string">&quot;og:title&quot;</span> content=<span class="string">&quot;迷&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#此处省略一部分</span></span><br><span class="line">...</span><br><span class="line">        &lt;!-- mathjax --&gt;</span><br><span class="line"></span><br><span class="line">:</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;可以看到，less 在屏幕底部显示一个冒号“:”等待用户输入命令。如果想向下翻一页，可以按下<strong>空格键</strong>，如果想向上翻一页，按下 <strong>B 键</strong>，也可以用光标键向<strong>前、后、</strong>甚至<strong>左右</strong>移动。如果要在文件中搜索某一个字符串， 可以使用正斜杠<strong>“/”</strong>跟上想要查找的内容，less 会把找到的第一个搜索目标高亮显示，要继续查找相同的内容，只要<strong>再次输入</strong>正斜杠<strong>“/”</strong>，并按下回车键就可以了。<br>&#8195;&#8195;使用带 <code>-M</code> 参数可以显示更多文件信息，<code>less -M index.html</code> :</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=zh&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;!-- so meta --&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta http<span class="literal">-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;IE=edge&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;HandheldFriendly&quot;</span> content=<span class="string">&quot;True&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=5&quot;</span> /&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;description&quot;</span> content=<span class="string">&quot;能改变自己的都是神，想改变别人的都是神经病。&lt;U+1F34A&gt;&quot;</span>&gt;</span><br><span class="line">&lt;meta property=<span class="string">&quot;og:type&quot;</span> content=<span class="string">&quot;website&quot;</span>&gt;</span><br><span class="line"><span class="comment">#此处省略一部分</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">        &lt;!-- mathjax --&gt;</span><br><span class="line"></span><br><span class="line">index.html lines <span class="number">1</span><span class="literal">-48</span>/<span class="number">338</span> <span class="number">19</span>%</span><br></pre></td></tr></table></figure>

<p>可以看到 less 在底部显示了“文件名字 当前行数范围/总行数 当前位置占总文件的百分比”。</p>
<h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><blockquote>
<p>在很多时候，并不需要列出文件的全部内容，我们想做的可能只是找到包含某些关键信息的某几行。这个时候使用 more 命令肯定就很麻烦了，可以用 grep …</p>
</blockquote>
<p>命令格式：<code>grep [OPTION] PATTERN [FILE...]</code> 。还是以博客主页为例，我们搜索“能改变自己的都是神，想改变别人的都是神经病。🍊” ：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> grep 能改变自己的都是神，想改变别人的都是神经病。 index.html</span><br><span class="line">    &lt;meta name=<span class="string">&quot;description&quot;</span> content=<span class="string">&quot;能改变自己的都是神，想改变别人的都是神经病。🍊&quot;</span>&gt;</span><br><span class="line">&lt;meta property=<span class="string">&quot;og:description&quot;</span> content=<span class="string">&quot;能改变自己的都是神，想改变别人的都是神经病。🍊&quot;</span>&gt;</span><br><span class="line">    &lt;p&gt;能改变自己的都是神，想改变别人的都是神经病。🍊&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;把包含这行文字的标签都列出来了，并且在控制台是高亮显示的。<br>&#8195;&#8195;命令和参数是以空格来分割的，那如果我们想查找的关键字是 Red Hat 这种包含空格呢？这个时候必须用单引号把空格包含进去：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> grep <span class="string">&#x27;html lang=zh&#x27;</span> index.html</span><br><span class="line">&lt;html lang=zh&gt;</span><br></pre></td></tr></table></figure>

<p>和其他几个查看文件的命令一样，grep 也支持多个文件，并且在结果中列出文件名：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> grep 迷 index.html search.xml</span><br><span class="line">index.html:&lt;meta property=<span class="string">&quot;og:title&quot;</span> content=<span class="string">&quot;迷&quot;</span>&gt;</span><br><span class="line">index.html:&lt;meta property=<span class="string">&quot;og:site_name&quot;</span> content=<span class="string">&quot;迷&quot;</span>&gt;</span><br><span class="line">index.html:    &lt;title&gt;迷&lt;/title&gt;</span><br><span class="line">index.html:      &lt;h1&gt;迷&lt;/h1&gt;</span><br><span class="line">search.xml:&lt;li&gt;法号：迷&lt;/li&gt;</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;严格地说，grep 通过“基础正则表达式(basic regular expression)”进行搜索，和 grep 相关的一个工具是 egrep，除了使用“扩展的正则表达式(extended regular expression)”，egrep 和 grep 完全一样， “ 扩展正则表达式”能够提供比“基础正则表达式”更完整地表达规范。正则表达式我还没太学会…🤓</p>
<h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><blockquote>
<p>迅速在指定范围内查找到文件。</p>
</blockquote>
<p>find 命令的基本语法：<code>find [OPTION] [path...] [expression]</code><br>例如在 usr/bin/ 目录中查找 zip 命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> find /usr/bin/ <span class="literal">-name</span> zip <span class="literal">-print</span></span><br><span class="line">/usr/bin/zip</span><br></pre></td></tr></table></figure>

<p>也可以使用通配符 * 指定文件名，例如查找类型为 go 的文件：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> find / <span class="literal">-name</span> *.go <span class="literal">-print</span></span><br><span class="line">/usr/share/doc/git<span class="literal">-1</span>.<span class="number">8.3</span>.<span class="number">1</span>/contrib/persistent<span class="literal">-https</span>/client.go</span><br><span class="line">/usr/share/doc/git<span class="literal">-1</span>.<span class="number">8.3</span>.<span class="number">1</span>/contrib/persistent<span class="literal">-https</span>/main.go</span><br><span class="line">find: ‘/usr/share/polkit<span class="literal">-1</span>/rules.d’: 权限不够</span><br><span class="line">find: ‘/home/tommy’: 权限不够</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;对于提示“权限不够（Permission denied）”的目录，说明当前登录的用户没有权限进入这两个目录，find 在扫描时会跳过这两个目录。<br>&#8195;&#8195;find命令还能够指定文件的类型。在Linux中，包括目录和设备都以文件的形式表现，可以使用 <code>-type</code> 选项来定位特殊文件类型。例如，在 /etc/ 目录中查找名叫 init.d 的目录:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> find /etc/ <span class="literal">-name</span> init.d <span class="literal">-type</span> d <span class="literal">-print</span></span><br><span class="line">find: /etc/ssl/private: Permission denied</span><br><span class="line">find: /etc/cups/ssl: Permission denied</span><br><span class="line">/etc/ init.d</span><br></pre></td></tr></table></figure>

<p><code>-type</code> 选项可以使用的参数：</p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">含义</th>
<th align="center">参数</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">b</td>
<td align="center">块设备文件</td>
<td align="center">f</td>
<td align="center">普通文件</td>
</tr>
<tr>
<td align="center">c</td>
<td align="center">字符设备文件</td>
<td align="center">p</td>
<td align="center">命名管道</td>
</tr>
<tr>
<td align="center">d</td>
<td align="center">目录文件</td>
<td align="center">l</td>
<td align="center">符号链接</td>
</tr>
</tbody></table>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> find -<span class="literal">-help</span></span><br><span class="line">用法: find [-<span class="type">H</span>] [-<span class="type">L</span>] [-<span class="type">P</span>] [-<span class="type">Olevel</span>] [-<span class="type">D</span> <span class="type">help</span>|<span class="type">tree</span>|<span class="type">search</span>|<span class="type">stat</span>|<span class="type">rates</span>|<span class="type">opt</span>|<span class="type">exec</span>] [<span class="type">path...</span>] [<span class="type">expression</span>]</span><br><span class="line"></span><br><span class="line">默认路径为当前目录；默认表达式为 <span class="literal">-print</span></span><br><span class="line">表达式可能由下列成份组成：操作符、选项、测试表达式以及动作：</span><br><span class="line"></span><br><span class="line">操作符 (优先级递减；未做任何指定时默认使用 <span class="operator">-and</span>):</span><br><span class="line">      ( EXPR )   ! EXPR   <span class="operator">-not</span> EXPR   EXPR1 <span class="literal">-a</span> EXPR2   EXPR1 <span class="operator">-and</span> EXPR2</span><br><span class="line">      EXPR1 <span class="literal">-o</span> EXPR2   EXPR1 <span class="operator">-or</span> EXPR2   EXPR1 , EXPR2</span><br><span class="line"></span><br><span class="line">positional options (always true): <span class="literal">-daystart</span> <span class="literal">-follow</span> <span class="literal">-regextype</span></span><br><span class="line"></span><br><span class="line">normal options (always true, specified before other expressions):</span><br><span class="line">      <span class="literal">-depth</span> -<span class="literal">-help</span> <span class="literal">-maxdepth</span> LEVELS <span class="literal">-mindepth</span> LEVELS <span class="literal">-mount</span> <span class="literal">-noleaf</span></span><br><span class="line">      -<span class="literal">-version</span> <span class="literal">-xautofs</span> <span class="literal">-xdev</span> <span class="literal">-ignore_readdir_race</span> <span class="literal">-noignore_readdir_race</span></span><br><span class="line"></span><br><span class="line">比较测试 (N 可以是 +N 或 <span class="literal">-N</span> 或 N): <span class="literal">-amin</span> N <span class="literal">-anewer</span> FILE <span class="literal">-atime</span> N <span class="literal">-cmin</span> N</span><br><span class="line">      <span class="literal">-cnewer</span> 文件 <span class="literal">-ctime</span> N <span class="literal">-empty</span> <span class="literal">-false</span> <span class="literal">-fstype</span> 类型 <span class="literal">-gid</span> N <span class="literal">-group</span> 名称</span><br><span class="line">      <span class="literal">-ilname</span> 匹配模式 <span class="literal">-iname</span> 匹配模式 <span class="literal">-inum</span> N <span class="literal">-ipath</span> 匹配模式 <span class="literal">-iregex</span> 匹配模式</span><br><span class="line">      <span class="literal">-links</span> N <span class="literal">-lname</span> 匹配模式 <span class="literal">-mmin</span> N <span class="literal">-mtime</span> N <span class="literal">-name</span> 匹配模式 <span class="literal">-newer</span> 文件</span><br><span class="line">      <span class="literal">-nouser</span> <span class="literal">-nogroup</span> <span class="literal">-path</span> PATTERN <span class="literal">-perm</span> [-/]MODE <span class="operator">-regex</span> PATTERN</span><br><span class="line">      <span class="literal">-readable</span> <span class="literal">-writable</span> <span class="literal">-executable</span></span><br><span class="line">      <span class="literal">-wholename</span> PATTERN <span class="literal">-size</span> N[<span class="type">bcwkMG</span>] <span class="literal">-true</span> <span class="literal">-type</span> [<span class="type">bcdpflsD</span>] <span class="literal">-uid</span> N</span><br><span class="line">      <span class="literal">-used</span> N <span class="literal">-user</span> NAME <span class="literal">-xtype</span> [<span class="type">bcdpfls</span>]</span><br><span class="line">      <span class="literal">-context</span> 文本</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">操作: <span class="literal">-delete</span> <span class="literal">-print0</span> <span class="literal">-printf</span> 格式 <span class="literal">-fprintf</span> 文件 格式 <span class="literal">-print</span></span><br><span class="line">      <span class="literal">-fprint0</span> 文件 <span class="literal">-fprint</span> 文件 <span class="literal">-ls</span> <span class="literal">-fls</span> 文件 <span class="literal">-prune</span> <span class="literal">-quit</span></span><br><span class="line">      <span class="literal">-exec</span> 命令 ; <span class="literal">-exec</span> 命令 &#123;&#125; + <span class="literal">-ok</span> 命令 ;</span><br><span class="line">      <span class="literal">-execdir</span> 命令 ; <span class="literal">-execdir</span> 命令 &#123;&#125; + <span class="literal">-okdir</span> 命令 ;</span><br></pre></td></tr></table></figure>

<h3 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h3><blockquote>
<p>如果我们不记得文件具体在哪个位置，又非常需要找到它，find 就略显尴尬了，locate 会是个不错的选择。</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> locate <span class="number">404</span>.html</span><br><span class="line">/<span class="number">404</span>.html</span><br><span class="line">/usr/share/nginx/html/<span class="number">404</span>.html</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;“这些搜索结果几乎是一瞬间就出现了。这不禁让人疑惑，locate 究竟是如何做到这一点的？事实上，locate 并没有进入子目录搜索，它有一点类似于 Google 的桌面搜索，通过检索文件名数据库来确定文件的位置。locate 命令自动建立整个文件名数据库，不需要用户插手。如果希望立刻生成该数据库文件的最新版本，那么可以使用 updatedb 命令，运行这个命令需要有 root 权限，更新整个数据库大概耗时1分钟。” 以上这段是书上的描述，在我的虚拟机上没有用时1分钟，很快。然后在 Mac OS (衍生自 Unix) 首次使用 locate 命令时，提示我们需要手动建立文件名数据库：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> locate <span class="string">&#x27;Linux 从入门到精通&#x27;</span></span><br><span class="line"></span><br><span class="line">WARNING: The locate database (/var/db/locate.database) does not exist.</span><br><span class="line">To create the database, run the following command:</span><br><span class="line"></span><br><span class="line">  sudo launchctl load <span class="literal">-w</span> /System/Library/LaunchDaemons/com.apple.locate.plist</span><br><span class="line"></span><br><span class="line">Please be aware that the database can take some time to generate; once</span><br><span class="line">the database has been created, this message will no longer appear.</span><br></pre></td></tr></table></figure>

<h2 id="查找命令和系统信息"><a href="#查找命令和系统信息" class="headerlink" title="查找命令和系统信息"></a>查找命令和系统信息</h2><h3 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h3><blockquote>
<p>whereis 命令主要用于查找程序文件，并提供这个文件的二进制可执行文件、源代码文件和使用手册页存放的位置。</p>
</blockquote>
<p>例如，查找刚刚用到的 locate 命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> whereis locate</span><br><span class="line">locate: /usr/bin/locate /usr/share/<span class="built_in">man</span>/man1/locate.<span class="number">1</span>.gz</span><br></pre></td></tr></table></figure>

<p>如果只想查找可执行文件，可以使用 <code>-b</code> 选项：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> whereis <span class="literal">-b</span> find</span><br><span class="line">find: /usr/bin/find</span><br></pre></td></tr></table></figure>

<p>这样有点儿类似于 which 命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> which locate</span><br><span class="line">/usr/bin/locate</span><br></pre></td></tr></table></figure>

<h3 id="who"><a href="#who" class="headerlink" title="who"></a>who</h3><blockquote>
<p>查看当前系统中有哪些人登录，以及工作在哪个控制台上。</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> who</span><br><span class="line">tommy   pts/<span class="number">0</span>        <span class="number">2022</span><span class="literal">-03</span><span class="literal">-11</span> <span class="number">15</span>:<span class="number">07</span> (<span class="number">0.0</span>.<span class="number">0.0</span>)</span><br><span class="line">tommy   pts/<span class="number">1</span>        <span class="number">2022</span><span class="literal">-03</span><span class="literal">-11</span> <span class="number">16</span>:<span class="number">17</span> (<span class="number">0.0</span>.<span class="number">0.0</span>)</span><br></pre></td></tr></table></figure>

<h3 id="whoami"><a href="#whoami" class="headerlink" title="whoami"></a>whoami</h3><blockquote>
<p>我是谁？有些时候，可能会忘记自己是以什么身份登录到系统，特别当需要以特定身份启动某个服务器程序时。</p>
</blockquote>
<h3 id="uname"><a href="#uname" class="headerlink" title="uname"></a>uname</h3><blockquote>
<p> 用于显示当前系统的版本信息。带 -a 选项的 uname 命令会给出当前操作系统的所有有用信息。</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> uname <span class="literal">-a</span></span><br><span class="line">Linux VM<span class="literal">-0</span><span class="literal">-13</span><span class="literal">-centos</span> <span class="number">3.10</span>.<span class="number">0</span><span class="literal">-1160</span>.<span class="number">31.1</span>.el7.x86_64 <span class="comment">#1 SMP Thu Jun 10 13:32:12 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure>

<p>在大部分时候，需要的只是其中的内核版本信息。此时可以使用 -r 选项。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> uname <span class="literal">-r</span></span><br><span class="line"><span class="number">3.10</span>.<span class="number">0</span><span class="literal">-1160</span>.<span class="number">31.1</span>.el7.x86_64</span><br></pre></td></tr></table></figure>

<h3 id="man"><a href="#man" class="headerlink" title="man"></a>man</h3><blockquote>
<p>在 Linux 中获取帮助是一件非常容易的事情。Linux 为几乎每一个命令和系统调用编写了帮助手册。使用man命令可以方便地获取某个命令的帮助信息。</p>
</blockquote>
<p>以前查看命令的帮助，一般使用 <code>--help</code> 选项，但是 man 命令获取到的帮助信息明显“好看”多了。那我们看看 <code>man man</code> 是什么吧，哈哈哈</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">MAN</span>(<span class="number">1</span>)                                        Manual pager utils                                       <span class="built_in">MAN</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">       <span class="built_in">man</span> - an interface to the on<span class="literal">-line</span> reference manuals</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       <span class="built_in">man</span>  [-<span class="type">C</span> <span class="type">file</span>] [-<span class="type">d</span>] [-<span class="type">D</span>] [--<span class="type">warnings</span>[=<span class="type">warnings</span>]] [-<span class="type">R</span> <span class="type">encoding</span>] [-<span class="type">L</span> <span class="type">locale</span>] [-<span class="type">m</span> <span class="type">system</span>[,<span class="type">...</span>]] [-<span class="type">M</span> <span class="type">path</span>]</span><br><span class="line">       [-<span class="type">S</span> <span class="type">list</span>] [-<span class="type">e</span> <span class="type">extension</span>] [-<span class="type">i</span>|-<span class="type">I</span>] [--<span class="type">regex</span>|--<span class="type">wildcard</span>] [--<span class="type">names</span>-<span class="type">only</span>]  [-<span class="type">a</span>]  [-<span class="type">u</span>]  [--<span class="type">no</span>-<span class="type">subpages</span>]  [-<span class="type">P</span></span><br><span class="line">       <span class="type">pager</span>]  [-<span class="type">r</span>  <span class="type">prompt</span>]  [-<span class="number">7</span>]  [-<span class="type">E</span>  <span class="type">encoding</span>]  [--<span class="type">no</span>-<span class="type">hyphenation</span>]  [--<span class="type">no</span>-<span class="type">justification</span>]  [-<span class="type">p</span> <span class="built_in">string</span>] [-<span class="type">t</span>]</span><br><span class="line">       [-<span class="type">T</span>[<span class="type">device</span>]] [-<span class="type">H</span>[<span class="type">browser</span>]] [-<span class="type">X</span>[<span class="type">dpi</span>]] [-<span class="type">Z</span>] [[<span class="type">section</span>] <span class="type">page</span> <span class="type">...</span>] ...</span><br><span class="line">       <span class="built_in">man</span> <span class="literal">-k</span> [<span class="type">apropos</span> <span class="type">options</span>] regexp ...</span><br><span class="line">       <span class="built_in">man</span> <span class="literal">-K</span> [-<span class="type">w</span>|-<span class="type">W</span>] [-<span class="type">S</span> <span class="type">list</span>] [-<span class="type">i</span>|-<span class="type">I</span>] [--<span class="type">regex</span>] [<span class="type">section</span>] term ...</span><br><span class="line">       <span class="built_in">man</span> <span class="operator">-f</span> [<span class="type">whatis</span> <span class="type">options</span>] page ...</span><br><span class="line">       <span class="built_in">man</span> <span class="literal">-l</span> [-<span class="type">C</span> <span class="type">file</span>] [-<span class="type">d</span>] [-<span class="type">D</span>] [--<span class="type">warnings</span>[=<span class="type">warnings</span>]] [-<span class="type">R</span> <span class="type">encoding</span>] [-<span class="type">L</span> <span class="type">locale</span>] [-<span class="type">P</span>  <span class="type">pager</span>]  [-<span class="type">r</span>  <span class="type">prompt</span>]</span><br><span class="line">       [-<span class="number">7</span>] [-<span class="type">E</span> <span class="type">encoding</span>] [-<span class="type">p</span> <span class="built_in">string</span>] [-<span class="type">t</span>] [-<span class="type">T</span>[<span class="type">device</span>]] [-<span class="type">H</span>[<span class="type">browser</span>]] [-<span class="type">X</span>[<span class="type">dpi</span>]] [-<span class="type">Z</span>] file ...</span><br><span class="line">       <span class="built_in">man</span> <span class="literal">-w</span>|<span class="literal">-W</span> [-<span class="type">C</span> <span class="type">file</span>] [-<span class="type">d</span>] [-<span class="type">D</span>] page ...</span><br><span class="line">       <span class="built_in">man</span> <span class="literal">-c</span> [-<span class="type">C</span> <span class="type">file</span>] [-<span class="type">d</span>] [-<span class="type">D</span>] page ...</span><br><span class="line">       <span class="built_in">man</span> [-?<span class="type">V</span>]</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">...</span><br><span class="line">Manual page <span class="built_in">man</span>(<span class="number">1</span>) line <span class="number">1</span> (press <span class="built_in">h</span> <span class="keyword">for</span> help or q to quit)</span><br></pre></td></tr></table></figure>

<p>看到最后一行，是不是觉得眼熟，less … so…man 命令在显示手册页时实际调用的是 less 程序。</p>
<h3 id="whatis"><a href="#whatis" class="headerlink" title="whatis"></a>whatis</h3><blockquote>
<p>man 手册中的长篇大论有时候显得太哕嗦了一很多情况下，人们只是想要知道一个命令大概可以做些什么。于是，whatis 满足了大家的好奇心。whatis 从某个程序的使用手册页中抽出一行简单的介绍性文字，帮助用户了解这个程序的大致用途。whatis 的原理同 locate 命令基本一致。</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> whatis uname</span><br><span class="line">uname (<span class="number">1</span>)            - print system information</span><br></pre></td></tr></table></figure>

<p>我发现 Linux 的命令有意思的一点是“我否定我自己，我完善我自己” 。😂</p>
<h3 id="apropos"><a href="#apropos" class="headerlink" title="apropos"></a>apropos</h3><blockquote>
<p>和 whatis 相反，通过搜索使用手册中的关键字，帮我们反查到想要的命令。</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> apropos search</span><br><span class="line">apropos (<span class="number">1</span>)          - search the manual page names and descriptions</span><br><span class="line">ausearch (<span class="number">8</span>)         - a tool to query audit daemon logs</span><br><span class="line">au<span class="built_in">search-expression</span> (<span class="number">5</span>) - audit search expression format</span><br><span class="line">badblocks (<span class="number">8</span>)        - search a device <span class="keyword">for</span> bad blocks</span><br><span class="line">bzgrep (<span class="number">1</span>)           - search possibly bzip2 compressed files <span class="keyword">for</span> a regular expression</span><br><span class="line">find (<span class="number">1</span>)             - search <span class="keyword">for</span> files <span class="keyword">in</span> a directory hierarchy</span><br><span class="line">git<span class="literal">-bisect</span> (<span class="number">1</span>)       - Find by binary search the change that introduced a bug</span><br><span class="line">manpath (<span class="number">1</span>)          - determine search path <span class="keyword">for</span> manual pages</span><br><span class="line">npm<span class="literal">-help</span><span class="literal">-search</span> (<span class="number">1</span>)  - Search npm help documentation</span><br><span class="line">npm<span class="literal">-search</span> (<span class="number">1</span>)       - Search <span class="keyword">for</span> packages</span><br><span class="line">oldfind (<span class="number">1</span>)          - search <span class="keyword">for</span> files <span class="keyword">in</span> a directory hierarchy</span><br><span class="line">Pod::Simple::Search (<span class="number">3</span>pm) - find POD documents <span class="keyword">in</span> directory trees</span><br><span class="line">Search::Dict (<span class="number">3</span>pm)   - look - search <span class="keyword">for</span> key <span class="keyword">in</span> dictionary file</span><br><span class="line">vgscan (<span class="number">8</span>)           - Search <span class="keyword">for</span> all volume groups</span><br><span class="line">xzegrep (<span class="number">1</span>)          - search compressed files <span class="keyword">for</span> a regular expression</span><br><span class="line">xzfgrep (<span class="number">1</span>)          - search compressed files <span class="keyword">for</span> a regular expression</span><br><span class="line">xzgrep (<span class="number">1</span>)           - search compressed files <span class="keyword">for</span> a regular expression</span><br><span class="line">zgrep (<span class="number">1</span>)            - search possibly compressed files <span class="keyword">for</span> a regular expression</span><br><span class="line">zipgrep (<span class="number">1</span>)          - search files <span class="keyword">in</span> a ZIP archive <span class="keyword">for</span> lines matching a pattern</span><br></pre></td></tr></table></figure>

<hr>
<p>基础的 Shell 命令暂时学到这里。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>有时候，爱是一种错觉</title>
    <url>/2021/05/07/Love/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这篇文章的作者是周国平：</p>
<hr>
<p><strong>有时候，爱是一种错觉</strong></p>
<p>你翻阅他的人生履历，追寻着他的足迹，感受着他的喜怒哀乐，并为着他的开心而开心，为着他的忧郁而忧郁。<br>你以为这就是爱了。<br>你读他的文字，欣赏着他的才气，喜欢听他的言谈欢笑，喜欢贴近他的感觉，甚至为着他愿意与你说话，而欣喜异常。<br>你以为这就是爱了。<br>你对自己说你是愿意做他的新娘，愿意与他携手百年，愿意为他置一处温暖的家，让他从此不再漂泊，愿意为他生儿育女共享天伦。<br>你以为这就是爱了。</p>
<span id="more"></span>

<p>不可否认，你的确对他动情动心了。<br>只是，某一天，当他离你而去，最开初，你有过思念，有过失落，甚至有过惆怅与痛楚。但是，随后的日子，你忘记得很快。另一处风景闯入你的视野，代替了先前所有的思念，你觉得相形之下，你更爱眼前的风景。<br>你欣赏着眼前这个他，喜欢着眼前这个他，并时常幻想着与这个他共结连理。亦如当初对先前的他，感觉是惊人的相似。<br>这个时候，偶尔想起先前的他，你只是笑笑，笑自己当初的幼稚与天真，你说，那不是爱，那只是自己给自己编织的情网，你喜欢垂钓爱情，钓的是自己的感觉和自己的血肉。<br>可是，你又如何把握眼前这一份感觉，就真的是爱了呢？<br>或许，你喜欢的只是他头上的光环，喜欢的只是打败身边那些仰慕者的感觉。<br>因为年轻，你耐不住寂寞；因为年轻，你争强好胜；因为年轻，你酷爱着征服。你用征服男人，来见证着你的魅力；征服男人，也带给你做女人的快乐。<br>正如某人所说，<strong>你爱的不是他这个人本身，而是恋爱的感觉</strong>，你需要有一种恋爱的味道、恋爱的气息、恋爱的热闹，充斥你年轻的生命过程，消耗你过剩的精力。因此，你不断的制造着爱的对象，制造着爱的感觉，你爱着爱他的感觉，爱着想念他的味道，爱着为他写情书的激动，同时也爱着被他冷落、被他粗暴的教训的酸涩，爱着因为他喜欢众多女人和众多女人喜欢他而引发的醋味。你沉迷在这种爱的痛快之中，无法自拔。<br><strong>这，其实是爱的错觉。</strong><br>爱的错觉，让你忽略了一样，最现实的一样，那便是与他真实相守一辈子，那些平平淡淡岁月里，柴米油盐的琐碎；那些风霜雪雨来临时，生命要承受的刀光剑影。对这些，你没有想过，或许你想过，却只是轻描淡写的以为那很简单。<br>在你看来，有爱就够了。<br>可是，有爱是绝对不够的。纸上谈兵似的恋情，无异于画饼充饥；只沉浸在甜言蜜语中的恋情，经不起时间和霜雪考验。<br>爱的错觉是一场爱的作秀，在某个时候，会切割青春，会捣碎你美好的理想，然后把灰暗的色泽涂抹在你生命的天空，以至于影响到你以后的爱情观价值观人生。更有甚者，你或许还会把这种错觉变成一把利刃，在你自以为爱着的人身上，留下深深的创口。是的，爱的错觉往往在你的爱没有得到你渴望得到的回应时，变成怨恨，既而在某一段时间，那个你自以为深爱的人，会沦为你诅咒的对象。大凡成不了恋人，便成为仇敌，都是爱的错觉下的畸形产物。<br>爱源于一种感觉，这感觉有些像海市蜃楼，美则美已，却太虚幻。<br>是的，说爱是很容易的事情，写一封情书也不是很难，作出一个爱的口头承诺也仅仅是开出一张空头支票。<br>或许你精于的其实只是恋爱的技巧，你自以为成熟的只是将爱写成词，谱成曲，然后非常张扬的放声歌唱。可是，你是否知道，爱的过程却是长久的跋涉，除了花前月下，除了卿卿我我，除了肌肤上的亲吻爱抚，还有义务、责任，那些东西看起来一点儿也不浪漫，甚至是沉重的，却需要你付出毕生的精力；你是否知道，最真实动人的情书，不是写在纸上，不是唱在嘴里，却是付印在你每天为你和他组合的那个家的操劳之中。<br>因此，真正的恋爱，是从组合了家才开始的，开初的一切，都只是爱的序幕，厚实而精彩的内容，在以后的章节。<br>那么，当你以为自己爱了的时候，不妨让自己暂时的远离，把心里升腾的爱火人为的灭一灭，然后重新打量你自以为爱着的对象，看看自己是不是具有足够懂得他的能力，至少是不是愿意努力的去了解他、理解他，并始终欣赏着他。<br><strong>然后，你还需把他所有的优点全部抛开，只看他的缺点，并尽可能放大他的缺点，再问问自己，你能不能够包容？在今后的岁月里，你会不会因了他的这些缺点不仅没有改变，反而膨涨，而轻易的离弃？你是否愿意无论贫富、疾病、环境恶劣、人生失意失利，都一心一意忠贞不渝地爱护他，在人生的旅程中永远与他心心相印相依相偎，直至白头偕老？</strong><br>请把每种情形都好好的思虑一遍，并认真的在心里演绎一次。</p>
<p>然后你可以作出肯定或否定的回答了。</p>
<hr>
]]></content>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 学习笔记（一）- 用户</title>
    <url>/2022/02/18/Linux_user/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p>&#8195;&#8195;一直想学习 Linux，但无奈小白不知道从何入手。经常看群里服务端的同事提到 root 、sudo，那我想着从用户管理入手，先认清楚大小王总是可以的吧，趁工作的空档学习了一些基本知识，大部分描述来自于《Linux从入门到精通》一书。</p>
<p>记录一下尝试过的命令：</p>
<h2 id="root-可以做什么"><a href="#root-可以做什么" class="headerlink" title="root 可以做什么"></a>root 可以做什么</h2><p>&#8195;&#8195;这个问题的答案是 anything。没错，作为整个系统中拥有最高权限的用户，root 可以对系统做任何事情。root 可以访问、修改、删除系统中的任何文件和目录。另外，对于如下这些受限的操作，一般只有 root 用户能够执行。</p>
<ul>
<li>添加删除用户;</li>
<li>安装软件;</li>
<li>添加删除设备;</li>
<li>启动和停止网络服务;</li>
<li>某些系统调用(例如对内核的请求);</li>
<li>关闭系统。</li>
</ul>
<p><strong>提示</strong>：像“关闭系统”这样的操作都需要 root 用户来执行，看起来是一件特别古怪的事情。事实上，作为 Linux 的祖先，UNIX 是一种典型的服务器操作系统。而服务器的关闭和启动都必须得到管理员的授权(试想一个普通用户登录服务器，然后随意执行关机命令会怎样)。出于操作简易性的考虑，桌面版的 Linux 允许普通用户在图形界面下关闭系统。但在命令行下执行关机命令仍然需要 root 口令。Linux 系统上的每个文件和目录都属于某个特定的用户，没有得到许可，其他用户就不能访问这些对象。但 root 用户却可以访问所有用户的文件，就像使用自己的东西一样。</p>
<p>&#8195;&#8195;系统不会因为用户输入的命令足够“愚蠢”而拒绝执行。相反，系统会美滋滋地执行这样一条命令，然后把自己完完整整地删除了，例如江湖传说：<code>rm -rf /*</code>。</p>
<center>
    <div style="display:inline-block;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/Dont-drink-and-root.jpeg" class width="300"></div>
</center>

<span id="more"></span>

<p>So… <strong>Don’t drink and root.</strong> 日常工作、学习都尽量建立自己专属的用户来操作系统，这应该是个好习惯吧，没必要冒没必要的险🤓~</p>
<h3 id="root-口令"><a href="#root-口令" class="headerlink" title="root 口令"></a>root 口令</h3><blockquote>
<p>仅在必要的时候才使用 root 账号，例如新建普通用户。</p>
</blockquote>
<h3 id="su"><a href="#su" class="headerlink" title="su"></a>su</h3><p>用户可以执行不带参数的 <code>su</code> 命令将自己提升至 root 权限，需要 root 口令。</p>
<h3 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h3><p>可以临时使用 root 身份运行一个程序，并在程序执行完毕后返回普通用户权限。<code>sudo -s</code> 将自己提升为 root 用户，等同于 <code>su</code>，<code>exit</code> 回到先前的用户状态。</p>
<h2 id="用户与用户组"><a href="#用户与用户组" class="headerlink" title="用户与用户组"></a>用户与用户组</h2><p>Linux 可以允许多个用户同时登录到系统上，并响应每一个用户的请求。系统管理员的权限：</p>
<ul>
<li>添加和删除用户</li>
<li>分配用户主目录</li>
<li>限制用户的权限</li>
</ul>
<p>&#8195;&#8195;Linux 为每一个用户启动一个进程，然后由这个进程接受用户的各种请求。对于用户组权限，组员自动拥有组的权限。多人协作的项目，定义一个组非常有用。<br>&#8195;&#8195;在某些服务器程序安装时，会生成一些特定的用户和用户组，用于对服务器进行管理。例如，可以使用 mysql 用户启动和停止 MySQL 服务器，还有 nginx 等等。之所以不用 root 用户启动某些服务，主要是出于安全性的考虑。</p>
<h2 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h2><blockquote>
<p>添加用户</p>
</blockquote>
<ul>
<li>添加名为 tommy 的用户，并自动建立主目录：</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">useradd <span class="literal">-m</span> tommy</span><br></pre></td></tr></table></figure>

<ul>
<li>更改 tommy 的登录密码：</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">passwd tommy</span><br></pre></td></tr></table></figure>

<ul>
<li>为某个组新建用户：建立名为 tommy 的账号，并指定其属于 guys 组：</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">useradd <span class="literal">-g</span> guys tommy</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;在用户建立的时候为其指定一个组看上去是一个很不错的想法。但遗憾的是，这样的设置增加了用户由于不经意间地设置权限而能够彼此读取文件的可能性，尽管这通常不是用户的本意。因此一个好的建议是，在新建用户的时候用户单独创建一个同名的用户组，然后把用户归入这个组。这正是不带 -g 参数的 useradd 命令的默认行为。</p>
<ul>
<li>建立名为 tommy 的用户，并指定其登录后使用 bash 作为 Shell：</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">useradd <span class="literal">-s</span> /bin/bash tommy</span><br></pre></td></tr></table></figure>

<p>参数选项：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-b</span>, -<span class="literal">-base</span><span class="literal">-dir</span> BASE_DIR <span class="comment">#..........新账户的主目录的基目录</span></span><br><span class="line"><span class="literal">-c</span>, -<span class="literal">-comment</span> COMMENT <span class="comment">#............新账户的 GECOS 字段</span></span><br><span class="line"><span class="literal">-d</span>, -<span class="literal">-home</span><span class="literal">-dir</span> HOME_DIR <span class="comment">#..........新账户的主目录</span></span><br><span class="line"><span class="literal">-D</span>, -<span class="literal">-defaults</span> <span class="comment">#...................显示或更改默认的 useradd 配置</span></span><br><span class="line"><span class="literal">-e</span>, -<span class="literal">-expiredate</span> EXPIRE_DATE <span class="comment">#.....新账户的过期日期</span></span><br><span class="line"><span class="operator">-f</span>, -<span class="literal">-inactive</span> INACTIVE <span class="comment">#..........新账户的密码不活动期</span></span><br><span class="line"><span class="literal">-g</span>, -<span class="literal">-gid</span> <span class="built_in">GROUP</span> <span class="comment">#..................新账户主组的名称或 ID</span></span><br><span class="line"><span class="literal">-G</span>, -<span class="literal">-groups</span> GROUPS <span class="comment">#..............新账户的附加组列表</span></span><br><span class="line"><span class="literal">-h</span>, -<span class="literal">-help</span> <span class="comment">#.......................显示此帮助信息并推出</span></span><br><span class="line"><span class="literal">-k</span>, -<span class="literal">-skel</span> SKEL_DIR <span class="comment">#..............使用此目录作为骨架目录</span></span><br><span class="line"><span class="literal">-K</span>, -<span class="literal">-key</span> KEY=VALUE <span class="comment">#..............不使用 /etc/login.defs 中的默认值</span></span><br><span class="line"><span class="literal">-l</span>, -<span class="literal">-no</span><span class="literal">-log</span><span class="literal">-init</span> <span class="comment">#................不要将此用户添加到最近登录和登录失败数据库</span></span><br><span class="line"><span class="literal">-m</span>, -<span class="literal">-create</span><span class="literal">-home</span> <span class="comment">#................创建用户的主目录</span></span><br><span class="line"><span class="literal">-M</span>, -<span class="literal">-no</span><span class="literal">-create</span><span class="literal">-home</span> <span class="comment">#.............不创建用户的主目录</span></span><br><span class="line"><span class="literal">-N</span>, -<span class="literal">-no</span><span class="literal">-user</span><span class="literal">-group</span> <span class="comment">#..............不创建同名的组</span></span><br><span class="line"><span class="literal">-o</span>, -<span class="literal">-non</span><span class="literal">-unique</span> <span class="comment">#.................允许使用重复的 UID 创建用户</span></span><br><span class="line"><span class="literal">-p</span>, -<span class="literal">-password</span> PASSWORD	<span class="comment">#..........加密后的新账户密码</span></span><br><span class="line"><span class="literal">-r</span>, -<span class="literal">-system</span> <span class="comment">#.....................创建一个系统账户</span></span><br><span class="line"><span class="literal">-R</span>, -<span class="literal">-root</span> CHROOT_DIR <span class="comment">#............chroot 到的目录</span></span><br><span class="line"><span class="literal">-P</span>, -<span class="literal">-prefix</span> PREFIX_DIR <span class="comment">#..........prefix directory where are located the /etc/* files</span></span><br><span class="line"><span class="literal">-s</span>, -<span class="literal">-shell</span> SHELL <span class="comment">#................新账户的登录 shell</span></span><br><span class="line"><span class="literal">-u</span>, -<span class="literal">-uid</span> UID <span class="comment">#....................新账户的用户 ID</span></span><br><span class="line"><span class="literal">-U</span>, -<span class="literal">-user</span><span class="literal">-group</span> <span class="comment">#.................创建与用户同名的组</span></span><br><span class="line"><span class="literal">-Z</span>, -<span class="literal">-selinux</span><span class="literal">-user</span> SEUSER <span class="comment">#........为 SELinux 用户映射使用指定 SEUSE</span></span><br></pre></td></tr></table></figure>

<h2 id="groupadd"><a href="#groupadd" class="headerlink" title="groupadd"></a>groupadd</h2><ul>
<li>添加一个名为 newgroup 的组。</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">groupadd newgroup</span><br></pre></td></tr></table></figure>

<h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><blockquote>
<p>Linux，准确地说是 Shell，会记录用户的每一条命令。history 可以查看自己曾经执行的操作。</p>
</blockquote>
<p>直接使用 <code>history</code> 会列出当前用户所有使用过的命令并加以编号。存储在用户主目录的 <code>.bash_history</code> 文件中，这个文件默认情况下可以存储1000条命令记录。</p>
<ul>
<li><code>history 10</code> 列出最近使用的10条命令</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">tommy</span>@<span class="type">VM</span>-<span class="number">0</span>-<span class="number">13</span>-<span class="type">centos</span> ~]<span class="variable">$</span> <span class="built_in">history</span> <span class="number">10</span></span><br><span class="line">   <span class="number">26</span>  <span class="number">2022</span><span class="literal">-02</span><span class="literal">-18</span> <span class="number">12</span>:<span class="number">30</span>:<span class="number">33</span> <span class="built_in">ls</span></span><br><span class="line">   <span class="number">27</span>  <span class="number">2022</span><span class="literal">-02</span><span class="literal">-18</span> <span class="number">12</span>:<span class="number">30</span>:<span class="number">40</span> <span class="built_in">cd</span> ../httpbin</span><br><span class="line">   <span class="number">28</span>  <span class="number">2022</span><span class="literal">-02</span><span class="literal">-18</span> <span class="number">12</span>:<span class="number">30</span>:<span class="number">43</span> <span class="built_in">ls</span></span><br><span class="line">   <span class="number">29</span>  <span class="number">2022</span><span class="literal">-02</span><span class="literal">-18</span> <span class="number">12</span>:<span class="number">31</span>:<span class="number">36</span> <span class="built_in">cd</span> ~</span><br><span class="line">   <span class="number">30</span>  <span class="number">2022</span><span class="literal">-02</span><span class="literal">-18</span> <span class="number">12</span>:<span class="number">31</span>:<span class="number">37</span> <span class="built_in">ls</span></span><br><span class="line">   <span class="number">31</span>  <span class="number">2022</span><span class="literal">-02</span><span class="literal">-18</span> <span class="number">12</span>:<span class="number">31</span>:<span class="number">40</span> git <span class="literal">-v</span></span><br><span class="line">   <span class="number">32</span>  <span class="number">2022</span><span class="literal">-02</span><span class="literal">-18</span> <span class="number">12</span>:<span class="number">31</span>:<span class="number">54</span> git -<span class="literal">-version</span></span><br><span class="line">   <span class="number">33</span>  <span class="number">2022</span><span class="literal">-02</span><span class="literal">-18</span> <span class="number">12</span>:<span class="number">32</span>:<span class="number">18</span> sudo git -<span class="literal">-version</span></span><br><span class="line">   <span class="number">34</span>  <span class="number">2022</span><span class="literal">-02</span><span class="literal">-21</span> <span class="number">13</span>:<span class="number">51</span>:<span class="number">28</span> <span class="built_in">history</span></span><br><span class="line">   <span class="number">35</span>  <span class="number">2022</span><span class="literal">-02</span><span class="literal">-21</span> <span class="number">13</span>:<span class="number">51</span>:<span class="number">32</span> <span class="built_in">history</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>history 命令仅在 BASH 中适用？？这个我还真不太清楚，像 Mac ZSH（Z-Shell）上是类似这样用 - <code>history -10</code>。<br>Linux 的许多操作都是针对文件的，所以也可以直接查看文件达到 history 的效果，eg:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /home/tommy/</span><br><span class="line">sudo <span class="built_in">cat</span> .bash_history</span><br></pre></td></tr></table></figure>

<p>.bash_history 对于其他受限用户是不可读的，这也正是为什么要使用 sudo 的原因。<br><strong>FYI</strong>：首次使用 sudo 命令会看到下面贴心的提示：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">tommy</span>@<span class="type">VM</span>-<span class="number">0</span>-<span class="number">13</span>-<span class="type">centos</span> ~]<span class="variable">$</span> sudo <span class="built_in">cd</span> /etc/</span><br><span class="line"></span><br><span class="line">	我们信任您已经从系统管理员那里了解了日常注意事项。</span><br><span class="line">	</span><br><span class="line">	总结起来无外乎这三点：</span><br><span class="line"></span><br><span class="line">	<span class="comment">#1) 尊重别人的隐私。</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">#2) 输入前要先考虑(后果和风险)。</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">#3) 权力越大，责任越大。</span></span><br><span class="line"></span><br><span class="line">[<span class="type">sudo</span>] tommy 的密码：</span><br><span class="line"></span><br><span class="line">tommy 不在 sudoers 文件中。此事将被报告。</span><br></pre></td></tr></table></figure>

<h2 id="etc-passwd"><a href="#etc-passwd" class="headerlink" title="/etc/passwd"></a>/etc/passwd</h2><p>在 Linux 中所做的一切基本配置最终都将反映到配置文件中，用户管理也不例外。所有的用户信息都登记在 /etc/passwd 文件中，而 /etc/shadow 文件则保存着用户的登录密码。</p>
<ul>
<li>passwd：所有用户可读，root 写；</li>
<li>shadow：root 读写。</li>
</ul>
<h2 id="us"><a href="#us" class="headerlink" title="us"></a>us</h2><blockquote>
<p>查看 shadow 文件的内容</p>
</blockquote>
<p><code>us</code> 命令可以得到 shadow 文件的内容，限于篇幅，我们举例说明：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root:<span class="variable">$1</span><span class="variable">$Bg1H</span>/<span class="number">4</span>mz<span class="variable">$X89TqH7tpi9dX1B9j5YsF</span>.:<span class="number">14838</span>:<span class="number">0</span>:<span class="number">99999</span>:<span class="number">7</span>:::</span><br></pre></td></tr></table></figure>

<p>其格式为：</p>
<p>{用户名}：{加密后的口令密码}：{口令最后修改时间距原点(1970-1-1)的天数}：{口令最小修改间隔(防止修改口令，如果时限未到，将恢复至旧口令)：{口令最大修改间隔}：{口令失效前的警告天数}：{账户不活动天数}：{账号失效天数}：{保留}<br>【注】：shadow 文件为可读文件，普通用户没有读写权限，超级用户拥有读写权限。如果密码字符串为*，则表示系统用户不能被登入；如果字符串为！，则表示用户名被禁用；如果字符串为空，则表示没有密码。<br>我们可以使用 <code>passwd –d 用户名</code> 清空一个用户的口令密码。</p>
<h2 id="userdel"><a href="#userdel" class="headerlink" title="userdel"></a>userdel</h2><blockquote>
<p>删除用户。</p>
</blockquote>
<ul>
<li>删除 tommy 这个用户，但默认情况下，并不会删除用户的主目录：</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">userdel tommy </span><br></pre></td></tr></table></figure>

<ul>
<li>删除账号的同时，删除其主目录：</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">userdel <span class="literal">-r</span> tommy  </span><br></pre></td></tr></table></figure>

<ul>
<li>未删除用户主目录，再次添加用户时的提示：</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">VM</span>-<span class="number">0</span>-<span class="number">13</span>-<span class="type">centos</span> ~]<span class="variable">$</span> useradd <span class="literal">-m</span> tommy</span><br><span class="line"></span><br><span class="line">	useradd：警告：此主目录已经存在。</span><br><span class="line"></span><br><span class="line">	不从 skel 目录里向其中复制任何文件。</span><br><span class="line"></span><br><span class="line">	正在创建信箱文件: 文件已存在</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;在删除用户的同时删除其主目录，以释放硬盘空间，这看起来无可厚非。但是，在输入 <code>-r</code> 选项 之前，仍有一个问题需要问问自己：需要这么着急吗？如果被删除的用户又要恢复，或者用户的某些文件还需要使用（这样的情况在服务器上经常出现），那么有必要暂时保留这些文件。比较妥当的方法是，将被删除的的用户主目录保留几周，然后再手动删除。在实际的工作环境中，这个做法显得尤为重要。</p>
<h2 id="usermod"><a href="#usermod" class="headerlink" title="usermod"></a>usermod</h2><blockquote>
<p>管理用户账号。</p>
</blockquote>
<p>常用选项：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-d</span>	<span class="comment"># 修改用户主目录</span></span><br><span class="line"><span class="literal">-e</span>	<span class="comment"># 修改账号的有效期限。以公元月/日/年的形式表示（MM/DD/YY）</span></span><br><span class="line"><span class="literal">-g</span>	<span class="comment"># 修改用户所属的组</span></span><br><span class="line"><span class="literal">-l</span>	<span class="comment"># 修改用户账号名称</span></span><br><span class="line"><span class="literal">-s</span>	<span class="comment"># 修改用户登录后所使用的的 Shell</span></span><br></pre></td></tr></table></figure>

<ul>
<li>把 john 改为 mike，有效期是 12/31/22 :</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">usermod <span class="literal">-l</span> mike <span class="literal">-d</span> /home/mike <span class="literal">-e</span> <span class="number">12</span>/<span class="number">31</span>/<span class="number">22</span> john</span><br></pre></td></tr></table></figure>

<ul>
<li>修改正在登录的用户，提示：</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">usermod: user tommy is currently used by <span class="keyword">process</span> <span class="number">28693</span></span><br></pre></td></tr></table></figure>

<p>参数选项：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-c</span>, -<span class="literal">-comment</span> <span class="comment">#....................注释 GECOS 字段的新值</span></span><br><span class="line"><span class="literal">-d</span>, -<span class="literal">-home</span> HOME_DIR <span class="comment">#..............用户的新主目录</span></span><br><span class="line"><span class="literal">-e</span>, -<span class="literal">-expiredate</span> EXPIRE_DATE <span class="comment">#.....设定帐户过期的日期为 EXPIRE_DATE</span></span><br><span class="line"><span class="operator">-f</span>, -<span class="literal">-inactive</span> INACTIVE <span class="comment">#..........过期 INACTIVE 天数后，设定密码为失效状态</span></span><br><span class="line"><span class="literal">-g</span>, -<span class="literal">-gid</span> <span class="built_in">GROUP</span> <span class="comment">#..................强制使用 GROUP 为新主组</span></span><br><span class="line"><span class="literal">-G</span>, -<span class="literal">-groups</span> GROUPS <span class="comment">#..............新的附加组列表 GROUPS</span></span><br><span class="line"><span class="literal">-a</span>, -<span class="literal">-append</span> <span class="built_in">GROUP</span> <span class="comment">#...............将用户追加至上边 -G 中提到的附加组中，并不从其它组中删除此用户</span></span><br><span class="line"><span class="literal">-h</span>, -<span class="literal">-help</span> <span class="comment">#.......................显示此帮助信息并推出</span></span><br><span class="line"><span class="literal">-l</span>, -<span class="literal">-login</span> LOGIN <span class="comment">#................新的登录名称</span></span><br><span class="line"><span class="literal">-L</span>, -<span class="literal">-lock</span> <span class="comment">#.......................锁定用户帐号</span></span><br><span class="line"><span class="literal">-m</span>, -<span class="literal">-move</span><span class="literal">-home</span> <span class="comment">#..................将主目录内容移至新位置 (仅于 -d 一起使用)</span></span><br><span class="line"><span class="literal">-o</span>, -<span class="literal">-non</span><span class="literal">-unique</span> <span class="comment">#.................允许使用重复的(非唯一的) UID</span></span><br><span class="line"><span class="literal">-p</span>, -<span class="literal">-password</span> PASSWORD <span class="comment">#..........将加密过的密码 (PASSWORD) 设为新密码</span></span><br><span class="line"><span class="literal">-R</span>, -<span class="literal">-root</span> CHROOT_DIR <span class="comment">#............chroot 到的目录</span></span><br><span class="line"><span class="literal">-P</span>, -<span class="literal">-prefix</span> PREFIX_DIR <span class="comment">#..........prefix directory where are located the /etc/* files</span></span><br><span class="line"><span class="literal">-s</span>, -<span class="literal">-shell</span> SHELL <span class="comment">#................该用户帐号的新登录 shell</span></span><br><span class="line"><span class="literal">-u</span>, -<span class="literal">-uid</span> UID <span class="comment">#....................用户帐号的新 UID</span></span><br><span class="line"><span class="literal">-U</span>, -<span class="literal">-unlock</span> <span class="comment">#.....................解锁用户帐号</span></span><br><span class="line"><span class="literal">-v</span>, -<span class="literal">-add</span><span class="literal">-subuids</span> FIRST<span class="literal">-LAST</span> <span class="comment">#.....add range of subordinate uids</span></span><br><span class="line"><span class="literal">-V</span>, -<span class="literal">-del</span><span class="literal">-subuids</span> FIRST<span class="literal">-LAST</span> <span class="comment">#.....remove range of subordinate uids</span></span><br><span class="line"><span class="literal">-w</span>, -<span class="literal">-add</span><span class="literal">-subgids</span> FIRST<span class="literal">-LAST</span> <span class="comment">#.....add range of subordinate gids</span></span><br><span class="line"><span class="literal">-W</span>, -<span class="literal">-del</span><span class="literal">-subgids</span> FIRST<span class="literal">-LAST</span> <span class="comment">#.....remove range of subordinate gids</span></span><br><span class="line"><span class="literal">-Z</span>, -<span class="literal">-selinux</span><span class="literal">-user</span>  SEUSER <span class="comment">#.......用户账户的新 SELinux 用户映射</span></span><br></pre></td></tr></table></figure>

<p>有一个 <code>-m</code> 备注了仅与 <code>-d</code> 一起使用，把 john 原来的主目录文件移动到新的位置：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">usermod <span class="literal">-l</span> tommy <span class="literal">-d</span> /home/tommy <span class="literal">-m</span> john</span><br></pre></td></tr></table></figure>

<h2 id="id"><a href="#id" class="headerlink" title="id"></a>id</h2><blockquote>
<p> 查看用户的 UID、GID 及其所属的组。</p>
</blockquote>
<p><code>id</code> 不带参数显示当前登录用户的信息：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">uid=<span class="number">0</span>(root) gid=<span class="number">0</span>(root) 组=<span class="number">0</span>(root)</span><br></pre></td></tr></table></figure>

<p><code>id nginx</code> 查看 nginx 的信息：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">uid=<span class="number">993</span>(nginx) gid=<span class="number">991</span>(nginx) 组=<span class="number">991</span>(nginx)</span><br></pre></td></tr></table></figure>

<h2 id="su-1"><a href="#su-1" class="headerlink" title="su"></a>su</h2><blockquote>
<p>用户间切换。</p>
</blockquote>
<ul>
<li>不带任何参数的 <code>su</code> 命令将用户提升至 root 权限，需要 root 口令。通过 <code>su</code> 获取的特权将一直持续到使用 <code>exit</code> 命令退出为止。</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">su</span><br></pre></td></tr></table></figure>

<ul>
<li>切换到 tommy 用户，需要 tommy 的口令。</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">su tommy</span><br></pre></td></tr></table></figure>

<p><strong>提示</strong>：尽量通过绝对路径使用 su 命令，这个命令通常保存在 <code>/bin</code> 目录下。这将一定程度上防止溜入到搜索路径下的名为 su 的程序窃取用户口令。</p>
<h2 id="sudo-1"><a href="#sudo-1" class="headerlink" title="sudo"></a>sudo</h2><blockquote>
<p>受限的特权。</p>
</blockquote>
<p>&#8195;&#8195;sudo 是一个程序。接受命令行作为参数，并以 root 身份（或者也可以是其他用户）执行它。在执行命令之前，sudo 会首先要求用户输入自己的口令，口令只需要输入一次。出于安全性的考虑，如果用户在一段时间内（默认是5分钟）没有再次使用 sudo，那么此后必须再次输入口令。这样的设置避免了特权用户不经意间将自己的终端留给了哪些并不受欢迎的人。<br>通过配置 <code>/etc/sudoers</code> 指定用户可以执行的特权命令：</p>
<ul>
<li>指定 root 用户可以使用 sudo 在任何机器上（第一个 ALL）以任何用户身份（第二个 ALL）执行任何命令（第三个 ALL）:</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">Allow root to run any commands anywhere</span><br><span class="line">root	ALL=(ALL) 	ALL</span><br></pre></td></tr></table></figure>

<p>sudoer 中的每一行权限说明包含了下面这些内容：</p>
<ul>
<li>该权限适用的用户；</li>
<li>这一行配置在哪些主机上适用? (这个我不是太懂…)</li>
<li>该用户可以运行的命令；</li>
<li>该命令应该以哪个用户身份执行。</li>
</ul>
<p><strong>提示</strong>：sudoers 中的命令应该使用绝对路径来指定，这样可以防止一些人以 root 身份执行自己的脚本程序。<br>修改sudoers文件应该使用 <code>visudo</code> 命令。这个命令依次执行下面这些操作:</p>
<ul>
<li>检查以确保没有其他人正在编辑这个文件。</li>
<li>调用一个编辑器编辑该文件。</li>
<li>验证并确保编辑后的文件没有语法错误。</li>
<li>安装使 sudoers 文件生效。</li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS 上制作一个小小的可执行文件</title>
    <url>/2022/07/28/MacOS%20%E4%B8%8A%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E5%B0%8F%E5%B0%8F%E7%9A%84%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p>&#8195;&#8195;话说我的 Linux 学习计划最近处于半终止状态，抽空就学一丢丢，也不知道什么时候可以出师。这篇目的是记录一个小小的进度：今天写了两行 shell 脚本…🤐</p>
<p>举例，假设需要实现的功能是跟自己打一声招呼：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">print <span class="string">&#x27;Hello YYLittleCat, Just do IT.&#x27;</span></span><br></pre></td></tr></table></figure>

<p>写完以后把脚本保存为 <code>hello.sh</code> 的文件，下一步是给这个文件添加可执行权限：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> chmod +x hello.sh</span><br><span class="line"><span class="comment"># sudo 看账号的权限是否需要</span></span><br></pre></td></tr></table></figure>

<p>运行脚本的方式：</p>
<ul>
<li>./hello.sh</li>
<li>把 hello.sh 拖到控制台</li>
<li>sh hello.sh</li>
</ul>
<p>&#8195;&#8195;都可以，如果提示 <code>Permission denied.</code> 的话，可能需要加一下满级权限 777 - <code>chmod 777 hello.sh</code>。</p>
<p>&#8195;&#8195;但这样的话，每次执行这个脚本都需要在控制台去操作，我希望可以像别的正经 Unix 可执行文件一样，文件的图标是 exec 小黑框的图标、双击就可以执行那种 😂 。同事说把 .sh 的文件后缀去掉就可以了，我在 Finder 中直接删除了后缀，发现并没有起作用，右击打开「显示简介」，会发现文件的后缀还在：</p>
<img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/hello-sh.png" style="zoom:67%;">

<p>&#8195;&#8195;&#8195;所以“元凶”就是这里 Finder 的小猫腻 -&gt; 隐藏扩展名，在 Finder 里直接删除扩展名，其实是勾选了这个选项，文件名实际上没变，想真正去掉扩展名得在简介里改。并且有时候文件名中有多段扩展名，系统隐藏了一个，剩下的那个会被误以为是扩展名，其实不是，一般控制台里看到的才是真实名称。统一改的话是在 Finder 的偏好设置中：</p>
<img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/finder-set.jpg" style="zoom:50%;">

<p>去掉真正的扩展名以后，就可以看到小黑框了，美滋滋~</p>
<hr>
]]></content>
      <tags>
        <tag>Mac</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 下 IDEA 无法启动的问题</title>
    <url>/2019/01/24/Mac%E4%B8%8BIDEA%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>要使用IDEA，突然提示打不开，不要慌，问题不大，按照下面的步骤试试先？</p>
<blockquote>
<p>打开finder-&gt;应用程序-&gt;idea.app-&gt;右键-&gt;显示包内容-&gt;然后MaxOS-&gt;双击shell脚本（idea）</p>
</blockquote>
<span id="more"></span>

<p>这样是通过命令行的方式来启动IDEA。<br>仔细看里面的提示，尤其Error开头的信息，应该会有具体原因。</p>
<p>我的IDEA 使用的“破解版”……you know？ 然后<code>JetbrainsCrack-3.1-release-enc.jar</code> 被我不小心删了，放回原位就好了……</p>
]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>日常分享歌单</title>
    <url>/1000/01/01/Music/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p>这篇隐藏的很深，只给有缘人，哈哈哈……</p>
<p>分享最近听的音乐：</p>
<h4 id="〽️-王菲-《百年孤寂》"><a href="#〽️-王菲-《百年孤寂》" class="headerlink" title="〽️ 王菲 - 《百年孤寂》"></a>〽️ 王菲 - <strong>《百年孤寂》</strong></h4><p>林夕作词的一首歌，创作背景咱不了解，但听起来确实感觉大气磅礴。之前没怎么留意，但今年反复循环听了一阵儿。最喜欢这两段词儿：</p>
<blockquote>
<p>心属于你的 我借来寄托</p>
<p>却变成我的心魔</p>
<p>你属于谁的 我刚好经过</p>
<p>却带来潮起潮落</p>
<p>…</p>
<p>背影是真的 人是假的 没什么执着</p>
<p>一百年前 你不是你 我不是我</p>
<p>悲哀是真的 泪是假的 本来没因果</p>
<p>一百年后 没有你 也没有我</p>
<p>…</p>
<p>风属于天的 我借来吹吹</p>
<p>却吹起人间烟火</p>
<p>天属于谁的 我借来欣赏</p>
<p>却看到你的轮廓</p>
<p>…</p>
</blockquote>
<p>听来劝自己的：做人要拿得起放得下。听完也确实各方面看开一些。明年干巴爹~💪</p>
<h4 id="☄️-张学友-《情网》"><a href="#☄️-张学友-《情网》" class="headerlink" title="☄️ 张学友 - 《情网》"></a>☄️ 张学友 - <strong>《情网》</strong></h4><p>车里电台放的时候，被这种略带哀怨的吟唱吸引了，于是捡来听了几天。不得不说，还是老歌有味道。</p>
<blockquote>
<p>而你是一张无边无际的网<br>轻易就把我困在网中央<br>我越陷越深越迷惘<br>路越走越远越漫长</p>
<p>…</p>
</blockquote>
<h4 id="🖕-xxx-《安和桥》"><a href="#🖕-xxx-《安和桥》" class="headerlink" title="🖕 xxx - 《安和桥》"></a>🖕 xxx - <strong>《安和桥》</strong></h4><p>曾经有个人让我听一下这首歌 01:58 的位置…听说歌手吸毒，那我就不把他写在这里了。</p>
<blockquote>
<p>我知道这个世界<br>每天都有太多遗憾<br>所以你好再见</p>
<p>…</p>
</blockquote>
<h4 id="🤦‍♀️-康姆士乐团-《你要如何，我们就如何》"><a href="#🤦‍♀️-康姆士乐团-《你要如何，我们就如何》" class="headerlink" title="🤦‍♀️ 康姆士乐团 - 《你要如何，我们就如何》"></a>🤦‍♀️ 康姆士乐团 - <strong>《你要如何，我们就如何》</strong></h4><p>被一句“别哭前面一定有路”吸引来的，也算是支撑自己这一年多的一首歌，不过第一次听好像是在一个搞笑短视频里面。😂</p>
<blockquote>
<p>如果我 不对真的就是我 想带你飞<br>别哭 前面一定有路<br>仿佛 幸福在不远处</p>
<p>…</p>
</blockquote>
<h4 id="🤖-陈奕迅-《孤勇者》"><a href="#🤖-陈奕迅-《孤勇者》" class="headerlink" title="🤖 陈奕迅 - 《孤勇者》"></a>🤖 陈奕迅 - <strong>《孤勇者》</strong></h4><p>前几天同事推荐的，听说是为英雄联盟创作的动画中文主题曲。偷过来听了听，有几句歌词比较符合自己积极又强势的性格，哈哈，很喜欢：</p>
<blockquote>
<p>爱你孤身走暗巷</p>
<p>爱你不跪的模样</p>
<p>爱你对峙过绝望</p>
<p>不肯哭一场</p>
<p>爱你破烂的衣裳</p>
<p>却敢堵命运的枪</p>
<p>爱你和我那么像</p>
<p>缺口都一样</p>
<p>去吗 配吗 这褴褛的披风</p>
<p>战吗 战啊 以最卑微的梦</p>
</blockquote>
<h4 id="🤷‍♀️-告五人-《爱人错过》"><a href="#🤷‍♀️-告五人-《爱人错过》" class="headerlink" title="🤷‍♀️ 告五人 - 《爱人错过》"></a>🤷‍♀️ 告五人 - <strong>《爱人错过》</strong></h4><p>喜欢听这个倒不是说感叹情呀爱呀的，是因为这两句歌词，哈哈：</p>
<blockquote>
<p>你妈没有告诉你</p>
<p>撞到人要说对不起</p>
</blockquote>
<h4 id="🤺-汪苏泷-大张伟-的-Live-版-《剑魂》"><a href="#🤺-汪苏泷-大张伟-的-Live-版-《剑魂》" class="headerlink" title="🤺 汪苏泷/大张伟 的 Live 版 - 《剑魂》"></a>🤺 汪苏泷/大张伟 的 Live 版 - <strong>《剑魂》</strong></h4><blockquote>
<p>山外还有山比山高</p>
<p>半山腰</p>
<p>一声惊雷摇晃树梢</p>
<p>人外还有人忘不掉</p>
<p>…</p>
</blockquote>
<h4 id="🍌-邓紫棋-《Bang-Bang》"><a href="#🍌-邓紫棋-《Bang-Bang》" class="headerlink" title="🍌 邓紫棋 - 《Bang Bang》"></a>🍌 邓紫棋 - <strong>《Bang Bang》</strong></h4><p>据说是给小黄人大电影做的主题曲，俏皮又欢快。</p>
<blockquote>
<p>今天你说爱上我<br>就把自己上了锁<br>要是别人来诱惑<br>那就情海起风波</p>
<p>…</p>
</blockquote>
<h4 id="🍑-周杰伦、杨瑞代-《等你下课》"><a href="#🍑-周杰伦、杨瑞代-《等你下课》" class="headerlink" title="🍑 周杰伦、杨瑞代 - 《等你下课》"></a>🍑 周杰伦、杨瑞代 - <strong>《等你下课》</strong></h4><p>听好多年了，但是因为周董发新专辑，开始二次收费了。😂</p>
<blockquote>
<p>当我开始学会做蛋饼<br>才发现你不吃早餐</p>
<p>…</p>
<p>在人来人往找寻着你<br>守护着你不求结局</p>
<p>…</p>
</blockquote>
<h4 id="🍥-Tank-《三国恋》"><a href="#🍥-Tank-《三国恋》" class="headerlink" title="🍥 Tank - 《三国恋》"></a>🍥 Tank - <strong>《三国恋》</strong></h4><p>小时候听的，怀旧一下，哈哈，暴露年龄了。</p>
<blockquote>
<p>等待<del>良人归来那一刻<br>眼</del>泪~为你唱歌</p>
<p>…</p>
</blockquote>
<h4 id="🎻-周杰伦-《断了的弦》"><a href="#🎻-周杰伦-《断了的弦》" class="headerlink" title="🎻 周杰伦 - 《断了的弦》"></a>🎻 周杰伦 - <strong>《断了的弦》</strong></h4><blockquote>
<p>我突然释怀的笑</p>
<p>…</p>
</blockquote>
<p>突然间醒悟了一个人、三两个人 内心有多阴险、阴暗，只怪自己太蠢。</p>
<h4 id="⚠️-周杰伦-《黑色毛衣》"><a href="#⚠️-周杰伦-《黑色毛衣》" class="headerlink" title="⚠️ 周杰伦 - 《黑色毛衣》"></a>⚠️ 周杰伦 - <strong>《黑色毛衣》</strong></h4><blockquote>
<p>看着那白色的蜻蜓 在空中忘了前进</p>
<p>还能不能 重新编织 脑海中起毛球的记忆</p>
<p>再说我爱你 可能雨也不会停</p>
<p>…</p>
</blockquote>
<p>当意识到结果不再重要的时候，守住那一点点自以为的回忆和美好就够了，只是回忆再也与你无关了。</p>
<h4 id="🍊-周杰伦-《兰亭序》"><a href="#🍊-周杰伦-《兰亭序》" class="headerlink" title="🍊 周杰伦 - 《兰亭序》"></a>🍊 周杰伦 - <strong>《兰亭序》</strong></h4><blockquote>
<p>…</p>
<p>无关风月 我题序等你回<br>手书无愧 无惧人间是非<br>雨打蕉叶 又萧萧了几夜<br>我等春雷 来提醒你爱谁。</p>
</blockquote>
<hr>
]]></content>
      <tags>
        <tag>我</tag>
      </tags>
  </entry>
  <entry>
    <title>URL Loading System 之 NSURLRequest/URLRequest</title>
    <url>/2018/04/19/NSURLRequest/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="NSURLRequest"><a href="#NSURLRequest" class="headerlink" title="NSURLRequest"></a>NSURLRequest</h2><blockquote>
<p>NSURLRequest /URLRequest 封装了请求的两个基本属性：要加载的URL和用于加载该请求的策略。通常用于 HTTP 和 HTTPS 请求，包括 HTTP 方法（<code>GET</code>，<code>POST</code>等）和 HTTP 标头。可变子类型是 NSMutableURLRequest 。</p>
</blockquote>
<h3 id="一个平平无奇的-GET-请求"><a href="#一个平平无奇的-GET-请求" class="headerlink" title="一个平平无奇的 GET 请求"></a>一个平平无奇的 GET 请求</h3><blockquote>
<p>网络请求的测试，我们访问 httpbin 来进行，方便对比请求的响应</p>
<p>官网：<a href="https://httpbin.org/">https://httpbin.org/</a></p>
<p>httpbin 可以把我们请求时的信息，返回给我们</p>
</blockquote>
<span id="more"></span>

<p>PS: 在swift 中没有细分可变子类型了，<code>let</code> 声明的对象就是不可变，<code>var</code> 声明就是可变，那我们手动添加一个头部信息，看看效果。</p>
<h4 id="url"><a href="#url" class="headerlink" title="url"></a>url</h4><h4 id="allHTTPHeaderFields"><a href="#allHTTPHeaderFields" class="headerlink" title="allHTTPHeaderFields"></a>allHTTPHeaderFields</h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>.<span class="keyword">init</span>(string: <span class="string">&quot;https://httpbin.org/get&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> request <span class="operator">=</span> <span class="type">URLRequest</span>.<span class="keyword">init</span>(url: url<span class="operator">!</span>)</span><br><span class="line">request.setValue(<span class="string">&quot;Tiantian&quot;</span>, forHTTPHeaderField: <span class="string">&quot;Tommy-Girl&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(request.allHTTPHeaderFields <span class="operator">??</span> [:])</span><br><span class="line"><span class="comment">//请求怎么发出去呢？我们先使用苹果提供的单例尝试一下</span></span><br><span class="line"><span class="keyword">let</span> task <span class="operator">=</span> <span class="type">URLSession</span>.shared.dataTask(with: request) &#123; (data, response, error) <span class="keyword">in</span></span><br><span class="line">    <span class="comment">//查看 response，我们打印出来可以看到一个 NSHTTPURLResponse 对象，以及部分头部信息</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Response:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(response <span class="keyword">as</span> <span class="keyword">Any</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> statusCode <span class="operator">=</span> (response <span class="keyword">as?</span> <span class="type">HTTPURLResponse</span>)<span class="operator">?</span>.statusCode <span class="operator">??</span> <span class="operator">-</span><span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> statusCode <span class="operator">==</span> <span class="number">200</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> data <span class="operator">=</span> data <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> object <span class="operator">=</span> <span class="keyword">try</span> <span class="type">JSONSerialization</span>.jsonObject(with: data, options: [])</span><br><span class="line">            <span class="built_in">print</span>(object)</span><br><span class="line">        &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error &#123;</span><br><span class="line">            <span class="built_in">print</span>(error)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">task.resume()</span><br></pre></td></tr></table></figure>

<p>返回结果：</p>
<p>我们刚刚添加了一个 名为 Tommy-Girl 值为 Tiantian 的头部信息，服务器已经收到，并且原封不动帮我们返回了。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET: </span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;args&quot;</span>: &#123;&#125;, </span><br><span class="line">  <span class="attr">&quot;headers&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;Accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>, </span><br><span class="line">    <span class="attr">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate, br&quot;</span>, </span><br><span class="line">    <span class="attr">&quot;Accept-Language&quot;</span>: <span class="string">&quot;en-us&quot;</span>, </span><br><span class="line">    <span class="attr">&quot;Host&quot;</span>: <span class="string">&quot;httpbin.org&quot;</span>, </span><br><span class="line">    <span class="attr">&quot;Tommy-Girl&quot;</span>: <span class="string">&quot;Tiantian&quot;</span>, </span><br><span class="line">    <span class="attr">&quot;User-Agent&quot;</span>: <span class="string">&quot;URLLoadingSystem/1 CFNetwork/1220.1 Darwin/19.6.0&quot;</span>, </span><br><span class="line">    <span class="attr">&quot;X-Amzn-Trace-Id&quot;</span>: <span class="string">&quot;Root=1-6094ffc6-18f7b8391c8bcc4049bc6beb&quot;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="attr">&quot;origin&quot;</span>: <span class="string">&quot;*.*.*.*&quot;</span>, </span><br><span class="line">  <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://httpbin.org/get&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="一个略显英俊的-POST-请求"><a href="#一个略显英俊的-POST-请求" class="headerlink" title="一个略显英俊的 POST 请求"></a>一个略显英俊的 POST 请求</h3><p>PS: GET 和 POST 请求的区别，以及各<code>Status Code</code> 的含义见另一篇文章<a href="https://atommygirl.github.io/2017/10/02/HTTP%20%E7%9A%84%E4%B8%80%E7%82%B9%E5%84%BF%E5%B0%8F%E7%9F%A5%E8%AF%86/#%E4%B8%89%E3%80%81%E6%96%B9%E6%B3%95">HTTP 的一点儿小知识</a>。</p>
<p>如果上面的代码，我们直接把 URL 替换为只允许 POST 请求的服务，我们会收到一个 405 的code 码，405 一般表示请求方法不允许。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">Response:</span><br><span class="line">Optional(&lt;NSHTTPURLResponse: <span class="number">0x6000026150e0</span>&gt; &#123; URL: https:<span class="comment">//httpbin.org/post &#125; </span></span><br><span class="line">&#123; Status Code: <span class="number">405</span>, Headers &#123;</span><br><span class="line">    <span class="attr">&quot;Access-Control-Allow-Origin&quot;</span> =     (</span><br><span class="line">        <span class="attr">&quot;*&quot;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="attr">&quot;Content-Length&quot;</span> =     (</span><br><span class="line">        178</span><br><span class="line">    );</span><br><span class="line">    <span class="attr">&quot;Content-Type&quot;</span> =     (</span><br><span class="line">        <span class="attr">&quot;text/html&quot;</span></span><br><span class="line">    );</span><br><span class="line">    Date =     (</span><br><span class="line">        <span class="attr">&quot;Fri, 07 May 2018 08:22:31 GMT&quot;</span></span><br><span class="line">    );</span><br><span class="line">    Server =     (</span><br><span class="line">        <span class="attr">&quot;gunicorn/19.9.0&quot;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="attr">&quot;access-control-allow-credentials&quot;</span> =     (</span><br><span class="line">        true</span><br><span class="line">    );</span><br><span class="line">    allow =     (</span><br><span class="line">        <span class="attr">&quot;POST, OPTIONS&quot;</span></span><br><span class="line">    );</span><br><span class="line">&#125; &#125;)</span><br></pre></td></tr></table></figure>

<h4 id="httpMethod"><a href="#httpMethod" class="headerlink" title="httpMethod"></a>httpMethod</h4><p>那怎么发送一个 POST 请求呢？很简单，<code>URLRequest</code> 有一个 <code>httpMethod</code> 属性，指定对应的方法名即可</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">request.httpMethod <span class="operator">=</span> <span class="string">&quot;POST&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="httpBody"><a href="#httpBody" class="headerlink" title="httpBody"></a>httpBody</h4><p>一个 <code>NSData/Data</code> 类型的属性，用于添加参数，可以但不限于：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> parameter <span class="operator">=</span> [<span class="string">&quot;a&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">                 <span class="string">&quot;b&quot;</span> : <span class="string">&quot;2&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> data <span class="operator">=</span> <span class="keyword">try?</span> <span class="type">JSONSerialization</span>.data(withJSONObject: parameter, options: [])</span><br><span class="line">request.httpBody <span class="operator">=</span> data</span><br></pre></td></tr></table></figure>

<h4 id="timeoutInterval"><a href="#timeoutInterval" class="headerlink" title="timeoutInterval"></a>timeoutInterval</h4><blockquote>
<p> 超时时间</p>
</blockquote>
<h4 id="httpShouldHandleCookies"><a href="#httpShouldHandleCookies" class="headerlink" title="httpShouldHandleCookies"></a>httpShouldHandleCookies</h4><blockquote>
<p>决定这个请求是否要使用cookie，默认为YES。</p>
</blockquote>
<p>常用到的就上面这几个属性，真实开发中我们很少会直接使用  <code>Request</code>  发送请求，往往依赖于三方框架，像 OC 的 <code>AFNetworking</code> 、swift 的 <code>Alamofire</code> 等等。</p>
<h2 id="系列："><a href="#系列：" class="headerlink" title="系列："></a>系列：</h2><p><a href="https://tommygirl.cn/2018/04/19/URLLoadingSystem/">URL Loading System[译]</a></p>
<p><a href="https://tommygirl.cn/2018/04/19/NSURLRequest/">NSURLRequest</a></p>
<p><a href="https://tommygirl.cn/2018/04/20/NSURLResponse/">NSURLResponse</a></p>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】巧用 Nginx 快速实现 HTTPS 双向认证</title>
    <url>/2021/08/11/Nginx_HTTPS/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>以下内容转载自 <a href="https://www.hi-linux.com/posts/38492.html">这里</a> 。转载的原因是怕他们的网站突然访问不了😂。</p>
<hr>
<p>研究 HTTPS 的双向认证实现与原理，踩了不少坑，终于整个流程都跑通了，现在总结出一篇文档来，把一些心得，特别是容易踩坑的地方记录下来。</p>
<h2 id="1-原理"><a href="#1-原理" class="headerlink" title="1. 原理"></a>1. 原理</h2><p>双向认证，顾名思义，客户端和服务器端都需要验证对方的身份，在建立 <code>HTTPS</code> 连接的过程中，握手的流程比单向认证多了几步。单向认证的过程，客户端从服务器端下载服务器端公钥证书进行验证，然后建立安全通信通道。双向通信流程，客户端除了需要从服务器端下载服务器的公钥证书进行验证外，还需要把客户端的公钥证书上传到服务器端给服务器端进行验证，等双方都认证通过了，才开始建立安全通信通道进行数据传输。</p>
<h3 id="1-1-单向认证流程"><a href="#1-1-单向认证流程" class="headerlink" title="1.1 单向认证流程"></a>1.1 单向认证流程</h3><p>单向认证流程中，服务器端保存着公钥证书和私钥两个文件，整个握手过程如下：</p>
<span id="more"></span>

<p><img src="https://ata2-img.cn-hangzhou.oss-pub.aliyun-inc.com/14158ca87e2f341ff044efd967f3e008.png" alt="img"></p>
<ol>
<li>客户端发起建立 HTTPS 连接请求，将 SSL 协议版本的信息发送给服务器端；</li>
<li>服务器端将本机的公钥证书（server.crt）发送给客户端；</li>
<li>客户端读取公钥证书 (server.crt)，取出了服务端公钥；</li>
<li>客户端生成一个随机数（密钥 R），用刚才得到的服务器公钥去加密这个随机数形成密文，发送给服务端；</li>
<li>服务端用自己的私钥 (server.key) 去解密这个密文，得到了密钥 R</li>
<li>服务端和客户端在后续通讯过程中就使用这个密钥 R 进行通信了。</li>
</ol>
<h3 id="1-2-双向认证流程"><a href="#1-2-双向认证流程" class="headerlink" title="1.2 双向认证流程"></a>1.2 双向认证流程</h3><p><img src="https://ata2-img.cn-hangzhou.oss-pub.aliyun-inc.com/08e6235892053a81603a4c3d7c7f44ad.png" alt="img"></p>
<ol>
<li>客户端发起建立 HTTPS 连接请求，将 SSL 协议版本的信息发送给服务端；</li>
<li>服务器端将本机的公钥证书 (server.crt) 发送给客户端；</li>
<li>客户端读取公钥证书 (server.crt)，取出了服务端公钥；</li>
<li>客户端将客户端公钥证书 (client.crt) 发送给服务器端；</li>
<li>服务器端解密客户端公钥证书，拿到客户端公钥；</li>
<li>客户端发送自己支持的加密方案给服务器端；</li>
<li>服务器端根据自己和客户端的能力，选择一个双方都能接受的加密方案，使用客户端的公钥加密后发送给客户端；</li>
<li>客户端使用自己的私钥解密加密方案，生成一个随机数 R，使用服务器公钥加密后传给服务器端；</li>
<li>服务端用自己的私钥去解密这个密文，得到了密钥 R</li>
<li>服务端和客户端在后续通讯过程中就使用这个密钥 R 进行通信了。</li>
</ol>
<h2 id="2-证书生成"><a href="#2-证书生成" class="headerlink" title="2. 证书生成"></a>2. 证书生成</h2><p>从上一章内容中，我们可以总结出来，如果要把整个双向认证的流程跑通，最终需要五个证书文件：</p>
<ul>
<li>服务器端公钥证书：server.crt</li>
<li>服务器端私钥文件：server.key</li>
<li>客户端公钥证书：client.crt</li>
<li>客户端私钥文件：client.key</li>
<li>客户端集成证书（包括公钥和私钥，用于浏览器访问场景）：client.p12</li>
</ul>
<p>生成这一些列证书之前，我们需要先生成一个 <code>CA</code> 根证书，然后由这个 <code>CA</code> 根证书颁发服务器公钥证书和客户端公钥证书。</p>
<p><img src="https://www.hi-linux.com/img/linux/nginx-ssl-03.png" alt="img"></p>
<p>我们可以全程使用 <code>Openssl</code> 来生成一些列的自签名证书，自签名证书没有通过证书机构的认证，很多浏览器会认为不安全，但我们用来实验是足够的。需要在本机安装了 <code>Openssl</code> 后才能继续本章的实验。</p>
<h3 id="2-1-生成自签名根证书"><a href="#2-1-生成自签名根证书" class="headerlink" title="2.1 生成自签名根证书"></a>2.1 生成自签名根证书</h3><ol>
<li>创建根证书私钥：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> openssl genrsa -out root.key 1024</span></span><br></pre></td></tr></table></figure>

<ol>
<li>创建根证书请求文件：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> openssl req -new -out root.csr -key root.key</span></span><br><span class="line"></span><br><span class="line">后续参数请自行填写，下面是一个例子：</span><br><span class="line"></span><br><span class="line">Country Name (2 letter code) [XX]:cn</span><br><span class="line">State or Province Name (full name) []:bj</span><br><span class="line">Locality Name (eg, city) [Default City]:bj</span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:alibaba</span><br><span class="line">Organizational Unit Name (eg, section) []:test</span><br><span class="line">Common Name (eg, your name or your servers hostname) []:www.yourdomain.com</span><br><span class="line">Email Address []:a.alibaba.com</span><br><span class="line">A challenge password []:</span><br><span class="line">An optional company name []:</span><br></pre></td></tr></table></figure>

<ol>
<li>创建根证书：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> openssl x509 -req -<span class="keyword">in</span> root.csr -out root.crt -signkey root.key -CAcreateserial -days 3650</span></span><br></pre></td></tr></table></figure>

<p>在创建证书请求文件的时候需要注意三点，下面生成服务器请求文件和客户端请求文件均要注意这三点：</p>
<ul>
<li>Common Name 填写证书对应的服务域名；</li>
<li>所有字段的填写，根证书、服务器端证书、客户端证书需保持一致</li>
<li>最后的密码可以直接回车跳过。</li>
</ul>
<p>经过上面三个命令行，我们最终可以得到一个签名有效期为 10 年的根证书 root.crt，后面我们可以用这个根证书去颁发服务器证书和客户端证书。</p>
<h3 id="2-2-生成自签名服务器端证书"><a href="#2-2-生成自签名服务器端证书" class="headerlink" title="2.2 生成自签名服务器端证书"></a>2.2 生成自签名服务器端证书</h3><ol>
<li>生成服务器端证书私钥：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> openssl genrsa -out server.key 1024</span></span><br></pre></td></tr></table></figure>

<ol>
<li>生成服务器证书请求文件，过程和注意事项参考根证书，本节不详述：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> openssl req -new -out server.csr -key server.key</span></span><br></pre></td></tr></table></figure>

<ol>
<li>生成服务器端公钥证书</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> openssl x509 -req -<span class="keyword">in</span> server.csr -out server.crt -signkey server.key -CA root.crt -CAkey root.key -CAcreateserial -days 3650</span></span><br></pre></td></tr></table></figure>

<p>经过上面的三个命令，我们得到：</p>
<ul>
<li>server.key：服务器端的秘钥文件</li>
<li>server.crt：有效期十年的服务器端公钥证书，使用根证书和服务器端私钥文件一起生成</li>
</ul>
<h3 id="2-3-生成自签名客户端证书"><a href="#2-3-生成自签名客户端证书" class="headerlink" title="2.3 生成自签名客户端证书"></a>2.3 生成自签名客户端证书</h3><ol>
<li>生成客户端证书秘钥：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> openssl genrsa -out client.key 1024</span></span><br></pre></td></tr></table></figure>

<ol>
<li>生成客户端证书请求文件，过程和注意事项参考根证书，本节不详述：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> openssl req -new -out client.csr -key client.key</span></span><br></pre></td></tr></table></figure>

<ol>
<li>生客户端证书</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> openssl x509 -req -<span class="keyword">in</span> client.csr -out client.crt -signkey client.key -CA root.crt -CAkey root.key -CAcreateserial -days 3650</span></span><br></pre></td></tr></table></figure>

<ol>
<li>生客户端 P12 格式证书</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> openssl pkcs12 -<span class="built_in">export</span> -clcerts -<span class="keyword">in</span> client.crt -inkey client.key -out client.p12</span></span><br></pre></td></tr></table></figure>

<p>经过上面的三个命令，我们得到：</p>
<ul>
<li>client.key：客户端的私钥文件</li>
<li>client.crt：有效期十年的客户端证书，使用根证书和客户端私钥一起生成</li>
<li>client.p12：客户端 p12 格式，这个证书文件包含客户端的公钥和私钥，主要用来给浏览器访问使用</li>
</ul>
<h2 id="3-Nginx-配置"><a href="#3-Nginx-配置" class="headerlink" title="3.Nginx 配置"></a>3.Nginx 配置</h2><p>有了上面的一些列证书，我们可以在 <code>Nginx</code> 服务器上配置双向认证的 <code>HTTPS</code> 服务了，具体配置方式如下：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span>  www.yourdomain.com;</span><br><span class="line">    <span class="attribute">ssl</span>                  <span class="literal">on</span>;  </span><br><span class="line">    <span class="attribute">ssl_certificate</span>      /data/sslKey/server.crt;  <span class="comment">#server公钥证书</span></span><br><span class="line">    <span class="attribute">ssl_certificate_key</span>  /data/sslKey/server.key;  <span class="comment">#server私钥</span></span><br><span class="line">    <span class="attribute">ssl_client_certificate</span> /data/sslKey/client.crt;  <span class="comment">#客户端公钥证书</span></span><br><span class="line">    <span class="attribute">ssl_verify_client</span> <span class="literal">on</span>;  <span class="comment">#开启客户端证书验证  </span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   html;</span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>具体就是将服务器端的两个证书文件 (server.crt/server.key) 和客户端的公钥证书文件 (client.crt) 的路径配置到 <code>Nginx</code> 的 <code>server</code> 节点配置中，并且把 <code>ssl_verify_client</code> 这个参数设置为 <code>on</code>。<br>有一点需要注意的就是，如果客户端证书不是由根证书直接颁发的，配置中还需要加一个配置：<code>ssl_verify_depth 1</code> ；配置完成后，执行 <code>nginx -s reload</code> 重新加载下就生效了。</p>
<h2 id="4-curl-调用"><a href="#4-curl-调用" class="headerlink" title="4.curl 调用"></a>4.curl 调用</h2><p>使用 <code>curl</code> 加上证书路径，可以直接测试 <code>Nginx</code> 的 <code>HTTPS</code> 双向认证是否配置成功。</p>
<ol>
<li>带证书的成功调用</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># --cert指定客户端公钥证书的路径</span></span><br><span class="line"><span class="comment"># --key指定客户端私钥文件的路径</span></span><br><span class="line"><span class="comment"># -k不校验证书的合法性，因为我们用的是自签名证书，所以需要加这个参数</span></span><br><span class="line"><span class="comment"># 可以使用 -v 来观察具体的 SSL 握手过程</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$</span> <span class="built_in">curl</span> -<span class="literal">-cert</span> ./client.crt -<span class="literal">-key</span> ./client.key https://integration<span class="literal">-fred2</span>.fredhuang.com <span class="literal">-k</span> <span class="literal">-v</span></span><br><span class="line">* Rebuilt URL to: https://integration<span class="literal">-fred2</span>.fredhuang.com/</span><br><span class="line">*   Trying <span class="number">47.91</span>.<span class="number">39.145</span>...</span><br><span class="line">* TCP_NODELAY <span class="built_in">set</span></span><br><span class="line">* Connected to integration<span class="literal">-fred2</span>.fredhuang.com (<span class="number">47.91</span>.<span class="number">39.145</span>) port <span class="number">443</span> (<span class="comment">#0)</span></span><br><span class="line">* ALPN, offering h2</span><br><span class="line">* ALPN, offering http/<span class="number">1.1</span></span><br><span class="line">* Cipher selection: ALL:!EXPORT:!EXPORT40:!EXPORT56:!aNULL:!LOW:!RC4:@STRENGTH</span><br><span class="line">* successfully <span class="built_in">set</span> certificate verify locations:</span><br><span class="line">*   CAfile: /etc/ssl/cert.pem</span><br><span class="line">  CApath: none</span><br><span class="line">* TLSv1.<span class="number">2</span> (OUT), TLS handshake, Client hello (<span class="number">1</span>):</span><br><span class="line">* TLSv1.<span class="number">2</span> (<span class="keyword">IN</span>), TLS handshake, Server hello (<span class="number">2</span>):</span><br><span class="line">* TLSv1.<span class="number">2</span> (<span class="keyword">IN</span>), TLS handshake, Certificate (<span class="number">11</span>):</span><br><span class="line">* TLSv1.<span class="number">2</span> (<span class="keyword">IN</span>), TLS handshake, Server key exchange (<span class="number">12</span>):</span><br><span class="line">* TLSv1.<span class="number">2</span> (<span class="keyword">IN</span>), TLS handshake, Request CERT (<span class="number">13</span>):</span><br><span class="line">* TLSv1.<span class="number">2</span> (<span class="keyword">IN</span>), TLS handshake, Server finished (<span class="number">14</span>):</span><br><span class="line">* TLSv1.<span class="number">2</span> (OUT), TLS handshake, Certificate (<span class="number">11</span>):</span><br><span class="line">* TLSv1.<span class="number">2</span> (OUT), TLS handshake, Client key exchange (<span class="number">16</span>):</span><br><span class="line">* TLSv1.<span class="number">2</span> (OUT), TLS handshake, CERT verify (<span class="number">15</span>):</span><br><span class="line">* TLSv1.<span class="number">2</span> (OUT), TLS change cipher, Client hello (<span class="number">1</span>):</span><br><span class="line">* TLSv1.<span class="number">2</span> (OUT), TLS handshake, Finished (<span class="number">20</span>):</span><br><span class="line">* TLSv1.<span class="number">2</span> (<span class="keyword">IN</span>), TLS change cipher, Client hello (<span class="number">1</span>):</span><br><span class="line">* TLSv1.<span class="number">2</span> (<span class="keyword">IN</span>), TLS handshake, Finished (<span class="number">20</span>):</span><br><span class="line">* SSL connection <span class="keyword">using</span> TLSv1.2 / ECDHE-RSA-AES128-GCM-SHA256</span><br><span class="line">* ALPN, server accepted to use h2</span><br><span class="line">* Server certificate:</span><br><span class="line">*  subject: C=CN; ST=BeiJing; L=BeiJing; O=Alibaba; OU=Test; CN=integration<span class="literal">-fred2</span>.fredhuang.com; emailAddress=a@alibaba.com</span><br><span class="line">*  <span class="built_in">start</span> date: Oct <span class="number">30</span> <span class="number">06</span>:<span class="number">43</span>:<span class="number">19</span> <span class="number">2019</span> GMT</span><br><span class="line">*  expire date: Oct <span class="number">27</span> <span class="number">06</span>:<span class="number">43</span>:<span class="number">19</span> <span class="number">2029</span> GMT</span><br><span class="line">*  issuer: C=CN; ST=BeiJing; L=BeiJing; O=Alibaba; OU=Test; CN=integration<span class="literal">-fred2</span>.fredhuang.com; emailAddress=a@alibaba.com</span><br><span class="line">*  SSL certificate verify result: self signed certificate (<span class="number">18</span>), continuing anyway.</span><br><span class="line">* <span class="keyword">Using</span> HTTP2, server supports multi-use</span><br><span class="line">* Connection state changed (HTTP/<span class="number">2</span> confirmed)</span><br><span class="line">* Copying HTTP/<span class="number">2</span> <span class="keyword">data</span> <span class="keyword">in</span> stream buffer to connection buffer after upgrade: len=<span class="number">0</span></span><br><span class="line">* <span class="keyword">Using</span> Stream ID: 1 (easy handle 0x7f8ae1809a00)</span><br><span class="line">&gt; GET / HTTP/<span class="number">2</span></span><br><span class="line">&gt; Host: integration<span class="literal">-fred2</span>.fredhuang.com</span><br><span class="line">&gt; User<span class="literal">-Agent</span>: <span class="built_in">curl</span>/<span class="number">7.54</span>.<span class="number">0</span></span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt;</span><br><span class="line">* Connection state changed (MAX_CONCURRENT_STREAMS updated)!</span><br><span class="line">&lt; HTTP/<span class="number">2</span> <span class="number">200</span></span><br><span class="line">&lt; server: Tengine</span><br><span class="line">&lt; date: Fri, <span class="number">01</span> Nov <span class="number">2019</span> <span class="number">11</span>:<span class="number">16</span>:<span class="number">39</span> GMT</span><br><span class="line">&lt; content<span class="literal">-type</span>: text/plain;charset=UTF<span class="literal">-8</span></span><br><span class="line">&lt; content<span class="literal">-length</span>: <span class="number">0</span></span><br></pre></td></tr></table></figure>

<ol>
<li>不带证书的失败调用</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">curl</span>  https://integration<span class="literal">-fred2</span>.fredhuang.com <span class="literal">-k</span> <span class="literal">-v</span></span><br><span class="line">* Rebuilt URL to: https://integration<span class="literal">-fred2</span>.fredhuang.com/</span><br><span class="line">*   Trying <span class="number">47.91</span>.<span class="number">39.145</span>...</span><br><span class="line">* TCP_NODELAY <span class="built_in">set</span></span><br><span class="line">* Connected to integration<span class="literal">-fred2</span>.fredhuang.com (<span class="number">47.91</span>.<span class="number">39.145</span>) port <span class="number">443</span> (<span class="comment">#0)</span></span><br><span class="line">* ALPN, offering h2</span><br><span class="line">* ALPN, offering http/<span class="number">1.1</span></span><br><span class="line">* Cipher selection: ALL:!EXPORT:!EXPORT40:!EXPORT56:!aNULL:!LOW:!RC4:@STRENGTH</span><br><span class="line">* successfully <span class="built_in">set</span> certificate verify locations:</span><br><span class="line">*   CAfile: /etc/ssl/cert.pem</span><br><span class="line">  CApath: none</span><br><span class="line">* TLSv1.<span class="number">2</span> (OUT), TLS handshake, Client hello (<span class="number">1</span>):</span><br><span class="line">* TLSv1.<span class="number">2</span> (<span class="keyword">IN</span>), TLS handshake, Server hello (<span class="number">2</span>):</span><br><span class="line">* TLSv1.<span class="number">2</span> (<span class="keyword">IN</span>), TLS handshake, Certificate (<span class="number">11</span>):</span><br><span class="line">* TLSv1.<span class="number">2</span> (<span class="keyword">IN</span>), TLS handshake, Server key exchange (<span class="number">12</span>):</span><br><span class="line">* TLSv1.<span class="number">2</span> (<span class="keyword">IN</span>), TLS handshake, Request CERT (<span class="number">13</span>):</span><br><span class="line">* TLSv1.<span class="number">2</span> (<span class="keyword">IN</span>), TLS handshake, Server finished (<span class="number">14</span>):</span><br><span class="line">* TLSv1.<span class="number">2</span> (OUT), TLS handshake, Certificate (<span class="number">11</span>):</span><br><span class="line">* TLSv1.<span class="number">2</span> (OUT), TLS handshake, Client key exchange (<span class="number">16</span>):</span><br><span class="line">* TLSv1.<span class="number">2</span> (OUT), TLS change cipher, Client hello (<span class="number">1</span>):</span><br><span class="line">* TLSv1.<span class="number">2</span> (OUT), TLS handshake, Finished (<span class="number">20</span>):</span><br><span class="line">* TLSv1.<span class="number">2</span> (<span class="keyword">IN</span>), TLS change cipher, Client hello (<span class="number">1</span>):</span><br><span class="line">* TLSv1.<span class="number">2</span> (<span class="keyword">IN</span>), TLS handshake, Finished (<span class="number">20</span>):</span><br><span class="line">* SSL connection <span class="keyword">using</span> TLSv1.2 / ECDHE-RSA-AES128-GCM-SHA256</span><br><span class="line">* ALPN, server accepted to use h2</span><br><span class="line">* Server certificate:</span><br><span class="line">*  subject: C=CN; ST=BeiJing; L=BeiJing; O=Alibaba; OU=Test; CN=integration<span class="literal">-fred2</span>.fredhuang.com; emailAddress=a@alibaba.com</span><br><span class="line">*  <span class="built_in">start</span> date: Oct <span class="number">30</span> <span class="number">06</span>:<span class="number">43</span>:<span class="number">19</span> <span class="number">2019</span> GMT</span><br><span class="line">*  expire date: Oct <span class="number">27</span> <span class="number">06</span>:<span class="number">43</span>:<span class="number">19</span> <span class="number">2029</span> GMT</span><br><span class="line">*  issuer: C=CN; ST=BeiJing; L=BeiJing; O=Alibaba; OU=Test; CN=integration<span class="literal">-fred2</span>.fredhuang.com; emailAddress=a@alibaba.com</span><br><span class="line">*  SSL certificate verify result: self signed certificate (<span class="number">18</span>), continuing anyway.</span><br><span class="line">* <span class="keyword">Using</span> HTTP2, server supports multi-use</span><br><span class="line">* Connection state changed (HTTP/<span class="number">2</span> confirmed)</span><br><span class="line">* Copying HTTP/<span class="number">2</span> <span class="keyword">data</span> <span class="keyword">in</span> stream buffer to connection buffer after upgrade: len=<span class="number">0</span></span><br><span class="line">* <span class="keyword">Using</span> Stream ID: 1 (easy handle 0x7fcc52805e00)</span><br><span class="line">&gt; GET / HTTP/<span class="number">2</span></span><br><span class="line">&gt; Host: integration<span class="literal">-fred2</span>.fredhuang.com</span><br><span class="line">&gt; User<span class="literal">-Agent</span>: <span class="built_in">curl</span>/<span class="number">7.54</span>.<span class="number">0</span></span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt;</span><br><span class="line">* Connection state changed (MAX_CONCURRENT_STREAMS updated)!</span><br><span class="line">&lt; HTTP/<span class="number">2</span> <span class="number">400</span></span><br><span class="line">&lt; server: Tengine</span><br><span class="line">&lt; date: Fri, <span class="number">01</span> Nov <span class="number">2019</span> <span class="number">11</span>:<span class="number">25</span>:<span class="number">28</span> GMT</span><br><span class="line">&lt; content<span class="literal">-type</span>: text/html</span><br><span class="line">&lt; content<span class="literal">-length</span>: <span class="number">685</span></span><br><span class="line">&lt;</span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">&quot;-//IETF//DTD HTML 2.0//EN&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;<span class="number">400</span> No required SSL certificate was sent&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;<span class="number">400</span> Bad Request&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;center&gt;No required SSL certificate was sent&lt;/center&gt;</span><br><span class="line"> Sorry <span class="keyword">for</span> the inconvenience.&lt;br/&gt;</span><br><span class="line">Please report this message and include the following information to us.&lt;br/&gt;</span><br><span class="line">Thank you very much!&lt;/p&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;URL:&lt;/td&gt;</span><br><span class="line">&lt;td&gt;https://integration<span class="literal">-fred2</span>.fredhuang.com:<span class="number">444</span>/&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;Server:&lt;/td&gt;</span><br><span class="line">&lt;td&gt;cag<span class="literal">-access</span><span class="literal">-tengine011192099198</span>.au49&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;Date:&lt;/td&gt;</span><br><span class="line">&lt;td&gt;<span class="number">2019</span>/<span class="number">11</span>/<span class="number">01</span> <span class="number">19</span>:<span class="number">25</span>:<span class="number">28</span>&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;hr/&gt;Powered by Tengine&lt;hr&gt;&lt;center&gt;tengine&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="5-Java-调用"><a href="#5-Java-调用" class="headerlink" title="5.Java 调用"></a>5.Java 调用</h2><p>由于使用的是自签名证书，使用 <code>ApacheHttpClient</code> 去调用的话，需要将服务器证书加入可信任证书库中，才能成功调用，也可以在代码中简单忽略证书。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> <span class="variable">$JAVA_HOME</span></span><br><span class="line"><span class="variable">$</span> sudo ./bin/keytool <span class="literal">-import</span> <span class="literal">-alias</span> ttt <span class="literal">-keystore</span> cacerts <span class="operator">-file</span> /Users/fred/temp/cert5/server.crt</span><br></pre></td></tr></table></figure>

<p>将服务器端公钥证书设置为可信证书后，使用以下代码可以直接发起带客户端证书的 <code>HTTPS</code> 请求：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.ssl.SSLConnectionSocketFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.ssl.SSLContexts;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLContext;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyStore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpClientWithClientCert</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String PFX_PATH = <span class="string">&quot;/Users/fred/temp/cert5/client.p12&quot;</span>;    <span class="comment">//客户端证书路径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String PFX_PWD = <span class="string">&quot;123456&quot;</span>;    <span class="comment">//客户端证书密码</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sslRequestGet</span><span class="params">(String url)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        KeyStore keyStore = KeyStore.getInstance(<span class="string">&quot;PKCS12&quot;</span>);</span><br><span class="line">        InputStream instream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(PFX_PATH));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            keyStore.load(instream, PFX_PWD.toCharArray());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            instream.close();</span><br><span class="line">        &#125;</span><br><span class="line">        SSLContext sslcontext = SSLContexts.custom().loadKeyMaterial(keyStore, PFX_PWD.toCharArray()).build();</span><br><span class="line">        SSLConnectionSocketFactory sslsf = <span class="keyword">new</span> SSLConnectionSocketFactory(sslcontext</span><br><span class="line">                , <span class="keyword">new</span> String[] &#123; <span class="string">&quot;TLSv1&quot;</span> &#125;    <span class="comment">// supportedProtocols ,这里可以按需要设置</span></span><br><span class="line">                , <span class="keyword">null</span>    <span class="comment">// supportedCipherSuites</span></span><br><span class="line">                , SSLConnectionSocketFactory.getDefaultHostnameVerifier());</span><br><span class="line"></span><br><span class="line">        CloseableHttpClient httpclient = HttpClients.custom().setSSLSocketFactory(sslsf).build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            HttpGet httpget = <span class="keyword">new</span> HttpGet(url);</span><br><span class="line">            <span class="comment">//httpget.addHeader(&quot;host&quot;, &quot;integration-fred2.fredhuang.com&quot;);// 设置一些heander等</span></span><br><span class="line">            CloseableHttpResponse response = httpclient.execute(httpget);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                HttpEntity entity = response.getEntity();</span><br><span class="line">                String jsonStr = EntityUtils.toString(response.getEntity(), <span class="string">&quot;UTF-8&quot;</span>);<span class="comment">//返回结果</span></span><br><span class="line">                EntityUtils.consume(entity);</span><br><span class="line">                <span class="keyword">return</span> jsonStr;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            httpclient.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(System.getProperty(<span class="string">&quot;java.home&quot;</span>));</span><br><span class="line">        System.out.println(sslRequestGet(<span class="string">&quot;https://integration-fred2.fredhuang.com/test&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-存疑"><a href="#6-存疑" class="headerlink" title="6. 存疑"></a>6. 存疑</h2><p>网上很多文章都描述到 <code>Nginx</code> 配置中的客户端证书（<code>ssl_client_certificate</code>）可以配置根证书 root.crt，然后就可以适配所有这个根证书办法的客户端公钥证书了。我试了，使用 root.crt 作为 <code>ssl_client_certificate</code> 的值，然后使用 client.crt 来访问，发现不行，<code>Nginx</code> 会报这个错误：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>400 The SSL certificate error<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>400 Bad Request<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span>The SSL certificate error<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span><span class="tag">&lt;<span class="name">center</span>&gt;</span>nginx/1.17.5<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个特性原作者一直没有配置成功 (我也没配置成功)，有可能是配置有问题，也有可能是网上文章不靠谱，写错了。</p>
<blockquote>
<p>本文转载自：「阿里云开发者社区」，原文：<a href="https://tinyurl.com/yaamh7vf">https://tinyurl.com/yaamh7vf</a> ，版权归原作者所有。欢迎投稿，投稿邮箱: <a href="mailto:editor@hi-linux.com">editor@hi-linux.com</a>。</p>
</blockquote>
<h2 id="7-扩展阅读-本文核心"><a href="#7-扩展阅读-本文核心" class="headerlink" title="7. 扩展阅读 (本文核心)"></a>7. 扩展阅读 (本文核心)</h2><p>在原文基础上，我在分享一个你在大多数网站和搜索引擎中都找不到的很实用的小技巧，说得这么神秘到底是什么呢？<br>那就是使用受信证书进行双向认证，网上大多数文章介绍的实现 <code>HTTPS</code> 双向认证的文章都是使用 <code>CA</code> 自签的方式进行。虽然这能实现目的，但方法不太优雅。<br>在 <code>SSL</code> 证书全面普及的当下，你其实很有必要申请一个受信证书来进行 <code>HTTPS</code> 双向认证。这样看上去不但更权威，而且实现上也更便捷一些。</p>
<h3 id="使用受信证书进行双向认证"><a href="#使用受信证书进行双向认证" class="headerlink" title="使用受信证书进行双向认证"></a>使用受信证书进行双向认证</h3><p>要使用受信证书进行认证的前提条件：当然是你必须有一个权威 CA 机构给你签发的证书。</p>
<ul>
<li>如果你是土豪，随便购买一个就行了。</li>
<li>如果你囊中羞涩，也不要紧，可以去申请一个免费的 <code>SSL</code> 证书。目前 <code>Let&#39;s Encrypt</code>、<code>阿里云</code> 都可以申请，具体方法就不在这展开了，你可以直接在公众号上搜索相关文章。</li>
<li>为了便于管理和多场景使用，建议直接申请通配证书。</li>
</ul>
<p>证书准备完成后，接下来当然是直接使用它。因为是受信证书，上面所有的证书自签操作都不需要了，你只需直接配置 <code>Nginx</code> 就可以了。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/accesse.log  main;</span><br><span class="line">    <span class="attribute">server_name</span>  ci.hi-linux.com;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span>      /etc/ssl/certs/hi-linux.com/hi-linux.com.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span>  /etc/ssl/certs/hi-linux.com/hi-linux.com.key;</span><br><span class="line">    <span class="attribute">ssl_client_certificate</span> /etc/ssl/certs/hi-linux.com/hi-linux.com.pem;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_verify_depth</span> <span class="number">3</span>;</span><br><span class="line">    <span class="attribute">ssl_session_timeout</span>  <span class="number">5m</span>;</span><br><span class="line">    <span class="attribute">ssl_verify_client</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_protocols</span>  SSLv2 SSLv3 TLSv1;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span> ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span>   <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span>   http://ci/;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host $host:$server_port;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP $remote_addr;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-Proto $scheme;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：<code>ssl_certificate</code> 指定的是证书，<code>ssl_certificate_key</code> 指定是证书对应的私钥，请自行将对应证书文件放到配置文件中指定的目录中。<br>以上配置段和上面的自签证书大同小异，主要需注意的有 <code>ssl_client_certificate</code> 和 <code>ssl_verify_depth</code> 这两个参数。</p>
<ul>
<li><code>ssl_client_certificate</code> 主要用于指定客户端所使用的证书，这里可以直接使用受信证书机构签发的证书文件。</li>
<li><code>ssl_verify_depth</code> 这个参数是使用受信证书能成功进行客户端验证的关键，注意它的值是 <code>3</code>。</li>
</ul>
<p>因为当 <code>ssl_verify_depth</code> 设置为 <code>1</code>（ <code>Nginx</code> 的默认值）的时候，服务端只会接受直接被 <code>CA</code> 签发的客户端证书或自签名的证书。也就是说，直接尝试使用中级 <code>CA</code> 来验证客户端是无法通过的，<code>OpenSSL</code> 会自动的去找中级 <code>CA</code> 的签发者并一层层验证上去，直到找到根证书。<br>所以，就算将中级 <code>CA</code> 和根 <code>CA</code> 都放在信任证书列表中，由于最终 <code>ssl_verify_depth</code> 为 <code>2</code> 的缘故，验证还是通不过的。<br>因此，在实际使用的时候，需要注意以下两点：</p>
<ul>
<li>CA 文件中必须同时存在 中级 <code>CA</code> 和根 <code>CA</code>，必须构成完整证书链，不能少任何一个；</li>
<li>默认的验证深度 <code>ssl_verify_depth</code> 是 1，中级 <code>CA</code> 签发的客户端证书一律无法通过认证，需要增大该值，所以我们上面配置中 <code>ssl_verify_depth</code> 值为 <code>3</code> 。</li>
</ul>
<p>为了客户端方便导入，你同样还是需要将证书文件转换成 P12 格式。当然你还可以在转换的过程中给证书加个密码，以保证证书的安全。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ openssl pkcs12 -export -clcerts -in hi-linux.com.pem -inkey hi-linux.com.key -out hi-linux.com-client.p12</span><br></pre></td></tr></table></figure>

<p>至此，<code>HTTPS</code> 双向证书的实现就讲完了，如果你还有什么更好的补充，欢迎大家积极留言交流哟！</p>
]]></content>
      <tags>
        <tag>转载</tag>
        <tag>网络</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>SDWebImage 不携带 Cookie 的问题</title>
    <url>/2022/11/15/SDWebImage/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p>&#8195;&#8195;OC 中常用的轮播图控件是 <code>SDCycleScrollView</code>，基本上满足轮播的需求，当然，如果需要花里胡哨的自定义样式，还是要自己改的…</p>
<p>&#8195;&#8195;今天想记录的一个小问题是：轮播图要加载的图片需要通过认证才可以访问，而认证信息是由服务器颁发、通过 Cookie 下发到客户端。问题是轮播图没有自动携带 Cookie，导致认证失败、图片加载失败。</p>
<h2 id="SDK-的版本："><a href="#SDK-的版本：" class="headerlink" title="SDK 的版本："></a>SDK 的版本：</h2><p><code>SDCycleScrollView</code> v1.82<br><code>SDWebImage</code> v5.12.6</p>
<h2 id="分析过程："><a href="#分析过程：" class="headerlink" title="分析过程："></a>分析过程：</h2><p>不想看的话，请直接跳到<a href="#%E7%BB%93%E6%9E%9C%EF%BC%9A">【结果】</a>。</p>
<ol>
<li><code>SDCycleScrollView</code> 给每一个 cell 设置图片的位置为 SDCycleScrollView.m:</li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">UICollectionViewCell</span> *)collectionView:(<span class="built_in">UICollectionView</span> *)collectionView cellForItemAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath</span><br><span class="line">&#123;</span><br><span class="line">    SDCollectionViewCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:ID forIndexPath:indexPath];</span><br><span class="line">  ...</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>.onlyDisplayText &amp;&amp; [imagePath isKindOfClass:[<span class="built_in">NSString</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([imagePath hasPrefix:<span class="string">@&quot;http&quot;</span>]) &#123;</span><br><span class="line">            [cell.imageView sd_setImageWithURL:[<span class="built_in">NSURL</span> URLWithString:imagePath] placeholderImage:<span class="keyword">self</span>.placeholderImage];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ...</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">return</span> cell;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;可见，如果是网络图片，使用的 API 是 -[SDAnimatedImageView sd_setImageWithURL:placeholderImage:];，那如果处理 Cookie 的话，应该也是针对 <code>SDWebImage</code>。</p>
<ol start="2">
<li><code>SDWebImage</code> -&gt; <code>SDAnimatedImageView.h</code> 提供的几个 API 其实调用的都是同一个方法：</li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Set the imageView `image` with an `url`, placeholder, custom options and context.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The download is asynchronous and cached.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param url            The url for the image.</span></span><br><span class="line"><span class="comment"> * @param placeholder    The image to be set initially, until the image request finishes.</span></span><br><span class="line"><span class="comment"> * @param options        The options to use when downloading the image. @see SDWebImageOptions for the possible values.</span></span><br><span class="line"><span class="comment"> * @param context        A context contains different options to perform specify changes or processes, see `SDWebImageContextOption`. This hold the extra objects which `options` enum can not hold.</span></span><br><span class="line"><span class="comment"> * @param progressBlock  A block called while image is downloading</span></span><br><span class="line"><span class="comment"> *                       @note the progress block is executed on a background queue</span></span><br><span class="line"><span class="comment"> * @param completedBlock A block called when operation has been completed. This block has no return value</span></span><br><span class="line"><span class="comment"> *                       and takes the requested UIImage as first parameter. In case of error the image parameter</span></span><br><span class="line"><span class="comment"> *                       is nil and the second parameter may contain an NSError. The third parameter is a Boolean</span></span><br><span class="line"><span class="comment"> *                       indicating if the image was retrieved from the local cache or from the network.</span></span><br><span class="line"><span class="comment"> *                       The fourth parameter is the original image url.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)sd_setImageWithURL:(<span class="keyword">nullable</span> <span class="built_in">NSURL</span> *)url</span><br><span class="line">          placeholderImage:(<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)placeholder</span><br><span class="line">                   options:(SDWebImageOptions)options</span><br><span class="line">                   context:(<span class="keyword">nullable</span> SDWebImageContext *)context</span><br><span class="line">                  progress:(<span class="keyword">nullable</span> SDImageLoaderProgressBlock)progressBlock</span><br><span class="line">                 completed:(<span class="keyword">nullable</span> SDExternalCompletionBlock)completedBlock;</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;需要注意一个参数：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">* @param options        The options to use when downloading the image. @see SDWebImageOptions <span class="keyword">for</span> the possible values.</span><br><span class="line"></span><br><span class="line"><span class="comment">/// WebCache options</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSUInteger</span>, SDWebImageOptions) &#123;</span><br><span class="line">  ...</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Handles cookies stored in NSHTTPCookieStore by setting</span></span><br><span class="line"><span class="comment">     * NSMutableURLRequest.HTTPShouldHandleCookies = YES;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SDWebImageHandleCookies = <span class="number">1</span> &lt;&lt; <span class="number">5</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;;		</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;我看网上大部分博客都在说，把这一个选项设置一下，在 SDCycleScrollView.m 中使用另一个 API 设置图片就可以了：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">UICollectionViewCell</span> *)collectionView:(<span class="built_in">UICollectionView</span> *)collectionView cellForItemAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath</span><br><span class="line">&#123;</span><br><span class="line">    SDCollectionViewCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:ID forIndexPath:indexPath];</span><br><span class="line">  ...</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>.onlyDisplayText &amp;&amp; [imagePath isKindOfClass:[<span class="built_in">NSString</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([imagePath hasPrefix:<span class="string">@&quot;http&quot;</span>]) &#123;</span><br><span class="line">            [cell.imageView sd_setImageWithURL:[<span class="built_in">NSURL</span> URLWithString:imagePath] placeholderImage:<span class="keyword">self</span>.placeholderImage options:SDWebImageHandleCookies];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ...</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">return</span> cell;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;首先，对于改三方 SDK 源码的行为，小咪是相当鄙视的😂，其次，改了以后并不管用呀😂，是我哪里理解错了吗…不知道那些博客是不是互相抄来抄去，标点符号都一模一样。<br>&#8195;&#8195;但既然 <code>SDWebImage</code> 的注释都说了，设置 cookie 就是用这个 option，那我们点进去看看为什么没起作用，一层一层调用关系的查看，看到最后下载图片的操作都是在同一个地方：<code>SDWebImageDownloader</code>。</p>
<ol start="3">
<li><code>SDWebImageDownloader.m</code> 中把 <code>SDWebImageHandleCookies</code> 转为了 <code>SDWebImageDownloaderHandleCookies</code>，两个 option 的含义其实是一样的。</li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">id</span>&lt;SDWebImageOperation&gt;)requestImageWithURL:(<span class="built_in">NSURL</span> *)url options:(SDWebImageOptions)options context:(SDWebImageContext *)context progress:(SDImageLoaderProgressBlock)progressBlock completed:(SDImageLoaderCompletedBlock)completedBlock &#123;</span><br><span class="line">    <span class="built_in">UIImage</span> *cachedImage = context[SDWebImageContextLoaderCachedImage];</span><br><span class="line">    </span><br><span class="line">    SDWebImageDownloaderOptions downloaderOptions = <span class="number">0</span>;</span><br><span class="line">  ...</span><br><span class="line">    <span class="keyword">if</span> (options &amp; SDWebImageHandleCookies) downloaderOptions |= SDWebImageDownloaderHandleCookies;</span><br><span class="line">  ...</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> downloadImageWithURL:url options:downloaderOptions context:context progress:progressBlock completed:completedBlock];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;继续往 return 的下一个方法里看，就能找到关键的位置了：</p>
<p>&#8195;&#8195;在下面这个方法中初始化了一个 <code>SDWebImageDownloaderOperation</code> 和 <code>SDWebImageDownloadToken</code> 用来发请求下载图片，但是在这里拦截到的 request header 还是没有 cookie 的。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">nullable</span> SDWebImageDownloadToken *)downloadImageWithURL:(<span class="keyword">nullable</span> <span class="built_in">NSURL</span> *)url</span><br><span class="line">                                                   options:(SDWebImageDownloaderOptions)options</span><br><span class="line">                                                   context:(<span class="keyword">nullable</span> SDWebImageContext *)context</span><br><span class="line">                                                  progress:(<span class="keyword">nullable</span> SDWebImageDownloaderProgressBlock)progressBlock</span><br><span class="line">                                                 completed:(<span class="keyword">nullable</span> SDWebImageDownloaderCompletedBlock)completedBlock &#123;</span><br><span class="line">	...</span><br><span class="line">    </span><br><span class="line">    SD_LOCK(_operationsLock);</span><br><span class="line">    <span class="keyword">id</span> downloadOperationCancelToken;</span><br><span class="line">    <span class="built_in">NSOperation</span>&lt;SDWebImageDownloaderOperation&gt; *operation = [<span class="keyword">self</span>.URLOperations objectForKey:url];</span><br><span class="line">    <span class="comment">// There is a case that the operation may be marked as finished or cancelled, but not been removed from `self.URLOperations`.</span></span><br><span class="line">    <span class="keyword">if</span> (!operation || operation.isFinished || operation.isCancelled) &#123;</span><br><span class="line">        operation = [<span class="keyword">self</span> createDownloaderOperationWithUrl:url options:options context:context];</span><br><span class="line">	...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	...</span><br><span class="line">    &#125;</span><br><span class="line">    SD_UNLOCK(_operationsLock);</span><br><span class="line">    </span><br><span class="line">    SDWebImageDownloadToken *token = [[SDWebImageDownloadToken alloc] initWithDownloadOperation:operation];</span><br><span class="line">    token.url = url;</span><br><span class="line">    token.request = operation.request;</span><br><span class="line">    token.downloadOperationCancelToken = downloadOperationCancelToken;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> token;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续往下看 ↓</p>
<p><code>operation = [self createDownloaderOperationWithUrl:url options:options context:context];</code> </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSOperation</span>&lt;SDWebImageDownloaderOperation&gt; *)createDownloaderOperationWithUrl:(<span class="keyword">nonnull</span> <span class="built_in">NSURL</span> *)url</span><br><span class="line">                                                                                  options:(SDWebImageDownloaderOptions)options</span><br><span class="line">                                                                                  context:(<span class="keyword">nullable</span> SDWebImageContext *)context &#123;</span><br><span class="line">    <span class="built_in">NSTimeInterval</span> timeoutInterval = <span class="keyword">self</span>.config.downloadTimeout;</span><br><span class="line">    <span class="keyword">if</span> (timeoutInterval == <span class="number">0.0</span>) &#123;</span><br><span class="line">        timeoutInterval = <span class="number">15.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// In order to prevent from potential duplicate caching (NSURLCache + SDImageCache) we disable the cache for image requests if told otherwise</span></span><br><span class="line">    <span class="built_in">NSURLRequestCachePolicy</span> cachePolicy = options &amp; SDWebImageDownloaderUseNSURLCache ? <span class="built_in">NSURLRequestUseProtocolCachePolicy</span> : <span class="built_in">NSURLRequestReloadIgnoringLocalCacheData</span>;</span><br><span class="line">    <span class="built_in">NSMutableURLRequest</span> *mutableRequest = [[<span class="built_in">NSMutableURLRequest</span> alloc] initWithURL:url cachePolicy:cachePolicy timeoutInterval:timeoutInterval];</span><br><span class="line">    mutableRequest.HTTPShouldHandleCookies = SD_OPTIONS_CONTAINS(options, SDWebImageDownloaderHandleCookies);</span><br><span class="line">    mutableRequest.HTTPShouldUsePipelining = <span class="literal">YES</span>;</span><br><span class="line">    SD_LOCK(_HTTPHeadersLock);</span><br><span class="line">    mutableRequest.allHTTPHeaderFields = <span class="keyword">self</span>.HTTPHeaders;</span><br><span class="line">    SD_UNLOCK(_HTTPHeadersLock);</span><br><span class="line">    	</span><br><span class="line">	...                                                                                    </span><br><span class="line">                                                                                    </span><br><span class="line">    <span class="keyword">return</span> operation;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>…</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这句 SDWebImageDownloaderHandleCookies 还确实是加了。</span></span><br><span class="line">mutableRequest.HTTPShouldHandleCookies = SD_OPTIONS_CONTAINS(options, SDWebImageDownloaderHandleCookies);</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;但是…注意被小🔐包围的这句代码，我们知道 cookie 是 HTTP 协议头部信息中的一个字段，在这里使用 <code>self.HTTPHeaders</code> 覆盖了 <code>allHTTPHeaderFields</code>，会导致所有的头部信息都是空的，因为我们没有单独给  <code>self.HTTPHeaders</code> 添加内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SD_LOCK(_HTTPHeadersLock);</span><br><span class="line">mutableRequest.allHTTPHeaderFields = self.HTTPHeaders;</span><br><span class="line">SD_UNLOCK(_HTTPHeadersLock);</span><br></pre></td></tr></table></figure>

<p>分析过程 End…</p>
<h2 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h2><p>找一个合适的位置给 <code>SDWebImageDownloader</code> 添加必要的头部信息就可以了。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//给SD设置一个新的cookie</span></span><br><span class="line"><span class="built_in">NSString</span> *sdCookie = <span class="string">@&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">NSHTTPCookie</span> *cookie <span class="keyword">in</span> [<span class="built_in">NSHTTPCookieStorage</span> sharedHTTPCookieStorage].cookies) &#123;</span><br><span class="line">    sdCookie = [sdCookie stringByAppendingFormat:<span class="string">@&quot;%@=%@;&quot;</span>, cookie.name, cookie.value];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ([sdCookie hasSuffix:<span class="string">@&quot;;&quot;</span>]) &#123;</span><br><span class="line">    sdCookie = [sdCookie substringToIndex:sdCookie.length - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">SDWebImageDownloader *downloader = [SDWebImageManager sharedManager].imageLoader;</span><br><span class="line">[downloader setValue:sdCookie forHTTPHeaderField:<span class="string">@&quot;Cookie&quot;</span>];</span><br></pre></td></tr></table></figure>



<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies">[HTTP Cookie 文档参考]</a>可以随便捡一个网络请求的 header 看看内容…</p>
<ol>
<li>服务端下发 cookie 是通过响应标头中 <code>Set-Cookie</code> 字段，多个 cookie 就加多个 <code>Set-Cookie</code>，模拟一下：</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">🤓  ~  <span class="built_in">curl</span> <span class="string">&#x27;https://tommygirl.cn/httpbin/cookies/set?yummy_cookie=choco&amp;tasty_cookie=strawberry&#x27;</span> <span class="literal">-i</span></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">302</span> FOUND</span><br><span class="line">Server: nginx</span><br><span class="line">Date: Thu, <span class="number">08</span> Dec <span class="number">2022</span> <span class="number">08</span>:<span class="number">52</span>:<span class="number">34</span> GMT</span><br><span class="line">Content<span class="literal">-Type</span>: text/html; charset=utf<span class="literal">-8</span></span><br><span class="line">Content<span class="literal">-Length</span>: <span class="number">223</span></span><br><span class="line">Connection: keep<span class="literal">-alive</span></span><br><span class="line">Location: /cookies</span><br><span class="line"><span class="built_in">Set-Cookie</span>: yummy_cookie=choco; Path=/</span><br><span class="line"><span class="built_in">Set-Cookie</span>: tasty_cookie=strawberry; Path=/</span><br><span class="line">Access<span class="literal">-Control</span><span class="literal">-Allow</span><span class="literal">-Origin</span>: *</span><br><span class="line">Access<span class="literal">-Control</span><span class="literal">-Allow</span><span class="literal">-Credentials</span>: true</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">&quot;-//W3C//DTD HTML 3.2 Final//EN&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Redirecting...&lt;/title&gt;</span><br><span class="line">&lt;h1&gt;Redirecting...&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;You should be redirected automatically to target URL: &lt;a href=<span class="string">&quot;/cookies&quot;</span>&gt;/cookies&lt;/a&gt;.  <span class="keyword">If</span> not click the link.%</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>客户端访问服务器时，会根据 cookie 的路径和有效期等属性，选择携带哪些 cookie，对应请求标头中 <code>Cookie</code> 字段，多个 cookie 使用 <code>;</code> 分隔，模拟一下：</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">🤓  ~  <span class="built_in">curl</span> <span class="string">&#x27;https://tommygirl.cn/httpbin/anything&#x27;</span> <span class="literal">-i</span></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Server: nginx/<span class="number">1.20</span>.<span class="number">1</span></span><br><span class="line">Date: Thu, <span class="number">08</span> Dec <span class="number">2022</span> <span class="number">09</span>:<span class="number">01</span>:<span class="number">06</span> GMT</span><br><span class="line">Content<span class="literal">-Type</span>: application/json</span><br><span class="line">Content<span class="literal">-Length</span>: <span class="number">390</span></span><br><span class="line">Connection: keep<span class="literal">-alive</span></span><br><span class="line">Access<span class="literal">-Control</span><span class="literal">-Allow</span><span class="literal">-Credentials</span>: true</span><br><span class="line">Access<span class="literal">-Control</span><span class="literal">-Allow</span><span class="literal">-Origin</span>: *</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;args&quot;</span>: &#123;&#125;,</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;form&quot;</span>: &#123;&#125;,</span><br><span class="line">  <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;localhost:8000&quot;</span>,</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;curl/7.79.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;yummy_cookie=choco; tasty_cookie=strawberry&quot;</span>,</span><br><span class="line">    <span class="string">&quot;X-Forwarded-For&quot;</span>: <span class="string">&quot;*.*.*.*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;X-Real-Ip&quot;</span>: <span class="string">&quot;*.*.*.*&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;json&quot;</span>: &#123;&#125;,</span><br><span class="line">  <span class="string">&quot;method&quot;</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">  <span class="string">&quot;url&quot;</span>: <span class="string">&quot;/anything&quot;</span>,</span><br><span class="line">  <span class="string">&quot;server_endpoints&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;172.21.0.13:8000&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;client&quot;</span>: <span class="string">&quot;127.0.0.1:34076&quot;</span></span><br><span class="line">&#125;%</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;至于 <code>Cookie</code> 末尾的 <code>;</code> 可删可不删，功能上暂时没发现有什么影响，但既然格式都是 HTTP 标准规定的，那还是删一下吧。</p>
<hr>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/flag.jpeg"></p>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>SDWebImageErrorDomain</title>
    <url>/2023/03/24/SDWebImageErrorDomain/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>SDCycleScrollView</code> 和 <code>SDWebImage</code> 是 iOS 开发很常用的两个框架，做图片轮播、图标缓存时最常用。前几天突然报错了，轮播图片加载不出来，查看 Log 的错误信息也是哭笑不得了…</p>
<p>测试的同事反馈，轮播图片一直不显示，主要的错误信息就是 <strong>SDWebImageErrorDomain</strong>：</p>
<p>前期提示：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">Error Domain=SDWebImageErrorDomain Code=<span class="number">2002</span> <span class="string">&quot;Operation cancelled by user during sending the request&quot;</span> UserInfo=&#123;<span class="built_in">NSLocalizedDescription</span>=Operation cancelled by user during sending the request&#125;</span><br></pre></td></tr></table></figure>

<p>连续刷新测试提示：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">Error Domain=SDWebImageErrorDomain Code=<span class="number">1003</span> <span class="string">&quot;Image url is blacklisted&quot;</span> UserInfo=&#123;<span class="built_in">NSLocalizedDescription</span>=Image url is blacklisted&#125;</span><br></pre></td></tr></table></figure>

<p>偶尔提示：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">Error Domain=<span class="built_in">NSURLErrorDomain</span> Code=<span class="number">-1017</span> <span class="string">&quot;无法解析响应&quot;</span> UserInfo=&#123;_kCFStreamErrorCodeKey=<span class="number">-1</span>, <span class="built_in">NSUnderlyingError</span>=<span class="number">0x282ea4660</span> &#123;Error Domain=kCFErrorDomainCFNetwork Code=<span class="number">-1017</span> <span class="string">&quot;(null)&quot;</span> UserInfo=&#123;<span class="built_in">NSErrorPeerAddressKey</span>=&lt;<span class="built_in">CFData</span> <span class="number">0x2802f6bc0</span> [<span class="number">0x2133ecfd0</span>]&gt;&#123;length = <span class="number">16</span>, capacity = <span class="number">16</span>, bytes = <span class="number">0x100222b8c0a81dc40000000000000000</span>&#125;, _kCFStreamErrorCodeKey=<span class="number">-1</span>, _kCFStreamErrorDomainKey=<span class="number">4</span>&#125;&#125;, _NSURLErrorFailingURLSessionTaskErrorKey=LocalDataTask &lt;<span class="number">78</span>D3EF9A-BA05<span class="number">-43</span>FC-B373<span class="number">-740</span>CE983D263&gt;.&lt;<span class="number">1</span>&gt;, _NSURLErrorRelatedURLSessionTaskErrorKey=(</span><br><span class="line">    <span class="string">&quot;LocalDataTask &lt;78D3EF9A-BA05-43FC-B373-740CE983D263&gt;.&lt;1&gt;&quot;</span></span><br><span class="line">), <span class="built_in">NSLocalizedDescription</span>=无法解析响应, <span class="built_in">NSErrorFailingURLStringKey</span>=https:<span class="comment">//xxx.xxx.xx/xx/xx, NSErrorFailingURLKey=https://xxx.xxx.xx/xx/xx, _kCFStreamErrorDomainKey=4&#125;</span></span><br></pre></td></tr></table></figure>

<p>乍一看莫名其妙的，网络抓包看一下，其实是因为网络请求失败了，访问图片的 URL 需要过认证，但是客户端缺少了一个 cookie，被重定向到业务系统的登录页面了…然后同一个服务出现太多次请求失败， <code>SDWebImage</code> 就会中断异常的请求、甚至“拉黑”，哈哈。「无法解析响应」是服务端的问题，传过来的图片流被中断了<strong>EOF: Premature EOF encountered</strong> 或者 <strong>transfer closed with outstanding read data remaining</strong>。</p>
]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>URL Loading System 之 NSURLResponse/URLResponse</title>
    <url>/2018/04/20/NSURLResponse/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="NSURLResponse"><a href="#NSURLResponse" class="headerlink" title="NSURLResponse"></a>NSURLResponse</h2><blockquote>
<p>NSURLResponse/URLResponse 类中存放请求的回执信息，在发送网络请求时，如果请求成功，首先会接收到服务端的回执信息，直接开始接收具体的返回数据。与协议或URL方案无关。</p>
</blockquote>
<p>主要有以下几个属性，并且都是<code>只读</code>的，因为是服务器帮我们指定的，所以一般我们是不能自定义这些属性的：</p>
<h3 id="url"><a href="#url" class="headerlink" title="url"></a>url</h3><blockquote>
<p>本次请求的URL地址</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">var</span> url: <span class="type">URL</span>? &#123; <span class="keyword">get</span> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="mimeType"><a href="#mimeType" class="headerlink" title="mimeType"></a>mimeType</h3><blockquote>
<p>返回数据的数据类型（纯文本，视频，语音，超文本等）</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">var</span> mimeType: <span class="type">String</span>? &#123; <span class="keyword">get</span> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="expectedContentLength"><a href="#expectedContentLength" class="headerlink" title="expectedContentLength"></a>expectedContentLength</h3><blockquote>
<p>获取返回数据的内容长度，服务端人员不靠谱的话，这个属性的值可能奇奇怪怪，别问我为什么~</p>
</blockquote>
<p>可以预计该资源的大小，计算下载进度等等。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">var</span> expectedContentLength: <span class="type">Int64</span> &#123; <span class="keyword">get</span> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="textEncodingName"><a href="#textEncodingName" class="headerlink" title="textEncodingName"></a>textEncodingName</h3><blockquote>
<p>获取返回数据的编码方式</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">var</span> textEncodingName: <span class="type">String</span>? &#123; <span class="keyword">get</span> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="suggestedFilename"><a href="#suggestedFilename" class="headerlink" title="suggestedFilename"></a>suggestedFilename</h3><blockquote>
<p>建议的文件名字，MIMEType为扩展名</p>
</blockquote>
<p>如果服务端返回的是一个文件，这个属性是一个建议的文件名字，客户端可以用它来进行保存，当然也可以自定义。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">var</span> suggestedFilename: <span class="type">String</span>? &#123; <span class="keyword">get</span> &#125;</span><br></pre></td></tr></table></figure>



<h2 id="NSHTTPURLResponse"><a href="#NSHTTPURLResponse" class="headerlink" title="NSHTTPURLResponse"></a>NSHTTPURLResponse</h2><blockquote>
<p>NSHTTPURLResponse/HTTPURLResponse 是 NSURLResponse 的一个子类，如果是 HTTP 请求，请求回执会被封装为 NSHTTPURLResponse 对象。</p>
</blockquote>
<p>除了有父类那些属性外，还扩展了几个属性：</p>
<h3 id="statusCode"><a href="#statusCode" class="headerlink" title="statusCode"></a>statusCode</h3><blockquote>
<p>请求的状态码</p>
</blockquote>
<p>标准 HTTP 协议内容，不同的 code 码表示不同的请求状态，参见<a href="https://tommygirl.cn/2015/08/02/HTTP%20%E7%9A%84%E4%B8%80%E7%82%B9%E5%84%BF%E5%B0%8F%E7%9F%A5%E8%AF%86/#%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%BA%94%E7%9A%84%E5%B8%B8%E8%A7%81%E7%8A%B6%E6%80%81">网络响应的常见状态</a> 。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">var</span> statusCode: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="allHeaderFields"><a href="#allHeaderFields" class="headerlink" title="allHeaderFields"></a>allHeaderFields</h3><blockquote>
<p>请求头中所有的字段</p>
</blockquote>
<p>一个字典，所以可以通过 key-value 来取值，一个简单的头部信息可能包含一些默认的 HTTP 头部信息，当然开发中我们也可以和服务端约定好自定义的字段。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">var</span> allHeaderFields: [<span class="type">AnyHashable</span> : <span class="keyword">Any</span>] &#123; <span class="keyword">get</span> &#125;</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">(<span class="operator">&lt;</span>NSHTTPURLResponse: <span class="number">0x60000154cd80</span><span class="operator">&gt;</span> &#123; URL: https:<span class="comment">//httpbin.org/get &#125; &#123; Status Code: 200, Headers &#123;</span></span><br><span class="line">    <span class="string">&quot;Access-Control-Allow-Origin&quot;</span> <span class="operator">=</span>     (</span><br><span class="line">        <span class="string">&quot;*&quot;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="string">&quot;Content-Length&quot;</span> <span class="operator">=</span>     (</span><br><span class="line">        <span class="number">404</span></span><br><span class="line">    );</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span> <span class="operator">=</span>     (</span><br><span class="line">        <span class="string">&quot;application/json&quot;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="type">Date</span> <span class="operator">=</span>     (</span><br><span class="line">        <span class="string">&quot;Thu, 08 Jul 2018 10:13:14 GMT&quot;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="type">Server</span> <span class="operator">=</span>     (</span><br><span class="line">        <span class="string">&quot;gunicorn/19.9.0&quot;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="string">&quot;access-control-allow-credentials&quot;</span> <span class="operator">=</span>     (</span><br><span class="line">        <span class="literal">true</span></span><br><span class="line">    );</span><br><span class="line">&#125; &#125;)</span><br></pre></td></tr></table></figure>



<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>iOS 的接口中，请求回执往往定义的是 <code>NSURLResponse</code> 类型，但是正如我们上面所说，如果是 HTTP 请求，请求回执会被封装为 <code>NSHTTPURLResponse</code>  对象。像获取 <code>statusCode</code>  的时候就需要自己做一下类型转换。</p>
<p>swift 中举例：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> statusCode <span class="operator">=</span> (response <span class="keyword">as?</span> <span class="type">HTTPURLResponse</span>)<span class="operator">?</span>.statusCode <span class="operator">??</span> <span class="operator">-</span><span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> statusCode <span class="operator">==</span> <span class="number">200</span> &#123;</span><br><span class="line">    <span class="comment">//request success.</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="系列："><a href="#系列：" class="headerlink" title="系列："></a>系列：</h2><p><a href="https://tommygirl.cn/2018/04/19/URLLoadingSystem/">URL Loading System[译]</a></p>
<p><a href="https://tommygirl.cn/2018/04/19/NSURLRequest/">NSURLRequest</a></p>
<p><a href="https://tommygirl.cn/2018/04/20/NSURLResponse/">NSURLResponse</a></p>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>其实你没那么重要</title>
    <url>/2023/06/07/Not_important/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/751697013741_.pic.jpg" style="zoom:67%;">

<p>突然释怀的笑。</p>
<hr>
<p>&#8195;&#8195;前两天一个同事和我碎碎念：”我一直以为和某个同事关系挺好的，他有问题我就帮他，结果我有问题的时候，他都没有准备从椅子上站起来，我就下楼抽了根烟，然后就想明白了…“ 乍一听有点像小学生吵架了似的，哈哈，同事马上就开始对自己的人际关系、人性展开了反思，对方有错吗？没错。错只错在我们常常自以为自己很重要，可是自以为这个东西，终究都是没有逻辑的错觉。</p>
<p>&#8195;&#8195;再说说我自己的一个状态，前些年有一段时间特别幼稚、敏感、多疑。敏感到什么程度，给同事发消息，对方回复前，在其他多个工作群里能看到同事回复各种消息，但是他没回复我，什么意思？针对我？忽视我？不重视我的工作？这一串问题下来，是不是听起来头都大了。其实对方只是因为某几个重要的项目群置顶了、手机满屏置顶，个人消息没看到或者很多人的消息还没顾上回复。所以…所以什么，所以我们其实总是自以为自己很重要，甚至可能自以为对方要把我们置顶才算尊重😂，现在想起来真是可笑。敏感的人经常会认为别人在针对他，但我们一个平平无奇的小工，对方何必花这么多心思去针对呢，有时间他还不如喝杯咖啡、抽根烟、摸摸鱼呢。你再看吧，其实你没那么重要。</p>
<p>&#8195;&#8195;另一个重要的社会关系——朋友，人会有各种朋友，交情深的浅的，认识时间长的短的，男的女的，各种各种…我经常遇到有的人，他和自己的好哥们可以互相扶持，这种情感依赖会不自觉的投射到所有的朋友身上，在他眼里所有的朋友就应该是相互扶持、互助互爱的，但其实大家都知道，这是不可能的。某个朋友在你心里重要，只是因为这是你的内心，也是一种”自以为“，在朋友的眼里，你其实没有那么重要。记得之前看过一本书《以幽默的方式过一生》，简单提到过朋友这个话题：</p>
<blockquote>
<p>朋友如三餐。</p>
<p>一类朋友如早餐，对方再好也只会浅尝辄止，嘴上说重要，但大部分时间都是可有可无。</p>
<p>一类朋友如午餐，好不好不重要，重要的是需要，为了生存，每天都得客客气气，绝不可少，深交不了，也得罪不起。</p>
<p>一类朋友如晚餐，在你最疲倦最脆弱的时候陪着你，细嚼慢咽，方品得其中滋味。</p>
<p>其实还有一类朋友如消夜，他们是红颜或者蓝颜知己，深更半夜无话不谈，偶尔让人蠢蠢欲动，却不能作为主餐，吃多了对身体不好。</p>
</blockquote>
<p>朋友如三餐，三餐还可以延伸出更多种…怎么可能一样的重要。</p>
<p>&#8195;&#8195;很多人觉得发生在自己身上的事，就是天大的事儿，觉得全世界的目光都该聚焦在自己身上，更别说朋友了，他们应该马上放下手头的事情来帮自己。只要别人耽搁一会，都觉得不够关心自己。无论什么事，发生了就发生了，肠子悔青了也发生了，抓狂、焦虑、悔恨、尴尬，不管何种情绪，事情都已经发生了。不必把自己看得那么重，没人那么在乎你的，一想或许就通了，自己认为天大的事，在别人眼中或许根本不值一提，其实放不下的只是自己。<strong>发生了，接受，接下来，面对，自己勇敢面对了，也就成长了。</strong>你再看看吧，其实你没那么重要。</p>
<p>&#8195;&#8195;突然想起来之前在短视频里听来的一句话：<strong>别人眼中的你，不是你；你眼中的别人，才是你。</strong>在你眼中，同事应该和你互帮互助，只因为你就是如此对同事的，只因为你是一个热心的人；在你眼中，男生分享日常就表示喜欢你，只因为你就是喜欢他所以才会分享给他；在你眼中，对方不回消息就是针对你，只因为你针对别人的时候就是会故意不回消息；在你眼中，每一个朋友就应该有求必应，只因为你就是对朋友有求必应的人。当我们对任何事物有期待的时候，可能只是因为我们自己是这样的一个人，而并不是对方如何如何，所以，没有谁对谁错，只是需要摆正自己的位置，认清自己。我总觉得人和人的相处，做到基本的真诚，足矣，适当的”看轻“自己，可以规避很多烦恼，至于知己，得之我幸失之我命，全凭缘分。来，让我们默念三遍，其实你没那么重要，其实你没那么重要，其实你真的没那么重要。</p>
<p>&#8195;&#8195;边写边和朋友在聊天，他问，<strong>如果婚后又遇到更喜欢的人怎么办？</strong>听了让人啼笑皆非，他都没结婚呢居然思考这些…还是借用刚刚书中的话吧：</p>
<blockquote>
<p>如果现任符合期待，牢记对方的这些优点，在准备见异思迁的时候，从心里翻出来想想。</p>
<p>如果你觉得自己真的不再在意对方这些优点，而且严重到双方已经完全无法沟通，选择离婚也好，离婚也是法律赋予你的权利，然后去寻找新的期待。</p>
<p>如果你觉得对方这些优点，依然非常珍贵，而且还是自己最在乎的，就在跟新欢投降前，悬崖勒马。否则，见一个爱一个，觉得个个都是真爱，相信我，那肯定是被性器官绑架了自己的爱情观。</p>
<p>在今天这样的社交时代，要认识一个人何其容易，拿起手机摇一摇就可以了。</p>
<p>最难的是，一个人始终了解自己真正的需要。</p>
</blockquote>
<p>是啊，<strong>一个人始终了解自己真正的需要</strong>，挺难的，真难。你希望过什么样的生活，希望找一个什么样的伴侣，希望自己成为什么样的人，希望自己的墓志铭上写什么…</p>
<p>跑题了，不过不重要，都是瞎扯淡。送给所有有缘人一句话吧：<strong>。</strong></p>
<hr>
<p>最后再分享一段书中的选段吧~哈哈，这本书我看了两三遍，确实喜欢，很多想法和作者也是不谋而合。</p>
<blockquote>
<p>《你那点事，有什么好说的》</p>
<p>我们每天面对的事情，大致可以分为三类。</p>
<p>第一类事情是不能告诉别人的，特别是本身自己就做错了的事情。比如，我一个朋友因为挪用公款被开除了，这种事情你当然或许有自己委屈的部分，但打死都不能主动告诉别人，只能憋着。</p>
<p>因为每个人生活都不容易，都有不如意的地方，只是有人有一点痛就龇牙咧嘴唯恐天下不惊，有人闷头咬着牙前行。不必夸大自己的痛苦来感动自己，在正经历更大痛苦的人眼里这是矫情。秋风虽起，依然在寒若冰霜的伤口上笑靥如花，迎风而行。</p>
<p>这类事情如果需要自我处理，可以借鉴心理学里的PRP模型，这个模型分三步来分析问题：</p>
</blockquote>
<pre><code>全然接受（Permission）：接受自己的情绪，不管好的还是不好的，如有必要写出来。
认知重建（Reconstructing）：把对一个事件的解释从负面转变成正面，看会带来哪些有价值的影响。
全局展望（Perspective）：以更广阔前瞻性的视角来看待眼前的情形，一年后我如何看待这个情形。
</code></pre>
<blockquote>
<p>第二类事情是可以告诉别人，但别人根本帮不上的事情。比如，你生病了，那你去挂吊瓶就好了，最多就是发个朋友圈告诉大家，你自己没有放弃治疗，大家来给你点个赞，仅此而已。告诉了别人，你该受的罪继续受，别人的日子也照样过。但这类事情告诉别人的好处，就是可以满足自己的矫情。</p>
<p>第三类事情是可以告诉别人，别人也可以帮上的。这类事情就要去找到那个能帮得上的人，该请客请客，该托关系托关系，该走法院走法院，然后定点精准跟踪。</p>
<p>所谓情商高，无非就是在遇到事情后，分清楚上述三类，然后选择态度处理而已。你唯独没必要做的事情，就是准备轰轰烈烈地架个大喇叭告诉全世界：我遇到事了。</p>
</blockquote>
<p>—— 摘录来自《以幽默的方式过一生》琢磨先生<br><a href="https://itunes.apple.com/WebObjects/MZStore.woa/wa/viewBook?id=0">https://itunes.apple.com/WebObjects/MZStore.woa/wa/viewBook?id=0</a><br>此材料可能受版权保护。</p>
]]></content>
      <tags>
        <tag>读书</tag>
        <tag>我</tag>
      </tags>
  </entry>
  <entry>
    <title>UICollectionView 图片闪烁</title>
    <url>/2023/06/16/SDWebImage_blink/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p>&#8195;&#8195;前两天测试提了一个问题，不方便发图片和视频，那先简单描述一下 App 构造：App 是类似钉钉的一个办公软件，首页也是类似钉钉「办公专区」的页面。测试反馈从后台回到前台时，只要 Tab 切换到首页，首页中 UICollectionView 的部分图标就一定会闪一下；如果在前台切换 Tab 页签的话，偶尔能复现…</p>
<p>&#8195;&#8195;用了这么久的 UICollectionView，我也是第一次遇到这种情况，一开始甚至把锅丢给了苹果，不禁感叹了一下苹果系统做的越来越不稳定🤓；没办法，这种甩锅的行为也不是咱的作风，开始解决吧：<br>&#8195;&#8195;看到很多网友都在讨论 UICollectionViewCell 闪烁的问题，把解决问题的方向也定在了这里，针对 UICollectionView 的 reload 时机、频率、Cell 复用机制、切换多线程，各种方案尝试了一个遍，历经两天一晚的时间，我成功把它改的每一次都闪烁了呢，真棒😂……图标闪烁的速度也是相当快，快到肉眼看不清，突然想起来录个屏、自己不停的回放、慢放、来回拖拽进度条…终于找到了元凶 – <code>SDWebImage</code>，闪烁的图标会先展示目标图片、又展示了一次占位图、又展示了一次目标图片，占位图是一个空位图，所以视觉上看到的是闪烁一下。</p>
<center>
    <div style="display:inline-block;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/sd_1.png" class width="100"></div> -->
    <div style="display:inline-block;margin-left:10px;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/sd_0.png" class width="100"></div>-->
    <div style="display:inline-block;margin-left:10px;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/sd_1.png" class width="100"></div>
</center>

<p>关于 UICollectionView 闪烁的问题，印象中看的几篇文章，有兴趣的自己看吧，我不想转载了，看到它们头疼：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://stackoverflow.com/questions/23740782/uicollectionview-reloaddata-but-view-blinks</span><br><span class="line">https://blog.csdn.net/u013712343/article/details/126748755</span><br><span class="line">https://maweefeng.github.io/15766567217978.html</span><br><span class="line">https://www.jianshu.com/p/94f3912c3e8a</span><br></pre></td></tr></table></figure>

<p>关于使用 SDWebImage 闪烁的问题，其实 SDK 中已经给出了解决方案：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * By default, when the memory cache miss, we query the disk cache asynchronously. This mask can force to query disk cache (when memory cache miss) synchronously.</span></span><br><span class="line"><span class="comment"> * @note These 3 query options can be combined together. For the full list about these masks combination, see wiki page.</span></span><br><span class="line"><span class="comment"> * @note Query data synchronously is not recommend, unless you want to ensure the image is loaded in the same runloop to avoid flashing during cell reusing.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">SDWebImageQueryDiskDataSync = <span class="number">1</span> &lt;&lt; <span class="number">14</span>,</span><br></pre></td></tr></table></figure>

<p>@note Query data synchronously is not recommend, unless you want to ensure the image is loaded in the same runloop to <strong>avoid flashing during cell reusing</strong>.</p>
<p>SDK 中已经给出了非常明确的注释，一开始的方向完全是错误的。哭笑不得，时间都浪费了，所以一定要先搞清楚问题的本质是什么，谋定而后动，而且怎么把内功心法忘了呢：<strong>RTFSC - Read the fucking source code.</strong> </p>
<hr>
<p>SDWebImageOptions 的注释翻译：</p>
<table style="border: 1px solid #C1C1C1;rules: rows;frame: box;cellpadding: 3px;">
      <caption style="border: 0.5px solid #C1C1C1;color: #29B177;">SDWebImageOptions 注释翻译</caption>
    <thead style="border: 0.5px solid #C1C1C1;">
      <tr>
        <th scope="col" style="border: 0.5px solid #C1C1C1;color: #29B177;">Option</th>
        <th scope="col" style="border: 0.5px solid #C1C1C1;color: #29B177;">注释</th>
      </tr>
    </thead>
    <tr>
        <td style="border: 0.5px solid #C1C1C1">SDWebImageRetryFailed</td>
        <td style="border: 0.5px solid #C1C1C1">一般情况下，一个URL下载失败后会被加入黑名单组织下次下载，如果设置了这个option，则不会加入黑名单。</td>
    </tr>
    <tr>
        <td style="border: 0.5px solid #C1C1C1">SDWebImageLowPriority</td>
        <td style="border: 0.5px solid #C1C1C1">默认情况下图片会在交互发生时开始下载，设置了这个option图片就会延迟下载，例如滑动 TableView 时，会在 scrollview 减速时才开始下载。</td>
    </tr>
    <tr>
        <td style="border: 0.5px solid #C1C1C1">SDWebImageProgressiveLoad</td>
        <td style="border: 0.5px solid #C1C1C1">这个option是启用了渐进式下载，像网页加载一样一点一点显示。默认情况下，一次显示完全下载的图片。</td>
    </tr>
    <tr>
        <td style="border: 0.5px solid #C1C1C1">SDWebImageRefreshCached</td>
        <td style="border: 0.5px solid #C1C1C1">对缓存进行刷新。</td>
    </tr>
    <tr>
        <td style="border: 0.5px solid #C1C1C1">SDWebImageContinueInBackground</td>
        <td style="border: 0.5px solid #C1C1C1">后台继续下载。</td>
    </tr>
    <tr>
        <td style="border: 0.5px solid #C1C1C1">SDWebImageHandleCookies</td>
        <td style="border: 0.5px solid #C1C1C1">通过设置 NSMutableURLRequest.HTTPShouldHandleCookies = YES; 处理 Cookie。</td>
    </tr>
    <tr>
        <td style="border: 0.5px solid #C1C1C1">SDWebImageAllowInvalidSSLCertificates</td>
        <td style="border: 0.5px solid #C1C1C1">允许使用不受信任的SSL证书，一般用于测试。</td>
    </tr>
    <tr>
        <td style="border: 0.5px solid #C1C1C1">SDWebImageHighPriority</td>
        <td style="border: 0.5px solid #C1C1C1">默认情况下，图片按照他们加载下载队列中的顺序下载，这个 option 提高下载优先级。</td>
    </tr>
    <tr>
        <td style="border: 0.5px solid #C1C1C1">SDWebImageDelayPlaceholder</td>
        <td style="border: 0.5px solid #C1C1C1">默认情况下，图片开始加载就显示默认图片，这个 option 延迟了默认图的显示知道图片加载完成。</td>
    </tr>
    <tr>
        <td style="border: 0.5px solid #C1C1C1">SDWebImageTransformAnimatedImage</td>
        <td style="border: 0.5px solid #C1C1C1">通常情况下我们不会对下载的图片进行变换，因为可能对图片造成损伤，这个 option 可以让我们对图片进行任意变换。</td>
    </tr>
    <tr>
        <td style="border: 0.5px solid #C1C1C1">SDWebImageAvoidAutoSetImage</td>
        <td style="border: 0.5px solid #C1C1C1">默认情况下，图片在下载后被自动添加到imageView上。这个 option 可以让我们手动添加图片到 imageView 上。</td>
    </tr>
    <tr>
        <td style="border: 0.5px solid #C1C1C1">SDWebImageScaleDownLargeImages</td>
        <td style="border: 0.5px solid #C1C1C1">当下载的图片太大时，允许把它缩小到一个合适的大小再显示。</td>
    </tr>
    <tr>
        <td style="border: 0.5px solid #C1C1C1">SDWebImageQueryMemoryData</td>
        <td style="border: 0.5px solid #C1C1C1">默认情况下，当image已经缓存到内存中时，不会再查询imageData，这个 option 可以设置同时查询imageData，这个查询是异步的，除非指定&#39;SDWebImageQueryMemoryDataSync&#39;。</td>
    </tr>
    <tr>
        <td style="border: 0.5px solid #C1C1C1">SDWebImageQueryMemoryDataSync</td>
        <td style="border: 0.5px solid #C1C1C1">默认情况下，当你只指定&#39;SDWebImageQueryMemoryData&#39;时，会异步查询内存imageData。结合此掩码可以同步查询。但不建议同步查询，除非你想确保图像加载在同一个runloop中，以避免单元格重用时闪烁。</td>
    </tr>
    <tr>
        <td style="border: 0.5px solid #C1C1C1">SDWebImageQueryDiskDataSync</td>
        <td style="border: 0.5px solid #C1C1C1">默认情况下，当内存缓存丢失时，异步查询磁盘缓存。该option可以强制同步查询磁盘缓存。</td>
    </tr>
    <tr>
        <td style="border: 0.5px solid #C1C1C1">SDWebImageFromCacheOnly</td>
        <td style="border: 0.5px solid #C1C1C1">这个 option 可以设置只允许从缓存中获取图片。</td>
    </tr>
    <tr>
        <td style="border: 0.5px solid #C1C1C1">SDWebImageFromLoaderOnly</td>
        <td style="border: 0.5px solid #C1C1C1">这个 option 可以设置只允许从加载器加载图片。</td>
    </tr>
    <tr>
        <td style="border: 0.5px solid #C1C1C1">SDWebImageForceTransition</td>
        <td style="border: 0.5px solid #C1C1C1">默认情况下，当你使用“SDWebImageTransition”在图像加载完成后做一些视图转换时，这个转换只适用于从网络下载的图像。这个option可以强制应用内存和磁盘缓存的视图也转换。</td>
    </tr>
    <tr>
        <td style="border: 0.5px solid #C1C1C1">SDWebImageAvoidDecodeImage</td>
        <td style="border: 0.5px solid #C1C1C1">默认情况下，我们将在查询缓存或者从网络下载之后直接解码图像。这有助于提高性能，因为在屏幕上呈现图像时，首先需要对其进行解码。但这发生在Core Animation的主队列上。所以，这个进程可能会导致内存使用过大。如果由于内存消耗过多而遇到问题，此option可以阻止对图像进行解码。</td>
    </tr>
    <tr>
        <td style="border: 0.5px solid #C1C1C1">SDWebImageDecodeFirstFrameOnly</td>
        <td style="border: 0.5px solid #C1C1C1">默认情况下，会对动图进行解码。这个option强制只解码第一帧并产生静态图像。</td>
    </tr>
    <tr>
        <td style="border: 0.5px solid #C1C1C1">SDWebImagePreloadAllFrames</td>
        <td style="border: 0.5px solid #C1C1C1">默认情况下，对于SDAnimatedImage，是在渲染过程中解码动画图像帧以减少内存使用。但是，当动画图像被许多imageViews共享时，可以指定将动图所有帧预加载到内存中，以减少CPU占用。</td>
    </tr>
    <tr>
        <td style="border: 0.5px solid #C1C1C1">SDWebImageMatchAnimatedImageClass</td>
        <td style="border: 0.5px solid #C1C1C1">使用这个option，可以确保按照用户提供的类回调相应图像。如果无法生成，则会使用代码“SDWebImageErrorBadImageData”的错误。</td>
    </tr>
    <tr>
        <td style="border: 0.5px solid #C1C1C1">SDWebImageWaitStoreCache</td>
        <td style="border: 0.5px solid #C1C1C1">等待图片写入缓存完成再回调。</td>
    </tr>
    <tr>
        <td style="border: 0.5px solid #C1C1C1">SDWebImageTransformVectorImage</td>
        <td style="border: 0.5px solid #C1C1C1">一般情况下不会对矢量图像做变换，因为矢量图像在做变换时会丢失细节。这个option 可以随意转换矢量图。</td>
    </tr>
</table>
]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Server-Sent Events / EventSource</title>
    <url>/2021/02/19/Server-Sent%20Events/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>公司的 OA 项目中，往往需要接入很多业务系统，体现在 App UI 上就类似支付宝首页的九宫格。这些业务系统呢又不一定来自同一家厂商，当 App 需要和他们做一些交互的时候（例如获取每个业务的待办数目，展示在首页图标的角标上），手机端开发者就很头疼了。</p>
<p>就以待办数目为例，接口不统一、参数不统一、响应速度不统一、随时接入新的系统，交互过程如果写在 App 中，那就需要频繁的更新 App，这对用户来说，是非常不友好的。这个时候通常遵循的一个原则就是，将变化放在 OA-Server，OA-App 只需要与 OA-Server 约定好接口规范，只访问自己的后台即可，与各个业务的交互交给后台。那 OA-App 发送请求到  OA-Server，OA-Server 收到多个业务响应的待办数目以后怎么及时的通知 OA-App 呢？</p>
<span id="more"></span>

<p>提到服务端数据推送，可能一下子容易想到 WebSocket。WebSocket 是一种全新的协议，随着 HTML5 草案的不断完善，越来越多的现代浏览器开始全面支持 WebSocket 技术了，它将 TCP 的 Socket（套接字）应用在了web page 上，从而使通信双方建立起一个保持在活动状态连接通道。它是一种全双工通信，而我们前面提到的获取待办数目的场景，App 发送一次请求就可以，server 拿到各个业务的数据后再分别实时返回给 App ，更像是一种单向通信，使用 WebSocket 岂不是杀鸡用牛刀？那轮询呢？耗费 server 资源不说，不一定达到实时的效果。(PS：这里吐槽下客户，待办数有的 999 多，也不处理，居然只会嫌弃我们数据获取的不及时🤓)……</p>
<p>好巧不巧，看到了另一个轻量级的方案：Server-Sent Events。</p>
<h2 id="Server-Sent-Events"><a href="#Server-Sent-Events" class="headerlink" title="Server-Sent Events"></a>Server-Sent Events</h2><p>HTML5 中有一个轻量的替代 WebSocket的方案：Server-Sent Events，以下简称 SSE。</p>
<h3 id="SSE-本质"><a href="#SSE-本质" class="headerlink" title="SSE 本质"></a>SSE 本质</h3><p>严格地说，HTTP 协议无法做到服务器主动推送信息。但是，有一种变通方法，就是服务器向客户端声明，接下来要发送的是流信息（streaming）。也就是说，发送的不是一次性的数据包，而是一个数据流，会连续不断地发送过来。这时，客户端不会关闭连接，会一直等着服务器发过来的新的数据流，视频播放就是这样的例子。本质上，这种通信就是以流信息的方式，完成一次用时很长的下载。SSE 就是利用这种机制，使用流信息向浏览器推送信息。</p>
<h3 id="SSE-特点"><a href="#SSE-特点" class="headerlink" title="SSE 特点"></a>SSE 特点</h3><p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/25.jpg"></p>
<p>WebSocket 和 SSE 都是传统请求-响应 Web 架构的替代方案，但它们不是完全冲突的技术。</p>
<ul>
<li>SSE 使用 HTTP 协议，现有的服务器软件都支持。WebSocket 是一个独立协议。</li>
<li>SSE 属于轻量级，使用简单；WebSocket 协议相对复杂。</li>
<li>SSE 默认支持断线重连，WebSocket 需要自己实现。</li>
<li>SSE 一般只用来传送文本，二进制数据需要编码后传送，WebSocket 默认支持传送二进制数据。</li>
<li>SSE 支持自定义发送的消息类型。</li>
</ul>
<p>显然，我们上面提到的 待办数目 场景，很适合使用 SSE。</p>
<h2 id="EventSource"><a href="#EventSource" class="headerlink" title="EventSource"></a>EventSource</h2><p>EventSource 是 SSE 对应的客户端 API，大部分浏览器都是默认支持的。网上的很多资料也都是从浏览器的角度来讲的。那这里我们就从 HTTP 协议的角度讲一下交互过程吧。🙄，毕竟我不懂 web 前端。</p>
<blockquote>
<p>API 介绍：<a href="https://developer.mozilla.org/zh-CN/docs/Server-sent_events/EventSource"><strong>EventSource</strong></a></p>
</blockquote>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul>
<li>首先 Client 发送一个普普通通的 GET 请求到 SSE-Server。</li>
<li>SSE-Server 无论需要返回几次数据，数据格式必须是 UTF-8 编码的文本，HTTP 头部信息需要类似如下设置：</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/event-stream</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-cache</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br></pre></td></tr></table></figure>

<p>上面三行之中，第一行的 <code>Content-Type</code> 必须指定 MIME 类型为 <code>event-steam</code> 。</p>
<ul>
<li>SSE-Server 每一次发送的信息，由若干个 <code>message </code> 组成，每个 <code>message</code> 之间用 <code>\n\n</code> 分隔。每个 <code>message</code> 内部由若干行组成，每一行都是如下格式：</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[field]: value\n</span><br></pre></td></tr></table></figure>

<p>上面的 <code>field</code> 可以取四个值：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">data</span><br><span class="line">event</span><br><span class="line">id</span><br><span class="line">retry</span><br></pre></td></tr></table></figure>

<p>此外，还可以有冒号开头的行，表示注释。通常，服务器每隔一段时间就会向浏览器发送一个注释，保持连接不中断。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">: This is a comment</span><br></pre></td></tr></table></figure>

<p>下面是一个例子。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">: this is a test stream\n\n</span><br><span class="line"></span><br><span class="line">data: some text\n\n</span><br><span class="line"></span><br><span class="line">data: another message\n</span><br><span class="line">data: with two lines \n\n</span><br></pre></td></tr></table></figure>

<ul>
<li>Client 拿到 message 以后自己解析。</li>
</ul>
<h4 id="message"><a href="#message" class="headerlink" title="message"></a>message</h4><p>前面提到的  <code>field</code>  有四个值，可以分别用作不同的用途。</p>
<h5 id="data-数据内容"><a href="#data-数据内容" class="headerlink" title="data 数据内容"></a>data 数据内容</h5><p>如果数据很长，可以分成多行，最后一行用 <code>\n\n</code> 结尾，前面行都用 <code>\n</code> 结尾。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">data:  message\n\n</span><br><span class="line"></span><br><span class="line">data: begin message\n</span><br><span class="line">data: continue message\n\n</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送json</span></span><br><span class="line">data: &#123;\n</span><br><span class="line">data: <span class="string">&quot;foo&quot;</span>: <span class="string">&quot;bar&quot;</span>,\n</span><br><span class="line">data: <span class="string">&quot;baz&quot;</span>, 555\n</span><br><span class="line">data: &#125;\n\n</span><br></pre></td></tr></table></figure>

<h5 id="id-数据标识"><a href="#id-数据标识" class="headerlink" title="id 数据标识"></a>id 数据标识</h5><p>相当于每条数据的编号。</p>
<p>浏览器用 <code>lastEventId</code> 属性读取这个值。一旦连接断线，浏览器会发送一个 HTTP 头，里面包含一个特殊的 <code>Last-Event-ID</code> 头信息，将这个值发送回去，用来帮助服务器端重建连接。因此，这个头信息可以被视为一种同步机制。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">id: msg1\n</span><br><span class="line">data: message\n\n</span><br></pre></td></tr></table></figure>

<h5 id="event-自定义的事件类型"><a href="#event-自定义的事件类型" class="headerlink" title="event 自定义的事件类型"></a>event 自定义的事件类型</h5><p>默认是<code>message</code>事件。浏览器可以用<code>addEventListener()</code>监听该事件。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">event: foo\n</span><br><span class="line">data: a foo event\n\n</span><br><span class="line"></span><br><span class="line">data: an unnamed event\n\n</span><br><span class="line"></span><br><span class="line">event: bar\n</span><br><span class="line">data: a bar event\n\n</span><br></pre></td></tr></table></figure>

<p>上面的代码创造了三条信息。第一条的名字是 <code>foo</code> ，触发浏览器的 <code>foo</code> 事件；第二条未取名，表示默认类型，触发浏览器的 <code>message</code> 事件；第三条是 <code>bar</code> ，触发浏览器的 <code>bar</code> 事件。</p>
<p>下面是另一个例子。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">event: userconnect</span><br><span class="line">data: &#123;<span class="attr">&quot;username&quot;</span>: <span class="string">&quot;bobby&quot;</span>, <span class="attr">&quot;time&quot;</span>: <span class="string">&quot;02:33:48&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">event: usermessage</span><br><span class="line">data: &#123;<span class="attr">&quot;username&quot;</span>: <span class="string">&quot;bobby&quot;</span>, <span class="attr">&quot;time&quot;</span>: <span class="string">&quot;02:34:11&quot;</span>, <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;Hi everyone.&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">event: userdisconnect</span><br><span class="line">data: &#123;<span class="attr">&quot;username&quot;</span>: <span class="string">&quot;bobby&quot;</span>, <span class="attr">&quot;time&quot;</span>: <span class="string">&quot;02:34:23&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">event: usermessage</span><br><span class="line">data: &#123;<span class="attr">&quot;username&quot;</span>: <span class="string">&quot;sean&quot;</span>, <span class="attr">&quot;time&quot;</span>: <span class="string">&quot;02:34:36&quot;</span>, <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;Bye, bobby.&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<h5 id="retry-重连间隔"><a href="#retry-重连间隔" class="headerlink" title="retry 重连间隔"></a>retry 重连间隔</h5><p>服务器可以用 <code>retry</code> 字段，指定浏览器重新发起连接的时间间隔。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">retry: <span class="number">10000</span>\n</span><br></pre></td></tr></table></figure>

<p>两种情况会导致浏览器重新发起连接：一种是时间间隔到期，二是由于网络错误等原因，导致连接出错。</p>
<h2 id="iOS-实现"><a href="#iOS-实现" class="headerlink" title="iOS 实现"></a>iOS 实现</h2><p>从上面的内容我们可以知道，既然 EventSource 客户端与 server 建立连接是基于标准的 HTTP 协议，那我们想要实现一套自己的 EventSource API ，只需要按规则解析 message 即可。</p>
<p>大致的思路：</p>
<ul>
<li>使用 <code>NSURLSession</code> 来发起请求以及处理服务器的响应。</li>
<li>在 <code>NSURLSession</code>  的代理方法中解析得到的文本信息，使用自定义的 <code>Event</code> 对象接收。</li>
<li>通过回调将 <code>Event</code> 传递给调用者。</li>
</ul>
<p>代码是在下面这份上做的改动，添加了一些线程安全的处理，以及 session 的释放，不然会造成内存泄漏。</p>
<blockquote>
<p>引用的OC代码 <a href="https://github.com/neilco/EventSource">Github</a></p>
</blockquote>
<p>改动后的源码：<a href="https://github.com/ATommyGirl/YYEventSource">ATommyGirl/YYEventSource</a></p>
<h3 id="模拟测试"><a href="#模拟测试" class="headerlink" title="模拟测试"></a>模拟测试</h3><p>启动服务</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">node sse-server.js</span><br></pre></td></tr></table></figure>

<p>会在本机 <code>http://127.0.0.1:8844/stream</code> 启动一个 SSE 服务。</p>
<p>使用浏览器或者 OC 代码访问这个地址就会看到信息输出了。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&quot;EventSource.h&quot;</span></span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> *url = <span class="string">@&quot;http://127.0.0.1:8844/stream&quot;</span>;</span><br><span class="line">EventSource *eventSource = [EventSource eventSourceWithURL:[<span class="built_in">NSURL</span> URLWithString:url]];</span><br><span class="line"></span><br><span class="line">[eventSource onMessage:^(Event *e) &#123;</span><br><span class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, e);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">[eventSource onError:^(Event *event) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;error:%@&quot;</span>, event.error);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><p><a href="https://www.ruanyifeng.com/blog/2017/05/server-sent_events.html">阮一峰</a></p>
]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>地铁3号线上的神人</title>
    <url>/2021/09/23/Subway3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>不知道你们上下班是通过什么交通工具，我个人 90% 的情况都是坐地铁。或者说我是有一些喜欢坐地铁的，因为我的一大爱好就是观察各种人……但往往上班的时候我总是“掐点儿”，近两年都是坐刚刚好不迟到的那一班地铁。我思考了一下为什么我变得如此“堕落”，是今天早上地铁上的一位天津老太太好像点醒了我……</p>
<p>借此机会记录一下我在地铁上遇到的各路神人：</p>
<hr>
<h2 id="爱心专座"><a href="#爱心专座" class="headerlink" title="爱心专座"></a>爱心专座</h2><p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/%E7%88%B1%E5%BF%83%E4%B8%93%E5%BA%A7.jpeg"></p>
<p>“你站在这繁华的街上，找不到你该去的方向……”我正在地铁上，坐着，带着耳机，听着许巍的《那一年》发呆，瞳孔都散开的那种发呆。突然一个老太太站我面前，吸引了我瞳孔的注意力。</p>
<p>“能让给我坐吗？！！！！！！！！！！！！！！！！！！！！！”</p>
<span id="more"></span>

<p>为什么这么多叹号？这样应该能表达出她当时态度有多强硬了吧。没有任何的前后铺垫，就是刚。瞳孔聚焦以后，我应该是愣住了有1秒的时间。她可能是觉得我不想起来吧，然后拿食指指了一下我后面：“爱心专座。”，然后我说“卧槽，可以！您快请~”。随后我以最快的速度逃离了那节车厢……</p>
<p>换到另一节车厢，继续听我的音乐，但我不能发呆了，打开电子书，从头再看一遍吧：《人性的弱点》。🙏</p>
<p>“你站在这繁华的街上，感觉到从来没有的慌张……”慌张吗？慌张呀，我第一次亲身感受到社会的险恶，可不想像电影《搜索》一样，被人拍到小视频里发到网上，毕竟我今天没有化妆，也没有高圆圆那么上镜😂。不止一次在地铁上遇到老年人对别人发火，莫名其妙，真的莫名其妙，我很不理解为什么呢？他们生活是有多不愉快呢？随随便便就可以对一个陌生人恶语相向，好吧，可能是没抢到超市的特价鸡蛋。话说，今天的老太太虽然戴着口罩，从她眉眼中还是可以看出，她是一个很刻薄的人。眼睛是一个人心灵的窗口，这句话我觉得很贴切，所以看人先看眼……</p>
<p>FYI: 3 号线的爱心专座要不要考虑刷一个不同颜色的漆呢~</p>
<h2 id="手扶杆"><a href="#手扶杆" class="headerlink" title="手扶杆"></a>手扶杆</h2><p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/%E6%89%8B%E6%89%B6%E6%9D%86.jpeg"></p>
<p>“玩儿尼玛蛋介，你瞅你那揍性，小BK的，怎么不懂得尊老爱幼呢……我年轻的时候一巴掌打你三个……”一段地道的天津话噼里啪啦的飘过来了~</p>
<p>原来是一个天津老大爷在骂一个小姑娘，因为大爷身体靠在了手扶杆上，小姑娘的手无处安放。正义凛然的小姑娘卑微地指责了他。有多卑微呢？我压根儿没听到小姑娘的声音……冒死往那儿瞄了一眼，果然，大爷头发花白，一脸的“刻薄”（暂时想不到其他的词儿，因为满脑子还是上一个老太太，毕竟刚刚经历的😂），小姑娘费力的挪了位置远离了他。</p>
<p>我刚来天津的时候，就知道老天津人很会骂人，小词儿一套套的，但第一次在地铁上听到骂人这么难听的。</p>
<p>天津的地铁跟北京的地铁比起来，人已经算很少了。但说实话北京的大爷大妈也特别会用北京话骂人，可是地铁上我好像真没遇到过。</p>
<p>没理非要讲理，上哪儿说理去你说……┐(ﾟ～ﾟ)┌</p>
<h2 id="下巴颏儿"><a href="#下巴颏儿" class="headerlink" title="下巴颏儿"></a>下巴颏儿</h2><p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/%E4%B8%8B%E5%B7%B4%E9%A2%8F%E5%84%BF.png"></p>
<p>这位是我前两年遇到的一位大哥，是在我还没有掐点儿上班的时期遇到的。基本上我每天都坐同一班地铁、同一个车厢（车头第一节），所以总能遇到他。他……很胖，很胖，有三个我那么胖，斜挎着一个公文包💼，包里有文件夹夹着一些貌似是合同的东西，根据他打电话的内容，猜测他是一名销售。诚实的讲，第一次见到他我惊了，因为真的胖（我没有歧视的意思）……但见几次也就习惯了，姑且给大哥起个代号吧：冬瓜。</p>
<p>在平平无奇的某一天，地铁开门，乘客按部就班的往里走，第一节车厢人一般少一些，刚刚好坐满，稀稀拉拉有几个站着的乘客。刚刚好我跟冬瓜都站着……坐在他正前方的一名男士，怎么讲呢，跟个瘦猴子一样，我们就称他为胡萝卜吧……因为他俩的身材比例真的就像冬瓜 : 胡萝卜。之所以会注意到胡萝卜，是因为冬瓜站他面前时，胡萝卜的眼神就把他出卖了，只见胡萝卜默默掏出了手机、打开相机、咔嚓~他拍了一张冬瓜的照片。为什么我会看到？从地铁的窗户上能看到胡萝卜手机的屏幕……天呐，异常的清晰，我觉得那是我从窗户上看到的最清晰的影子了。自然，冬瓜也不瞎，他应该跟我一样，从影子里看到了胡萝卜的所作所为……我当时心里是有点儿好奇的，不知道他会怎么处理。</p>
<p>冬瓜把手机锁好屏幕放进了他的公文包里，伸出了右手，拖住胡萝卜的下巴颏儿，把他拎了起来……我没有夸张，真的就是拎了起来：</p>
<p>冬瓜：删了！<br>胡萝卜：大哥，别激动别激动…<br>冬瓜：我让你删了…<br>胡萝卜：我第一次见这么壮的，所以忍不住拍了一下…<br>冬瓜：听不懂是吗？<br>胡萝卜：我删了删了…<br>冬瓜：回收站，也给我删了…</p>
<p>……</p>
<p>于是乎，胡萝卜把照片删了，第一节车厢坐着的人都躲开了，然后冬瓜坐下了，我也有座了……😂</p>
<p>到了下一站，胡萝卜就下车了，至于是不是他的终点站我就不清楚了，一排座位上就只有我跟冬瓜。我曾经也想拍一张他的照片，但觉得不太好忍住了，但是发生了刚刚的一幕，我没有忍住……微信上告诉了萝卜君这件事儿。正当我抱着手机打字的时候，余光感受到了杀气，他好像在看我，看什么，看我有没有拍照吗？我没有啊……当时我也是年少无知，竟然扭头看了他一眼，还好，他冲我笑了，很慈祥的笑了…😂…突然有点儿怀念那个时候，因为他对我笑了吗？不是。因为那个时候坐地铁是不需要戴口罩的……</p>
<p>这是我第一次在地铁上遇到 打架？好像也不算打架。不过冬瓜和胡萝卜我都是佩服的，尤其是胡萝卜，被人拎着下巴颏儿的时候，他还能笑着解释，很牛是不是~</p>
<h2 id="黑衣男子"><a href="#黑衣男子" class="headerlink" title="黑衣男子"></a>黑衣男子</h2><p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/%E5%B0%8F%E9%BB%91.png"></p>
<p>不知道你有没有注意过，上班时地铁上的人 和 下班时地铁上的人，是不一样的。他们的状态不一样，上班时大部人都略微带一些困意，但下班可就不同了，大部人都很放松，聊天的声音也大了很多，乌央乌央的感觉。同样放松的还有我对面这位大哥的裤子……的某个敏感部位……开线了、破了一个洞、一个李子大小的洞……</p>
<p>那是一个夏天，同样，也是我不掐点儿的年代。对面的大哥身着一身黑衣：黑T恤+黑短裤(七分裤吧)，微胖，圆脸，肉肉的，那我们叫他小黑吧，小黑坐下了，双腿微微劈开，拿出了一本书。当好奇宝宝想看看他在看什么书时，小黑大腿根部、中线上一抹不怎么和谐的“白”闯入了眼帘。是的，就是那个李子大小的洞。看看我上面配的图，一团黑色中一抹李子大小的白色，应该就是这种对比效果。当他坐我正对面的时候，我很难不看到，或者说需要刻意扭头才可以不看到。</p>
<p>小黑的衣服看着像是纯棉的，贴身、舒服、并且他很喜欢。为什么我知道贴身？因为那条短裤把他微胖的身材暴露无遗，所以应该是贴身的吧？为什么我知道他很喜欢？因为我断断续续遇到过他五六次，同一个下班点儿，他都是穿着这一身儿。那你可能会问了，你怎么知道是同一件？因为每次遇到他，那个李子一样的洞都在……如果说一个人有五件一模一样的衣服，我信。如果说五件衣服都是裆部开了一个李子一样大的洞，对不起，我不信。</p>
<p>我在嘲笑别人吗？没有。只是觉得：他真是一个小可爱呢~</p>
<p>记得当时我把这位小可爱的事儿发了朋友圈，一位年长几岁的朋友回复了我：扎克伯格也总穿同样的衣服，而且都是很简洁的T恤。我觉得我的人格经由他的点播，升华了一厘米。成功人士往往会把精力和金钱用在自己专注的事情上，不像我总把钱花在刀把儿上、刀背儿上。所以之后我才更注意多读书，而且好像确实不太爱买衣服了🤓。</p>
<hr>
<p>记录这些是因为觉得地铁上的人很可爱，太有意思了，形形色色，可能也是我经历太单纯，所以遇到什么样的人都觉得新鲜。<br>所以为什么我总赶“末班车”？或许是因为安静吧，至少不会遇到“爱心专座”和“手扶杆”了。今天早上怪我，早出门了半小时，还坐了爱心专座。悔不该早起那半小时呀~</p>
]]></content>
      <tags>
        <tag>我</tag>
        <tag>瞎扯</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】使用 systemd 管理 Node.js 应用</title>
    <url>/2023/03/30/Systemctl_nodejs/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://harttle.land/2016/08/04/systemd-nodejs-app.html">转载自</a></p>
<hr>
<p><a href="https://zh.wikipedia.org/wiki/Systemd">systemd</a> 是 Linux 下的一款系统和服务管理器，该软件的初衷是提供精确的服务间依赖，以此支持并行启动来提高性能。越来越多的 Linux 发行版都由 sysvinit 迁移到了 systemd（包括 Debian！）。在这些 Linux 系统中，用原生的 systemd 来托管 <a href="http://nodejs.org/">Node.js</a> 进程足够满足一般开发者的要求，借由 systemd 可以很方便地处理依赖关系和监测日志。</p>
<h2 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h2><p><code>systemctl</code> 是查询和控制 systemd 的主要命令，下面以 <code>mongod</code> 为例介绍常用参数：</p>
<blockquote>
<p> <a href="https://www.mongodb.com/">MongoDB</a> 是 <a href="http://nodejs.org/">Node.js</a> 下非常常见的 NoSQL 数据库，在 ArchLinux 下通过 pacman 安装：<code>pacman install mongodb</code>，安装成功后 <code>mongod</code> 即为可用的 systemd 服务。</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看服务状态</span></span><br><span class="line">systemctl status mongod</span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">systemctl <span class="built_in">start</span> mongod</span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">systemctl stop mongod</span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">systemctl restart mongod</span><br><span class="line"><span class="comment"># 设为自启动</span></span><br><span class="line">systemctl enable mongod</span><br><span class="line"><span class="comment"># 取消自启动</span></span><br><span class="line">systemctl disable mongod</span><br></pre></td></tr></table></figure>

<blockquote>
<p>更多信息可查阅 man page：<code>man systemctl</code></p>
</blockquote>
<h2 id="单元文件"><a href="#单元文件" class="headerlink" title="单元文件"></a>单元文件</h2><p>每个 systemd 服务均由一个 <a href="http://www.freedesktop.org/software/systemd/man/systemd.unit.html">单元文件</a> 来定义。这些单元文件位于 <code>/usr/lib/systemd/system/</code> 和 <code>/etc/systemd/system/</code>，分别存放安装软件包（比如 <a href="https://www.mongodb.com/">MongoDB</a>）和系统管理员的单元文件。 systemd 启动时会扫描上述路径并载入相应的单元。</p>
<p>Systemd Unit Files Locations (<a href="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/chap-Managing_Services_with_systemd.html#tabl-Managing_Services_with_systemd-Introduction-Units-Locations">provided by redhat</a>):</p>
<table>
<thead>
<tr>
<th>Directory</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><code>/usr/lib/systemd/system/</code></td>
<td>Systemd unit files distributed with installed RPM packages.</td>
</tr>
<tr>
<td><code>/run/systemd/system/</code></td>
<td>Systemd unit files created at run time. This directory takes precedence over the directory with installed service unit files.</td>
</tr>
<tr>
<td><code>/etc/systemd/system/</code></td>
<td>Systemd unit files created by systemctl enable as well as unit files added for extending a service. This directory takes precedence over the directory with runtime unit files.</td>
</tr>
</tbody></table>
<p>所以在修改或添加单元文件后，需要让 systemd 重新加载扫描并加载这些文件：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon<span class="literal">-reload</span></span><br></pre></td></tr></table></figure>

<p>单元文件的语法非常简单，类似于 Windows 的 <code>.ini</code> 文件。例如：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">Unit</span>]</span><br><span class="line">Description=myapp</span><br><span class="line"></span><br><span class="line">[<span class="type">Service</span>]</span><br><span class="line">WorkingDirectory=/home/harttle/myapp</span><br><span class="line">ExecStart=/usr/bin/node bin/www</span><br><span class="line">Restart=always</span><br><span class="line">StandardOutput=syslog</span><br><span class="line">StandardError=syslog</span><br><span class="line">SyslogIdentifier=myapp</span><br></pre></td></tr></table></figure>

<p>将上述文件保存为 <code>/etc/systemd/system/myapp.service</code>，运行 <code>systemctl start myapp</code> 即可启动它。通过 <code>systemctl status myapp</code> 来查看状态，通过 <code>journalctl</code> 来查看日志，见下文。</p>
<blockquote>
<p>更多信息可查询 man page: <code>man systemd.unit</code></p>
</blockquote>
<h2 id="监测日志"><a href="#监测日志" class="headerlink" title="监测日志"></a>监测日志</h2><p>systemd 采用 cgroups 来监测进程，这意味着 fork 得到的子进程也不会脱离日志。systemd 单元默认的日志输出为 syslog，可通过 <code>journalctl</code> 来查看：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定systemd单元（unit）</span></span><br><span class="line">journalctl <span class="literal">-u</span> myapp</span><br></pre></td></tr></table></figure>

<p>查看实时日志：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">journalctl <span class="operator">-f</span></span><br></pre></td></tr></table></figure>

<h2 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h2><p><a href="http://nodejs.org/">Node.js</a> 应用通常会依赖于其他的服务，比如 <a href="https://www.mongodb.com/">MongoDB</a>、<a href="https://github.com/antirez/redis">Redis</a> 等。这意味着 myapp 在开机启动时可能会因这些进程未启动而失败。可以在单元文件中指定依赖关系，systemd 便会先启动那些依赖：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">Unit</span>]</span><br><span class="line">Description=myapp</span><br><span class="line">Requires=mongodb.service redis.service</span><br><span class="line">After=mongodb.service redis.service</span><br></pre></td></tr></table></figure>

<h2 id="环境与用户组"><a href="#环境与用户组" class="headerlink" title="环境与用户组"></a>环境与用户组</h2><p>systemd 支持为每个单元文件设置用户组，以及环境变量。 这在 <a href="http://nodejs.org/">Node.js</a> 的 Web 应用部署和安全提供了方便。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">Service</span>]</span><br><span class="line">Environment=DEBUG=<span class="string">&#x27;myapp:*&#x27;</span></span><br><span class="line">User=www</span><br><span class="line"><span class="built_in">Group</span>=http</span><br></pre></td></tr></table></figure>

<p>设置多个环境变量可以编写多条 <code>Environment=</code> 语句，例如：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">Environment=PORT=<span class="number">3000</span></span><br><span class="line">Environment=HOST=localhost</span><br></pre></td></tr></table></figure>

<p>用户和组在生产环境下较为有用，用特定的用户来运行 <a href="http://nodejs.org/">Node.js</a> 应用可以在很大程度上限制网络攻击造成的破坏。</p>
]]></content>
      <tags>
        <tag>服务器</tag>
        <tag>CentOS</tag>
        <tag>转载</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】Systemd 入门教程：命令篇</title>
    <url>/2021/07/23/Systemd_Command/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html">转载自：阮一峰老师博客</a></p>
<hr>
<p>Systemd 是 Linux 系统工具，用来启动<a href="https://www.ruanyifeng.com/blog/2016/02/linux-daemon.html">守护进程</a>，已成为大多数发行版的标准配置。</p>
<p>本文介绍它的基本用法，分为上下两篇。今天介绍它的主要命令，<a href="https://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-part-two.html">下一篇</a>介绍如何用于实战。</p>
<p><img src="https://www.ruanyifeng.com/blogimg/asset/2016/bg2016030701.gif" alt="img"></p>
<span id="more"></span>

<h2 id="一、由来"><a href="#一、由来" class="headerlink" title="一、由来"></a>一、由来</h2><p>历史上，<a href="https://www.ruanyifeng.com/blog/2013/08/linux_boot_process.html">Linux 的启动</a>一直采用 <a href="https://en.wikipedia.org/wiki/Init"><code>init</code></a> 进程。</p>
<p>下面的命令用来启动服务。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo /etc/init.d/apache2 <span class="built_in">start</span> </span><br><span class="line"><span class="comment"># 或者 </span></span><br><span class="line">service apache2 <span class="built_in">start</span>  </span><br></pre></td></tr></table></figure>

<p>这种方法有两个缺点。</p>
<p>一是启动时间长。<code>init</code> 进程是串行启动，只有前一个进程启动完，才会启动下一个进程。</p>
<p>二是启动脚本复杂。<code>init</code> 进程只是执行启动脚本，不管其他事情。脚本需要自己处理各种情况，这往往使得脚本变得很长。</p>
<h2 id="二、Systemd-概述"><a href="#二、Systemd-概述" class="headerlink" title="二、Systemd 概述"></a>二、Systemd 概述</h2><p>Systemd 就是为了解决这些问题而诞生的。它的设计目标是，为系统的启动和管理提供一套完整的解决方案。</p>
<p>根据 Linux 惯例，字母 <code>d</code> 是守护进程（daemon）的缩写。 Systemd 这个名字的含义，就是它要守护整个系统。</p>
<p><img src="https://www.ruanyifeng.com/blogimg/asset/2016/bg2016030702.jpg" alt="img"></p>
<p>（上图为 Systemd 作者 <a href="https://en.wikipedia.org/wiki/Lennart_Poettering">Lennart Poettering</a>）</p>
<p>使用了 Systemd，就不需要再用 <code>init</code> 了。Systemd 取代了 <code>initd</code>，成为系统的第一个进程（PID 等于 1），其他进程都是它的子进程。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">systemctl -<span class="literal">-version</span>  </span><br></pre></td></tr></table></figure>

<p>上面的命令查看 Systemd 的版本。</p>
<p>Systemd 的优点是功能强大，使用方便，缺点是体系庞大，非常复杂。事实上，现在还有很多人反对使用 Systemd，理由就是它过于复杂，与操作系统的其他部分强耦合，违反 “keep simple, keep stupid” 的 <a href="https://www.ruanyifeng.com/blog/2009/06/unix_philosophy.html">Unix 哲学</a>。</p>
<p><img src="https://www.ruanyifeng.com/blogimg/asset/2016/bg2016030703.png" alt="img"></p>
<p>（上图为 Systemd 架构图）</p>
<h2 id="三、系统管理"><a href="#三、系统管理" class="headerlink" title="三、系统管理"></a>三、系统管理</h2><p>Systemd 并不是一个命令，而是一组命令，涉及到系统管理的方方面面。</p>
<h3 id="3-1-systemctl"><a href="#3-1-systemctl" class="headerlink" title="3.1 systemctl"></a>3.1 systemctl</h3><p><code>systemctl</code> 是 Systemd 的主命令，用于管理系统。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启系统</span></span><br><span class="line">sudo systemctl reboot</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭系统，切断电源</span></span><br><span class="line">sudo systemctl poweroff</span><br><span class="line"></span><br><span class="line"><span class="comment"># CPU停止工作</span></span><br><span class="line">sudo systemctl halt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂停系统</span></span><br><span class="line">sudo systemctl suspend</span><br><span class="line"></span><br><span class="line"><span class="comment"># 让系统进入冬眠状态</span></span><br><span class="line">sudo systemctl hibernate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 让系统进入交互式休眠状态</span></span><br><span class="line">sudo systemctl hybrid<span class="literal">-sleep</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动进入救援状态（单用户状态）</span></span><br><span class="line">sudo systemctl rescue</span><br></pre></td></tr></table></figure>

<h3 id="3-2-systemd-analyz"><a href="#3-2-systemd-analyz" class="headerlink" title="3.2 systemd-analyz"></a>3.2 systemd-analyz</h3><p><code>systemd-analyze</code> 命令用于查看启动耗时。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看启动耗时</span></span><br><span class="line">systemd<span class="literal">-analyze</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看每个服务的启动耗时 </span></span><br><span class="line">systemd<span class="literal">-analyze</span> blame  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示瀑布状的启动过程流 </span></span><br><span class="line">systemd<span class="literal">-analyze</span> critical<span class="literal">-chain</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定服务的启动流 </span></span><br><span class="line">systemd<span class="literal">-analyze</span> critical<span class="literal">-chain</span> atd.service</span><br></pre></td></tr></table></figure>

<h3 id="3-3-hostnamectl"><a href="#3-3-hostnamectl" class="headerlink" title="3.3 hostnamectl"></a>3.3 hostnamectl</h3><p><code>hostnamectl</code> 命令用于查看当前主机的信息。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示当前主机的信息 </span></span><br><span class="line">hostnamectl  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置主机名。 </span></span><br><span class="line">sudo hostnamectl <span class="built_in">set-hostname</span> rhel7</span><br></pre></td></tr></table></figure>

<h3 id="3-4-localectl"><a href="#3-4-localectl" class="headerlink" title="3.4 localectl"></a>3.4 localectl</h3><p><code>localectl</code> 命令用于查看本地化设置。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看本地化设置 </span></span><br><span class="line">localectl  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置本地化参数。 </span></span><br><span class="line">sudo localectl <span class="built_in">set-locale</span> LANG=en_GB.utf8 </span><br><span class="line">sudo localectl <span class="built_in">set-keymap</span> en_GB</span><br></pre></td></tr></table></figure>

<h3 id="3-5-timedatectl"><a href="#3-5-timedatectl" class="headerlink" title="3.5 timedatectl"></a>3.5 timedatectl</h3><p><code>timedatectl</code> 命令用于查看当前时区设置。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前时区设置 </span></span><br><span class="line">timedatectl  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有可用的时区 </span></span><br><span class="line">timedatectl list<span class="literal">-timezones</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置当前时区 </span></span><br><span class="line">sudo timedatectl <span class="built_in">set-timezone</span> America/New_York </span><br><span class="line">sudo timedatectl <span class="built_in">set-time</span> YYYY<span class="literal">-MM</span><span class="literal">-DD</span> </span><br><span class="line">sudo timedatectl <span class="built_in">set-time</span> HH:MM:SS</span><br></pre></td></tr></table></figure>

<h3 id="3-6-loginctl"><a href="#3-6-loginctl" class="headerlink" title="3.6 loginctl"></a>3.6 loginctl</h3><p><code>loginctl</code> 命令用于查看当前登录的用户。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出当前session </span></span><br><span class="line">loginctl list<span class="literal">-sessions</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出当前登录用户 </span></span><br><span class="line">loginctl list<span class="literal">-users</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出显示指定用户的信息 </span></span><br><span class="line">loginctl <span class="built_in">show-user</span> ruanyf</span><br></pre></td></tr></table></figure>



<h2 id="四、Unit"><a href="#四、Unit" class="headerlink" title="四、Unit"></a>四、Unit</h2><h3 id="4-1-含义"><a href="#4-1-含义" class="headerlink" title="4.1 含义"></a>4.1 含义</h3><blockquote>
<p>Systemd 可以管理所有系统资源。不同的资源统称为 Unit（单位）。</p>
</blockquote>
<p>Unit 一共分成 12 种。</p>
<ul>
<li>Service unit：系统服务</li>
<li>Target unit：多个 Unit 构成的一个组</li>
<li>Device Unit：硬件设备</li>
<li>Mount Unit：文件系统的挂载点</li>
<li>Automount Unit：自动挂载点</li>
<li>Path Unit：文件或路径</li>
<li>Scope Unit：不是由 Systemd 启动的外部进程</li>
<li>Slice Unit：进程组</li>
<li>Snapshot Unit：Systemd 快照，可以切回某个快照</li>
<li>Socket Unit：进程间通信的 </li>
<li>socketSwap Unit：swap 文件</li>
<li>Timer Unit：定时器</li>
</ul>
<p><code>systemctl list-units</code> 命令可以查看当前系统的所有 Unit 。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出正在运行的 Unit</span></span><br><span class="line">systemctl list<span class="literal">-units</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有Unit，包括没有找到配置文件的或者启动失败的</span></span><br><span class="line">systemctl list<span class="literal">-units</span> -<span class="literal">-all</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有没有运行的 Unit</span></span><br><span class="line">systemctl list<span class="literal">-units</span> -<span class="literal">-all</span> -<span class="literal">-state</span>=inactive</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有加载失败的 Unit</span></span><br><span class="line">systemctl list<span class="literal">-units</span> -<span class="literal">-failed</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有正在运行的、类型为 service 的 Unit</span></span><br><span class="line">systemctl list<span class="literal">-units</span> -<span class="literal">-type</span>=service</span><br></pre></td></tr></table></figure>

<h3 id="4-2-Unit-的状态"><a href="#4-2-Unit-的状态" class="headerlink" title="4.2 Unit 的状态"></a>4.2 Unit 的状态</h3><p><code>systemctl status </code> 命令用于查看系统状态和单个 Unit 的状态。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示系统状态 </span></span><br><span class="line">systemctl status  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示单个 Unit 的状态 </span></span><br><span class="line">sysystemctl status bluetooth.service  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示远程主机的某个 Unit 的状态 </span></span><br><span class="line">systemctl <span class="literal">-H</span> root@rhel7.example.com status httpd.service</span><br></pre></td></tr></table></figure>



<p>除了 <code>status</code> 命令， <code>systemctl</code> 还提供了三个查询状态的简单方法，主要供脚本内部的判断语句使用。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示某个 Unit 是否正在运行</span></span><br><span class="line">systemctl is<span class="literal">-active</span> application.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个 Unit 是否处于启动失败状态</span></span><br><span class="line">systemctl is<span class="literal">-failed</span> application.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个 Unit 服务是否建立了启动链接</span></span><br><span class="line">systemctl is<span class="literal">-enabled</span> application.service</span><br></pre></td></tr></table></figure>

<h3 id="4-3-Unit-管理"><a href="#4-3-Unit-管理" class="headerlink" title="4.3 Unit 管理"></a>4.3 Unit 管理</h3><p>对于用户来说，最常用的是下面这些命令，用于启动和停止 Unit（主要是 service）。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 立即启动一个服务</span></span><br><span class="line">sudo systemctl <span class="built_in">start</span> apache.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 立即停止一个服务</span></span><br><span class="line">sudo systemctl stop apache.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启一个服务</span></span><br><span class="line">sudo systemctl restart apache.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 杀死一个服务的所有子进程</span></span><br><span class="line">sudo systemctl <span class="built_in">kill</span> apache.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载一个服务的配置文件</span></span><br><span class="line">sudo systemctl reload apache.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重载所有修改过的配置文件</span></span><br><span class="line">sudo systemctl daemon<span class="literal">-reload</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个 Unit 的所有底层参数</span></span><br><span class="line">systemctl show httpd.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个 Unit 的指定属性的值</span></span><br><span class="line">systemctl show <span class="literal">-p</span> CPUShares httpd.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置某个 Unit 的指定属性</span></span><br><span class="line">sudo systemctl <span class="built_in">set-property</span> httpd.service CPUShares=<span class="number">500</span></span><br></pre></td></tr></table></figure>

<h3 id="4-4-依赖关系"><a href="#4-4-依赖关系" class="headerlink" title="4.4 依赖关系"></a>4.4 依赖关系</h3><p>Unit 之间存在依赖关系：A 依赖于 B，就意味着 Systemd 在启动 A 的时候，同时会去启动 B。</p>
<p><code>systemctl list-dependencies</code> 命令列出一个 Unit 的所有依赖。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">systemctl list<span class="literal">-dependencies</span> nginx.service</span><br></pre></td></tr></table></figure>

<p>上面命令的输出结果之中，有些依赖是 Target 类型（详见下文），默认不会展开显示。如果要展开 Target，就需要使用 <code>--all</code> 参数。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">systemctl list<span class="literal">-dependencies</span> -<span class="literal">-all</span> nginx.service</span><br></pre></td></tr></table></figure>



<h2 id="五、Unit-的配置文件"><a href="#五、Unit-的配置文件" class="headerlink" title="五、Unit 的配置文件"></a>五、Unit 的配置文件</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><p>每一个 Unit 都有一个配置文件，告诉 Systemd 怎么启动这个 Unit 。</p>
<p>Systemd 默认从目录 <code>/etc/systemd/system/</code> 读取配置文件。但是，里面存放的大部分文件都是符号链接，指向目录 <code>/usr/lib/systemd/system/</code> ，真正的配置文件存放在那个目录。</p>
<p><code>systemctl enable</code> 命令用于在上面两个目录之间，建立符号链接关系。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable clamd@scan.service </span><br><span class="line"><span class="comment"># 等同于 </span></span><br><span class="line">sudo ln <span class="literal">-s</span> <span class="string">&#x27;/usr/lib/systemd/system/clamd@scan.service&#x27;</span> <span class="string">&#x27;/etc/systemd/system/multi-user.target.wants/clamd@scan.service&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如果配置文件里面设置了开机启动，<code>systemctl enable</code>命令相当于激活开机启动。</p>
<p>与之对应的，<code>systemctl disable</code>命令用于在两个目录之间，撤销符号链接关系，相当于撤销开机启动。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo systemctl disable clamd@scan.service</span><br></pre></td></tr></table></figure>

<p>配置文件的后缀名，就是该 Unit 的种类，比如 <code>sshd.socket</code> 。如果省略，Systemd 默认后缀名为 <code>.service</code>，所以 <code>sshd</code> 会被理解成 <code>sshd.service</code>。</p>
<h3 id="5-2-配置文件的状态"><a href="#5-2-配置文件的状态" class="headerlink" title="5.2 配置文件的状态"></a>5.2 配置文件的状态</h3><p><code>systemctl list-unit-files</code> 命令用于列出所有配置文件。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有配置文件 </span></span><br><span class="line">systemctl list<span class="literal">-unit</span><span class="literal">-files</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出指定类型的配置文件 </span></span><br><span class="line">systemctl list<span class="literal">-unit</span><span class="literal">-files</span> -<span class="literal">-type</span>=service</span><br></pre></td></tr></table></figure>

<p>这个命令会输出一个列表。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">systemctl list<span class="literal">-unit</span><span class="literal">-files</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">UNIT FILE              STATE </span><br><span class="line">chronyd.service        enabled </span><br><span class="line">clamd<span class="selector-tag">@</span>.service         <span class="keyword">static</span> </span><br><span class="line">clamd@scan.service     disabled</span><br></pre></td></tr></table></figure>

<p>这个列表显示每个配置文件的状态，一共有四种。</p>
<ul>
<li>enabled：已建立启动链接</li>
<li>disabled：没建立启动链接</li>
<li>static：该配置文件没有<code>[Install]</code>部分（无法执行），只能作为其他配置文件的依赖</li>
<li>masked：该配置文件被禁止建立启动链接</li>
</ul>
<p>注意，从配置文件的状态无法看出，该 Unit 是否正在运行。这必须执行前面提到的<code>systemctl status</code>命令。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">systemctl status bluetooth.service</span><br></pre></td></tr></table></figure>

<p>一旦修改配置文件，就要让 SystemD 重新加载配置文件，然后重新启动，否则修改不会生效。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon<span class="literal">-reload</span></span><br><span class="line">sudo systemctl restart httpd.service</span><br></pre></td></tr></table></figure>

<h3 id="5-3-配置文件的格式"><a href="#5-3-配置文件的格式" class="headerlink" title="5.3 配置文件的格式"></a>5.3 配置文件的格式</h3><p>配置文件就是普通的文本文件，可以用文本编辑器打开。</p>
<p><code>systemctl cat</code>命令可以查看配置文件的内容。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">cat</span> atd.service  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line">[<span class="type">Unit</span>] </span><br><span class="line">Description=ATD daemon </span><br><span class="line"></span><br><span class="line">[<span class="type">Service</span>] <span class="built_in">Type</span>=forking </span><br><span class="line">ExecStart=/usr/bin/atd  </span><br><span class="line"></span><br><span class="line">[<span class="type">Install</span>] </span><br><span class="line">WantedBy=multi<span class="literal">-user</span>.target</span><br></pre></td></tr></table></figure>

<p>从上面的输出可以看到，配置文件分成几个区块。每个区块的第一行，是用方括号表示的区别名，比如<code>[Unit]</code>。注意，配置文件的区块名和字段名，都是大小写敏感的。</p>
<p>每个区块内部是一些等号连接的键值对。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">Section</span>] </span><br><span class="line">Directive1=value </span><br><span class="line">Directive2=value  </span><br><span class="line">. . . </span><br></pre></td></tr></table></figure>

<p>注意，键值对的等号两侧不能有空格。</p>
<h3 id="5-4-配置文件的区块"><a href="#5-4-配置文件的区块" class="headerlink" title="5.4 配置文件的区块"></a>5.4 配置文件的区块</h3><p><code>[Unit]</code>区块通常是配置文件的第一个区块，用来定义 Unit 的元数据，以及配置与其他 Unit 的关系。它的主要字段如下。</p>
<ul>
<li><code>Description</code>：简短描述</li>
<li><code>Documentation</code>：文档地址</li>
<li><code>Requires</code>：当前 Unit 依赖的其他 Unit，如果它们没有运行，当前 Unit 会启动失败</li>
<li><code>Wants</code>：与当前 Unit 配合的其他 Unit，如果它们没有运行，当前 Unit 不会启动失败</li>
<li><code>BindsTo</code>：与<code>Requires</code>类似，它指定的 Unit 如果退出，会导致当前 Unit 停止运行</li>
<li><code>Before</code>：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之后启动</li>
<li><code>After</code>：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之前启动</li>
<li><code>Conflicts</code>：这里指定的 Unit 不能与当前 Unit 同时运行</li>
<li><code>Condition...</code>：当前 Unit 运行必须满足的条件，否则不会运行</li>
<li><code>Assert...</code>：当前 Unit 运行必须满足的条件，否则会报启动失败</li>
</ul>
<p><code>[Install]</code>通常是配置文件的最后一个区块，用来定义如何启动，以及是否开机启动。它的主要字段如下。</p>
<ul>
<li><code>WantedBy</code>：它的值是一个或多个 Target，当前 Unit 激活时（enable）符号链接会放入<code>/etc/systemd/system</code>目录下面以 Target 名 + <code>.wants</code>后缀构成的子目录中</li>
<li><code>RequiredBy</code>：它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放入<code>/etc/systemd/system</code>目录下面以 Target 名 + <code>.required</code>后缀构成的子目录中</li>
<li><code>Alias</code>：当前 Unit 可用于启动的别名</li>
<li><code>Also</code>：当前 Unit 激活（enable）时，会被同时激活的其他 Unit</li>
</ul>
<p><code>[Service]</code>区块用来 Service 的配置，只有 Service 类型的 Unit 才有这个区块。它的主要字段如下。</p>
<ul>
<li><code>Type</code>：定义启动时的进程行为。它有以下几种值。</li>
<li><code>Type=simple</code>：默认值，执行<code>ExecStart</code>指定的命令，启动主进程</li>
<li><code>Type=forking</code>：以 fork 方式从父进程创建子进程，创建后父进程会立即退出</li>
<li><code>Type=oneshot</code>：一次性进程，Systemd 会等当前服务退出，再继续往下执行</li>
<li><code>Type=dbus</code>：当前服务通过 D-Bus 启动</li>
<li><code>Type=notify</code>：当前服务启动完毕，会通知<code>Systemd</code>，再继续往下执行</li>
<li><code>Type=idle</code>：若有其他任务执行完毕，当前服务才会运行<code>ExecStart</code>：启动当前服务的命令</li>
<li><code>ExecStartPre</code>：启动当前服务之前执行的命令</li>
<li><code>ExecStartPost</code>：启动当前服务之后执行的命令</li>
<li><code>ExecReload</code>：重启当前服务时执行的命令</li>
<li><code>ExecStop</code>：停止当前服务时执行的命令</li>
<li><code>ExecStopPost</code>：停止当其服务之后执行的命令</li>
<li><code>RestartSec</code>：自动重启当前服务间隔的秒数</li>
<li><code>Restart</code>：定义何种情况 Systemd 会自动重启当前服务，可能的值包括<code>always</code>（总是重启）、<code>on-success</code>、<code>on-failure</code>、<code>on-abnormal</code>、<code>on-abort</code>、<code>on-watchdog</code></li>
<li><code>TimeoutSec</code>：定义 Systemd 停止当前服务之前等待的秒数</li>
<li><code>Environment</code>：指定环境变量</li>
</ul>
<p>Unit 配置文件的完整字段清单，请参考<a href="https://www.freedesktop.org/software/systemd/man/systemd.unit.html">官方文档</a>。</p>
<h2 id="六、Target"><a href="#六、Target" class="headerlink" title="六、Target"></a>六、Target</h2><p>启动计算机的时候，需要启动大量的 Unit。如果每一次启动，都要一一写明本次启动需要哪些 Unit，显然非常不方便。Systemd 的解决方案就是 Target。</p>
<p>简单说，Target 就是一个 Unit 组，包含许多相关的 Unit 。启动某个 Target 的时候，Systemd 就会启动里面所有的 Unit。从这个意义上说，Target 这个概念类似于 “状态点”，启动某个 Target 就好比启动到某种状态。</p>
<p>传统的<code>init</code>启动模式里面，有 RunLevel 的概念，跟 Target 的作用很类似。不同的是，RunLevel 是互斥的，不可能多个 RunLevel 同时启动，但是多个 Target 可以同时启动。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前系统的所有 Target</span></span><br><span class="line">systemctl list<span class="literal">-unit</span><span class="literal">-files</span> -<span class="literal">-type</span>=target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看一个 Target 包含的所有 Unit</span></span><br><span class="line">systemctl list<span class="literal">-dependencies</span> multi<span class="literal">-user</span>.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看启动时的默认 Target</span></span><br><span class="line">systemctl <span class="built_in">get-default</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置启动时的默认 Target</span></span><br><span class="line">sudo systemctl <span class="built_in">set-default</span> multi<span class="literal">-user</span>.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换 Target 时，默认不关闭前一个 Target 启动的进程，</span></span><br><span class="line"><span class="comment"># systemctl isolate 命令改变这种行为，</span></span><br><span class="line"><span class="comment"># 关闭前一个 Target 里面所有不属于后一个 Target 的进程</span></span><br><span class="line">sudo systemctl isolate multi<span class="literal">-user</span>.target</span><br></pre></td></tr></table></figure>

<p>Target 与 传统 RunLevel 的对应关系如下。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">Traditional runlevel      New target name     Symbolically linked to...  </span><br><span class="line">Runlevel <span class="number">0</span>           |    runlevel0.target -&gt; poweroff.target </span><br><span class="line">Runlevel <span class="number">1</span>           |    runlevel1.target -&gt; rescue.target </span><br><span class="line">Runlevel <span class="number">2</span>           |    runlevel2.target -&gt; multi<span class="literal">-user</span>.target </span><br><span class="line">Runlevel <span class="number">3</span>           |    runlevel3.target -&gt; multi<span class="literal">-user</span>.target </span><br><span class="line">Runlevel <span class="number">4</span>           |    runlevel4.target -&gt; multi<span class="literal">-user</span>.target </span><br><span class="line">Runlevel <span class="number">5</span>           |    runlevel5.target -&gt; graphical.target </span><br><span class="line">Runlevel <span class="number">6</span>           |    runlevel6.target -&gt; reboot.target</span><br></pre></td></tr></table></figure>

<p>它与<code>init</code>进程的主要差别如下。</p>
<p><strong>（1）默认的 RunLevel</strong>（在<code>/etc/inittab</code>文件设置）现在被默认的 Target 取代，位置是<code>/etc/systemd/system/default.target</code>，通常符号链接到<code>graphical.target</code>（图形界面）或者<code>multi-user.target</code>（多用户命令行）。</p>
<p><strong>（2）启动脚本的位置</strong>，以前是<code>/etc/init.d</code>目录，符号链接到不同的 RunLevel 目录 （比如<code>/etc/rc3.d</code>、<code>/etc/rc5.d</code>等），现在则存放在<code>/lib/systemd/system</code>和<code>/etc/systemd/system</code>目录。</p>
<p><strong>（3）配置文件的位置</strong>，以前<code>init</code>进程的配置文件是<code>/etc/inittab</code>，各种服务的配置文件存放在<code>/etc/sysconfig</code>目录。现在的配置文件主要存放在<code>/lib/systemd</code>目录，在<code>/etc/systemd</code>目录里面的修改可以覆盖原始设置。</p>
<h2 id="七、日志管理"><a href="#七、日志管理" class="headerlink" title="七、日志管理"></a>七、日志管理</h2><p>Systemd 统一管理所有 Unit 的启动日志。带来的好处就是，可以只用<code>journalctl</code>一个命令，查看所有日志（内核日志和应用日志）。日志的配置文件是<code>/etc/systemd/journald.conf</code>。</p>
<p><code>journalctl</code>功能强大，用法非常多。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有日志（默认情况下 ，只保存本次启动的日志）</span></span><br><span class="line">sudo journalctl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看内核日志（不显示应用日志）</span></span><br><span class="line">sudo journalctl <span class="literal">-k</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看系统本次启动的日志</span></span><br><span class="line">sudo journalctl <span class="literal">-b</span></span><br><span class="line">sudo journalctl <span class="literal">-b</span> <span class="literal">-0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看上一次启动的日志（需更改设置）</span></span><br><span class="line">sudo journalctl <span class="literal">-b</span> <span class="literal">-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定时间的日志</span></span><br><span class="line">sudo journalctl -<span class="literal">-since</span>=<span class="string">&quot;2012-10-30 18:17:16&quot;</span></span><br><span class="line">sudo journalctl -<span class="literal">-since</span> <span class="string">&quot;20 min ago&quot;</span></span><br><span class="line">sudo journalctl -<span class="literal">-since</span> yesterday</span><br><span class="line">sudo journalctl -<span class="literal">-since</span> <span class="string">&quot;2015-01-10&quot;</span> -<span class="literal">-until</span> <span class="string">&quot;2015-01-11 03:00&quot;</span></span><br><span class="line">sudo journalctl -<span class="literal">-since</span> <span class="number">09</span>:<span class="number">00</span> -<span class="literal">-until</span> <span class="string">&quot;1 hour ago&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示尾部的最新10行日志</span></span><br><span class="line">sudo journalctl <span class="literal">-n</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示尾部指定行数的日志</span></span><br><span class="line">sudo journalctl <span class="literal">-n</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实时滚动显示最新日志</span></span><br><span class="line">sudo journalctl <span class="operator">-f</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定服务的日志</span></span><br><span class="line">sudo journalctl /usr/lib/systemd/systemd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定进程的日志</span></span><br><span class="line">sudo journalctl _PID=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某个路径的脚本的日志</span></span><br><span class="line">sudo journalctl /usr/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定用户的日志</span></span><br><span class="line">sudo journalctl _UID=<span class="number">33</span> -<span class="literal">-since</span> today</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某个 Unit 的日志</span></span><br><span class="line">sudo journalctl <span class="literal">-u</span> nginx.service</span><br><span class="line">sudo journalctl <span class="literal">-u</span> nginx.service -<span class="literal">-since</span> today</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实时滚动显示某个 Unit 的最新日志</span></span><br><span class="line">sudo journalctl <span class="literal">-u</span> nginx.service <span class="operator">-f</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并显示多个 Unit 的日志</span></span><br><span class="line">journalctl <span class="literal">-u</span> nginx.service <span class="literal">-u</span> php<span class="literal">-fpm</span>.service -<span class="literal">-since</span> today</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定优先级（及其以上级别）的日志，共有8级</span></span><br><span class="line"><span class="comment"># 0: emerg</span></span><br><span class="line"><span class="comment"># 1: alert</span></span><br><span class="line"><span class="comment"># 2: crit</span></span><br><span class="line"><span class="comment"># 3: err</span></span><br><span class="line"><span class="comment"># 4: warning</span></span><br><span class="line"><span class="comment"># 5: notice</span></span><br><span class="line"><span class="comment"># 6: info</span></span><br><span class="line"><span class="comment"># 7: debug</span></span><br><span class="line">sudo journalctl <span class="literal">-p</span> err <span class="literal">-b</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志默认分页输出，--no-pager 改为正常的标准输出</span></span><br><span class="line">sudo journalctl -<span class="literal">-no</span><span class="literal">-pager</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以 JSON 格式（单行）输出</span></span><br><span class="line">sudo journalctl <span class="literal">-b</span> <span class="literal">-u</span> nginx.service <span class="literal">-o</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以 JSON 格式（多行）输出，可读性更好</span></span><br><span class="line">sudo journalctl <span class="literal">-b</span> <span class="literal">-u</span> nginx.serviceqq</span><br><span class="line"> <span class="literal">-o</span> json<span class="literal">-pretty</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示日志占据的硬盘空间</span></span><br><span class="line">sudo journalctl -<span class="literal">-disk</span><span class="literal">-usage</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定日志文件占据的最大空间</span></span><br><span class="line">sudo journalctl -<span class="literal">-vacuum</span><span class="literal">-size</span>=<span class="number">1</span>G</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定日志文件保存多久</span></span><br><span class="line">sudo journalctl -<span class="literal">-vacuum</span><span class="literal">-time</span>=<span class="number">1</span>years</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>服务器</tag>
        <tag>CentOS</tag>
        <tag>转载</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 打包后的二进制文件添加到 CentOS 开机启动项</title>
    <url>/2021/12/08/Systemd_Go/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前提需要学习："><a href="#前提需要学习：" class="headerlink" title="前提需要学习："></a>前提需要学习：</h2><p><a href="https://tommygirl.cn/2021/07/23/Systemd_Command/">Systemd 入门教程：命令篇</a></p>
<p><a href="https://tommygirl.cn/2021/07/23/Systemd_Use/">Systemd 入门教程：实战篇</a></p>
<hr>
<h2 id="Go-打包后的二进制文件添加到开机启动项"><a href="#Go-打包后的二进制文件添加到开机启动项" class="headerlink" title="Go 打包后的二进制文件添加到开机启动项"></a>Go 打包后的二进制文件添加到开机启动项</h2><p>httpbin-go 是一个 Go 项目生成的二进制文件，或者称为可执行文件，需要添加可执行权限。</p>
<p>正常我们执行一个可执行文件可能是这样 <code>./httpbin-go</code>，这样服务也能跑起来。但服务器经常需要重启，常用的服务我们不可能每次都手动启动，往往会添加开机启动项。好像比较老旧的方式是通过写脚本来操作，同事推荐使用 <code>systemd</code> 来统一管理 Linux 上的服务，也是目前比较流行的方式。阮一峰老师的两篇博客介绍的很详细啦。</p>
<p>那我们想把自己写的 Go 服务部署到服务器，并且让它开机自启动 应该怎么办呢？</p>
<span id="more"></span>

<h3 id="1-把可执行文件配置成一个-service"><a href="#1-把可执行文件配置成一个-service" class="headerlink" title="1. 把可执行文件配置成一个 service"></a>1. 把可执行文件配置成一个 <code>service</code></h3><p>编写 httpbin-go.service 文件，完成后放在 <code>/usr/lib/systemd/system/</code>。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">Unit</span>]</span><br><span class="line">Description=Httpbin by go.</span><br><span class="line">After=syslog.target network.target</span><br><span class="line"></span><br><span class="line">[<span class="type">Service</span>]</span><br><span class="line"><span class="built_in">Type</span>=simple</span><br><span class="line">WorkingDirectory=/home/httpbin/</span><br><span class="line">ExecStart=/home/httpbin/httpbin<span class="literal">-go</span></span><br><span class="line">Restart=on<span class="literal">-failure</span></span><br><span class="line"></span><br><span class="line">[<span class="type">Install</span>]</span><br><span class="line">WantedBy=multi<span class="literal">-user</span>.target</span><br></pre></td></tr></table></figure>

<p>[Unit] ：</p>
<ul>
<li><p>Description 服务的描述信息</p>
</li>
<li><p>After 依赖关系</p>
</li>
</ul>
<p>[Service]：</p>
<ul>
<li><p>Type 启动类型：（默认值）：<code>ExecStart</code> 字段启动的进程为主进程</p>
</li>
<li><p>WorkingDirectory 服务的工作目录</p>
</li>
<li><p>ExecStart 可执行文件所在的位置</p>
</li>
<li><p>Restart 重启行为：<code>on-failure</code> 表示任何意外的失败，就将重启 httpbin-go</p>
</li>
</ul>
<p>[Install]：</p>
<ul>
<li>WantedBy 表示该服务所在的 Target</li>
</ul>
<p><code>Target</code>的含义是服务组，表示一组服务。<code>WantedBy=multi-user.target</code>指的是，sshd 所在的 Target 是<code>multi-user.target</code>。</p>
<p>这个设置非常重要，因为执行<code>systemctl enable httpbin-go.service</code>命令时，<code>httpbin-go.service</code>的一个符号链接，就会放在<code>/etc/systemd/system</code>目录下面的<code>multi-user.target.wants</code>子目录之中。</p>
<p>Systemd 有默认的启动 Target。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl get-default</span><br><span class="line">multi-user.target</span><br></pre></td></tr></table></figure>

<p>上面的结果表示，默认的启动 Target 是<code>multi-user.target</code>。在这个组里的所有服务，都将开机启动。这就是为什么<code>systemctl enable</code>命令能设置开机启动的原因。</p>
<h3 id="2-添加开机启动项"><a href="#2-添加开机启动项" class="headerlink" title="2. 添加开机启动项"></a>2. 添加开机启动项</h3><p>systemd 默认从这个目录读取配置文件：</p>
<p><code>/etc/systemd/system/</code></p>
<p>但是，里面存放的大部分文件都是符号链接，真正的配置文件存放在这个目录：</p>
<p><code>/usr/lib/systemd/system/</code></p>
<p>systemctl enable 命令用于在上面两个目录之间，建立符号链接关系。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">systemctl enable httpbin<span class="literal">-go</span>.service</span><br></pre></td></tr></table></figure>



<p>以上 Go 二进制文件就可以开机自启动了。</p>
<p>本文小工具地址：<a href="https://tommygirl.cn/httpbin">httpbin-go</a></p>
]]></content>
      <tags>
        <tag>服务器</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】Systemd 入门教程：实战篇</title>
    <url>/2021/07/23/Systemd_Use/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-part-two.html">参考自：阮一峰老师博客</a></p>
<hr>
<p>上一篇文章，我介绍了 Systemd 的<a href="https://tommygirl.cn/2021/07/23/Systemd_Command/">主要命令</a>，今天介绍如何使用它完成一些基本的任务。</p>
<p><img src="https://www.ruanyifeng.com/blogimg/asset/2016/bg2016030801.jpg" alt="img"></p>
<span id="more"></span>

<h2 id="一、开机启动"><a href="#一、开机启动" class="headerlink" title="一、开机启动"></a>一、开机启动</h2><p>对于那些支持 Systemd 的软件，安装的时候，会自动在<code>/usr/lib/systemd/system</code>目录添加一个配置文件。</p>
<p>如果你想让该软件开机启动，就执行下面的命令（以<code>httpd.service</code>为例）。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable httpd</span><br></pre></td></tr></table></figure>

<p>上面的命令相当于在<code>/etc/systemd/system</code>目录添加一个符号链接，指向<code>/usr/lib/systemd/system</code>里面的<code>httpd.service</code>文件。</p>
<p>这是因为开机时，<code>Systemd</code>只执行<code>/etc/systemd/system</code>目录里面的配置文件。这也意味着，如果把修改后的配置文件放在该目录，就可以达到覆盖原始配置的效果。</p>
<h2 id="二、启动服务"><a href="#二、启动服务" class="headerlink" title="二、启动服务"></a>二、启动服务</h2><p>设置开机启动以后，软件并不会立即启动，必须等到下一次开机。如果想现在就运行该软件，那么要执行<code>systemctl start</code>命令。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">start</span> httpd</span><br></pre></td></tr></table></figure>

<p>执行上面的命令以后，有可能启动失败，因此要用<code>systemctl status</code>命令查看一下该服务的状态。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo systemctl status httpd</span><br><span class="line"></span><br><span class="line">httpd.service - The Apache HTTP Server</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/httpd.service; enabled)</span><br><span class="line">   Active: active (running) since 金 <span class="number">2014</span><span class="literal">-12</span><span class="literal">-05</span> <span class="number">12</span>:<span class="number">18</span>:<span class="number">22</span> JST; <span class="number">7</span>min ago</span><br><span class="line"> Main PID: <span class="number">4349</span> (httpd)</span><br><span class="line">   Status: <span class="string">&quot;Total requests: 1; Current requests/sec: 0; Current traffic:   0 B/sec&quot;</span></span><br><span class="line">   CGroup: /system.slice/httpd.service</span><br><span class="line">           ├─<span class="number">4349</span> /usr/sbin/httpd <span class="literal">-DFOREGROUND</span></span><br><span class="line">           ├─<span class="number">4350</span> /usr/sbin/httpd <span class="literal">-DFOREGROUND</span></span><br><span class="line">           ├─<span class="number">4351</span> /usr/sbin/httpd <span class="literal">-DFOREGROUND</span></span><br><span class="line">           ├─<span class="number">4352</span> /usr/sbin/httpd <span class="literal">-DFOREGROUND</span></span><br><span class="line">           ├─<span class="number">4353</span> /usr/sbin/httpd <span class="literal">-DFOREGROUND</span></span><br><span class="line">           └─<span class="number">4354</span> /usr/sbin/httpd <span class="literal">-DFOREGROUND</span></span><br><span class="line"></span><br><span class="line"><span class="number">12</span>月 <span class="number">05</span> <span class="number">12</span>:<span class="number">18</span>:<span class="number">22</span> localhost.localdomain systemd[<span class="number">1</span>]: Starting The Apache HTTP Server...</span><br><span class="line"><span class="number">12</span>月 <span class="number">05</span> <span class="number">12</span>:<span class="number">18</span>:<span class="number">22</span> localhost.localdomain systemd[<span class="number">1</span>]: Started The Apache HTTP Server.</span><br><span class="line"><span class="number">12</span>月 <span class="number">05</span> <span class="number">12</span>:<span class="number">22</span>:<span class="number">40</span> localhost.localdomain systemd[<span class="number">1</span>]: Started The Apache HTTP Server.</span><br></pre></td></tr></table></figure>

<p>上面的输出结果含义如下。</p>
<p><code>Loaded</code>行：配置文件的位置，是否设为开机启动<code>Active</code>行：表示正在运行<code>Main PID</code>行：主进程 ID<code>Status</code>行：由应用本身（这里是 httpd ）提供的软件当前状态<code>CGroup</code>块：应用的所有子进程日志块：应用的日志</p>
<h2 id="三、停止服务"><a href="#三、停止服务" class="headerlink" title="三、停止服务"></a>三、停止服务</h2><p>终止正在运行的服务，需要执行<code>systemctl stop</code>命令。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop httpd.service</span><br></pre></td></tr></table></figure>

<p>有时候，该命令可能没有响应，服务停不下来。这时候就不得不 “杀进程” 了，向正在运行的进程发出<code>kill</code>信号。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">kill</span> httpd.service</span><br></pre></td></tr></table></figure>

<p>此外，重启服务要执行<code>systemctl restart</code>命令。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart httpd.service</span><br></pre></td></tr></table></figure>



<h2 id="四、读懂配置文件"><a href="#四、读懂配置文件" class="headerlink" title="四、读懂配置文件"></a>四、读懂配置文件</h2><p>一个服务怎么启动，完全由它的配置文件决定。下面就来看，配置文件有些什么内容。</p>
<p>前面说过，配置文件主要放在<code>/usr/lib/systemd/system</code>目录，也可能在<code>/etc/systemd/system</code>目录。找到配置文件以后，使用文本编辑器打开即可。</p>
<p><code>systemctl cat</code>命令可以用来查看配置文件，下面以<code>sshd.service</code>文件为例，它的作用是启动一个 SSH 服务器，供其他用户以 SSH 方式登录。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">cat</span> sshd.service</span><br><span class="line"></span><br><span class="line">[<span class="type">Unit</span>]</span><br><span class="line">Description=OpenSSH server daemon</span><br><span class="line">Documentation=<span class="built_in">man</span>:sshd(<span class="number">8</span>) <span class="built_in">man</span>:sshd_config(<span class="number">5</span>)</span><br><span class="line">After=network.target sshd<span class="literal">-keygen</span>.service</span><br><span class="line">Wants=sshd<span class="literal">-keygen</span>.service</span><br><span class="line"></span><br><span class="line">[<span class="type">Service</span>]</span><br><span class="line">EnvironmentFile=/etc/sysconfig/sshd</span><br><span class="line">ExecStart=/usr/sbin/sshd <span class="literal">-D</span> <span class="variable">$OPTIONS</span></span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> <span class="literal">-HUP</span> <span class="variable">$MAINPID</span></span><br><span class="line"><span class="built_in">Type</span>=simple</span><br><span class="line">KillMode=<span class="keyword">process</span></span><br><span class="line">Restart=on<span class="literal">-failure</span></span><br><span class="line">RestartSec=<span class="number">42</span>s</span><br><span class="line"></span><br><span class="line">[<span class="type">Install</span>]</span><br><span class="line">WantedBy=multi<span class="literal">-user</span>.target</span><br></pre></td></tr></table></figure>

<p>可以看到，配置文件分成几个区块，每个区块包含若干条键值对。</p>
<p>下面依次解释每个区块的内容。</p>
<h2 id="五、-Unit-区块：启动顺序与依赖关系。"><a href="#五、-Unit-区块：启动顺序与依赖关系。" class="headerlink" title="五、 [Unit] 区块：启动顺序与依赖关系。"></a>五、 [Unit] 区块：启动顺序与依赖关系。</h2><p><code>Unit</code>区块的<code>Description</code>字段给出当前服务的简单描述，<code>Documentation</code>字段给出文档位置。</p>
<p>接下来的设置是启动顺序和依赖关系，这个比较重要。</p>
<blockquote>
<p><code>After</code>字段：表示如果<code>network.target</code>或<code>sshd-keygen.service</code>需要启动，那么<code>sshd.service</code>应该在它们之后启动。</p>
</blockquote>
<p>相应地，还有一个<code>Before</code>字段，定义<code>sshd.service</code>应该在哪些服务之前启动。</p>
<p>注意，<code>After</code>和<code>Before</code>字段只涉及启动顺序，不涉及依赖关系。</p>
<p>举例来说，某 Web 应用需要 postgresql 数据库储存数据。在配置文件中，它只定义要在 postgresql 之后启动，而没有定义依赖 postgresql 。上线后，由于某种原因，postgresql 需要重新启动，在停止服务期间，该 Web 应用就会无法建立数据库连接。</p>
<p>设置依赖关系，需要使用<code>Wants</code>字段和<code>Requires</code>字段。</p>
<blockquote>
<p><code>Wants</code>字段：表示<code>sshd.service</code>与<code>sshd-keygen.service</code>之间存在 “弱依赖” 关系，即如果 “sshd-keygen.service” 启动失败或停止运行，不影响<code>sshd.service</code>继续执行。</p>
</blockquote>
<p><code>Requires</code>字段则表示 “强依赖” 关系，即如果该服务启动失败或异常退出，那么<code>sshd.service</code>也必须退出。</p>
<p>注意，<code>Wants</code>字段与<code>Requires</code>字段只涉及依赖关系，与启动顺序无关，默认情况下是同时启动的。</p>
<h2 id="六、-Service-区块：启动行为"><a href="#六、-Service-区块：启动行为" class="headerlink" title="六、[Service] 区块：启动行为"></a>六、[Service] 区块：启动行为</h2><p><code>Service</code>区块定义如何启动当前服务。</p>
<h3 id="6-1-启动命令"><a href="#6-1-启动命令" class="headerlink" title="6.1 启动命令"></a>6.1 启动命令</h3><p>许多软件都有自己的环境参数文件，该文件可以用<code>EnvironmentFile</code>字段读取。</p>
<blockquote>
<p><code>EnvironmentFile</code>字段：指定当前服务的环境参数文件。该文件内部的<code>key=value</code>键值对，可以用<code>$key</code>的形式，在当前配置文件中获取。</p>
</blockquote>
<p>上面的例子中，sshd 的环境参数文件是<code>/etc/sysconfig/sshd</code>。</p>
<p>配置文件里面最重要的字段是<code>ExecStart</code>。</p>
<blockquote>
<p><code>ExecStart</code>字段：定义启动进程时执行的命令。</p>
</blockquote>
<p>上面的例子中，启动<code>sshd</code>，执行的命令是<code>/usr/sbin/sshd -D $OPTIONS</code>，其中的变量<code>$OPTIONS</code>就来自<code>EnvironmentFile</code>字段指定的环境参数文件。</p>
<p>与之作用相似的，还有如下这些字段。</p>
<ul>
<li><code>ExecReload</code>字段：重启服务时执行的命令</li>
<li><code>ExecStop</code>字段：停止服务时执行的命令</li>
<li><code>ExecStartPre</code>字段：启动服务之前执行的命令</li>
<li><code>ExecStartPost</code>字段：启动服务之后执行的命令</li>
<li><code>ExecStopPost</code>字段：停止服务之后执行的命令</li>
</ul>
<p>请看下面的例子。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">Service</span>]</span><br><span class="line">ExecStart=/bin/<span class="built_in">echo</span> execstart1</span><br><span class="line">ExecStart=</span><br><span class="line">ExecStart=/bin/<span class="built_in">echo</span> execstart2</span><br><span class="line">ExecStartPost=/bin/<span class="built_in">echo</span> post1</span><br><span class="line">ExecStartPost=/bin/<span class="built_in">echo</span> post2</span><br></pre></td></tr></table></figure>

<p>上面这个配置文件，第二行<code>ExecStart</code>设为空值，等于取消了第一行的设置，运行结果如下。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">execstart2</span><br><span class="line">post1</span><br><span class="line">post2</span><br></pre></td></tr></table></figure>

<p>所有的启动设置之前，都可以加上一个连词号（<code>-</code>），表示 “抑制错误”，即发生错误的时候，不影响其他命令的执行。比如，<code>EnvironmentFile=-/etc/sysconfig/sshd</code>（注意等号后面的那个连词号），就表示即使<code>/etc/sysconfig/sshd</code>文件不存在，也不会抛出错误。</p>
<h3 id="6-2-启动类型"><a href="#6-2-启动类型" class="headerlink" title="6.2 启动类型"></a>6.2 启动类型</h3><p><code>Type</code>字段定义启动类型。它可以设置的值如下。</p>
<ul>
<li>simple（默认值）：<code>ExecStart</code>字段启动的进程为主进程</li>
<li>forking：<code>ExecStart</code>字段将以<code>fork()</code>方式启动，此时父进程将会退出，子进程将成为主进程</li>
<li>oneshot：类似于<code>simple</code>，但只执行一次，Systemd 会等它执行完，才启动其他服务</li>
<li>dbus：类似于<code>simple</code>，但会等待 D-Bus 信号后启动</li>
<li>notify：类似于<code>simple</code>，启动结束后会发出通知信号，然后 Systemd 再启动其他服务</li>
<li>idle：类似于<code>simple</code>，但是要等到其他任务都执行完，才会启动该服务。一种使用场合是为让该服务的输出，不与其他服务的输出相混合</li>
</ul>
<p>下面是一个<code>oneshot</code>的例子，笔记本电脑启动时，要把触摸板关掉，配置文件可以这样写。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">Unit</span>]</span><br><span class="line">Description=<span class="built_in">Switch-off</span> Touchpad</span><br><span class="line"></span><br><span class="line">[<span class="type">Service</span>]</span><br><span class="line"><span class="built_in">Type</span>=oneshot</span><br><span class="line">ExecStart=/usr/bin/touchpad<span class="literal">-off</span></span><br><span class="line"></span><br><span class="line">[<span class="type">Install</span>]</span><br><span class="line">WantedBy=multi<span class="literal">-user</span>.target</span><br></pre></td></tr></table></figure>

<p>上面的配置文件，启动类型设为<code>oneshot</code>，就表明这个服务只要运行一次就够了，不需要长期运行。</p>
<p>如果关闭以后，将来某个时候还想打开，配置文件修改如下。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">Unit</span>]</span><br><span class="line">Description=<span class="built_in">Switch-off</span> Touchpad</span><br><span class="line"></span><br><span class="line">[<span class="type">Service</span>]</span><br><span class="line"><span class="built_in">Type</span>=oneshot</span><br><span class="line">ExecStart=/usr/bin/touchpad<span class="literal">-off</span> <span class="built_in">start</span></span><br><span class="line">ExecStop=/usr/bin/touchpad<span class="literal">-off</span> stop</span><br><span class="line">RemainAfterExit=yes</span><br><span class="line"></span><br><span class="line">[<span class="type">Install</span>]</span><br><span class="line">WantedBy=multi<span class="literal">-user</span>.target</span><br></pre></td></tr></table></figure>

<p>上面配置文件中，<code>RemainAfterExit</code>字段设为<code>yes</code>，表示进程退出以后，服务仍然保持执行。这样的话，一旦使用<code>systemctl stop</code>命令停止服务，<code>ExecStop</code>指定的命令就会执行，从而重新开启触摸板。</p>
<h3 id="6-3-重启行为"><a href="#6-3-重启行为" class="headerlink" title="6.3 重启行为"></a>6.3 重启行为</h3><p><code>Service</code>区块有一些字段，定义了重启行为。</p>
<blockquote>
<p><code>KillMode</code>字段：定义 Systemd 如何停止 sshd 服务。</p>
</blockquote>
<p>上面这个例子中，将<code>KillMode</code>设为<code>process</code>，表示只停止主进程，不停止任何 sshd 子进程，即子进程打开的 SSH session 仍然保持连接。这个设置不太常见，但对 sshd 很重要，否则你停止服务的时候，会连自己打开的 SSH session 一起杀掉。</p>
<p><code>KillMode</code>字段可以设置的值如下。</p>
<ul>
<li>control-group（默认值）：当前控制组里面的所有子进程，都会被杀掉</li>
<li>process：只杀主进程</li>
<li>mixed：主进程将收到 SIGTERM 信号，子进程收到 SIGKILL 信号</li>
<li>none：没有进程会被杀掉，只是执行服务的 stop 命令。</li>
</ul>
<p>接下来是<code>Restart</code>字段。</p>
<blockquote>
<p><code>Restart</code>字段：定义了 sshd 退出后，Systemd 的重启方式。</p>
</blockquote>
<p>上面的例子中，<code>Restart</code>设为<code>on-failure</code>，表示任何意外的失败，就将重启 sshd。如果 sshd 正常停止（比如执行<code>systemctl stop</code>命令），它就不会重启。</p>
<p><code>Restart</code>字段可以设置的值如下。</p>
<ul>
<li>no（默认值）：退出后不会重启</li>
<li>on-success：只有正常退出时（退出状态码为 0），才会重启</li>
<li>on-failure：非正常退出时（退出状态码非 0），包括被信号终止和超时，才会重启</li>
<li>on-abnormal：只有被信号终止和超时，才会重启</li>
<li>on-abort：只有在收到没有捕捉到的信号终止时，才会重启</li>
<li>on-watchdog：超时退出，才会重启always：不管是什么退出原因，总是重启</li>
</ul>
<p>对于守护进程，推荐设为<code>on-failure</code>。对于那些允许发生错误退出的服务，可以设为<code>on-abnormal</code>。</p>
<p>最后是<code>RestartSec</code>字段。</p>
<blockquote>
<p><code>RestartSec</code>字段：表示 Systemd 重启服务之前，需要等待的秒数。上面的例子设为等待 42 秒。</p>
</blockquote>
<h2 id="七、-Install-区块"><a href="#七、-Install-区块" class="headerlink" title="七、[Install] 区块"></a>七、[Install] 区块</h2><p><code>Install</code>区块，定义如何安装这个配置文件，即怎样做到开机启动。</p>
<blockquote>
<p><code>WantedBy</code>字段：表示该服务所在的 Target。</p>
</blockquote>
<p><code>Target</code>的含义是服务组，表示一组服务。<code>WantedBy=multi-user.target</code>指的是，sshd 所在的 Target 是<code>multi-user.target</code>。</p>
<p>这个设置非常重要，因为执行<code>systemctl enable sshd.service</code>命令时，<code>sshd.service</code>的一个符号链接，就会放在<code>/etc/systemd/system</code>目录下面的<code>multi-user.target.wants</code>子目录之中。</p>
<p>Systemd 有默认的启动 Target。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">get-default</span></span><br><span class="line">multi<span class="literal">-user</span>.target</span><br></pre></td></tr></table></figure>

<p>上面的结果表示，默认的启动 Target 是<code>multi-user.target</code>。在这个组里的所有服务，都将开机启动。这就是为什么<code>systemctl enable</code>命令能设置开机启动的原因。</p>
<p>使用 Target 的时候，<code>systemctl list-dependencies</code>命令和<code>systemctl isolate</code>命令也很有用。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 multi-user.target 包含的所有服务</span></span><br><span class="line">systemctl list<span class="literal">-dependencies</span> multi<span class="literal">-user</span>.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到另一个 target</span></span><br><span class="line"><span class="comment"># shutdown.target 就是关机状态</span></span><br><span class="line">sudo systemctl isolate shutdown.target</span><br></pre></td></tr></table></figure>

<p>一般来说，常用的 Target 有两个：一个是<code>multi-user.target</code>，表示多用户命令行状态；另一个是<code>graphical.target</code>，表示图形用户状态，它依赖于<code>multi-user.target</code>。官方文档有一张非常清晰的 [Target 依赖关系图](<a href="https://www.freedesktop.org/software/systemd/man/bootup.html#System">https://www.freedesktop.org/software/systemd/man/bootup.html#System</a> Manager Bootup)。</p>
<h2 id="八、Target-的配置文件"><a href="#八、Target-的配置文件" class="headerlink" title="八、Target 的配置文件"></a>八、Target 的配置文件</h2><p>Target 也有自己的配置文件。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">cat</span> multi<span class="literal">-user</span>.target</span><br><span class="line"></span><br><span class="line">[<span class="type">Unit</span>]</span><br><span class="line">Description=Multi<span class="literal">-User</span> System</span><br><span class="line">Documentation=<span class="built_in">man</span>:systemd.special(<span class="number">7</span>)</span><br><span class="line">Requires=basic.target</span><br><span class="line">Conflicts=rescue.service rescue.target</span><br><span class="line">After=basic.target rescue.service rescue.target</span><br><span class="line">AllowIsolate=yes</span><br></pre></td></tr></table></figure>

<p>注意，Target 配置文件里面没有启动命令。</p>
<p>上面输出结果中，主要字段含义如下。</p>
<blockquote>
<p><code>Requires</code>字段：要求<code>basic.target</code>一起运行。</p>
<p><code>Conflicts</code>字段：冲突字段。如果<code>rescue.service</code>或<code>rescue.target</code>正在运行，<code>multi-user.target</code>就不能运行，反之亦然。</p>
<p><code>After</code>：表示<code>multi-user.target</code>在<code>basic.target</code> 、 <code>rescue.service</code>、 <code>rescue.target</code>之后启动，如果它们有启动的话。</p>
<p><code>AllowIsolate</code>：允许使用<code>systemctl isolate</code>命令切换到<code>multi-user.target</code>。</p>
</blockquote>
<h2 id="九、修改配置文件后重启"><a href="#九、修改配置文件后重启" class="headerlink" title="九、修改配置文件后重启"></a>九、修改配置文件后重启</h2><p>修改配置文件以后，需要重新加载配置文件，然后重新启动相关服务。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重新加载配置文件</span></span><br><span class="line">sudo systemctl daemon<span class="literal">-reload</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启相关服务</span></span><br><span class="line">sudo systemctl restart foobarhttps://www.ruanyifeng.com/blog/<span class="number">2016</span>/<span class="number">03</span>/systemd<span class="literal">-tutorial</span><span class="literal">-part</span><span class="literal">-two</span>.html<span class="comment">#sr-toc-11)</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>服务器</tag>
        <tag>CentOS</tag>
        <tag>转载</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>UIModalPresentationFullScreen 导致渐变图层异常</title>
    <url>/2022/05/12/UIModalPresentationFullScreen_CAGradientLayer/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p>iOS 13 之前模态弹出一个页面默认是全屏展示，从 iOS 13 开始，如果不特意指定控制器的 <code>modalPresentationStyle</code> 属性，模态出的页面会是卡片式、非全屏，全屏的话需要指定：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">vc.modalPresentationStyle = <span class="built_in">UIModalPresentationFullScreen</span>;</span><br></pre></td></tr></table></figure>

<p>这一点相信很多年年做适配的同行早就知道了，所以这不是小咪要说的重点。</p>
<p>小咪要说的是今天修改一个极老的项目，L 页面是模态弹出的，所以用新的编译环境打包的话是一定要适配上面这一项的。然后又出现新的问题了…客户要求 L 页的背景是渐变色，当时采用的是下面的方式绘制一层渐变图层，加到 L 页的 View 上。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CAGradientLayer</span> *gl = [<span class="built_in">CAGradientLayer</span> layer];</span><br><span class="line">gl.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, SCREEN_WIDTH, SCREEN_HEIGHT);</span><br><span class="line">gl.colors = @[(__bridge <span class="keyword">id</span>)RGBA(<span class="number">246</span>, <span class="number">135</span>, <span class="number">72</span>, <span class="number">.9</span>f).CGColor, (__bridge <span class="keyword">id</span>)RGBA(<span class="number">230</span>, <span class="number">69</span>, <span class="number">90</span>, <span class="number">.9</span>f).CGColor];</span><br><span class="line">gl.startPoint = <span class="built_in">CGPointMake</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">gl.endPoint = <span class="built_in">CGPointMake</span>(<span class="number">0</span>, <span class="number">1.0</span>);</span><br><span class="line">[<span class="keyword">self</span>.view.layer addSublayer:gl];</span><br></pre></td></tr></table></figure>

<p>但是修改 <code>modalPresentationStyle</code> 以后，渐变图层跑到了最上面，也就是遮挡住了 L.view 的所有子控件，子控件的事件响应也被阻断了…临时的解决办法是手动把它往后挪了一层：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CALayer</span> *temp = [<span class="keyword">self</span>.view.layer.sublayers lastObject];</span><br><span class="line">[<span class="keyword">self</span>.view.layer insertSublayer:gl below:temp];</span><br></pre></td></tr></table></figure>

<p>视觉效果和响应上倒是恢复了，但是什么原因导致的图层顺序变化呢…小咪晕了…有遇到同样问题的小伙伴吗？</p>
<hr>
]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>UIDocumentInteractionController</title>
    <url>/2021/02/07/UIDocumentInteractionController/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>官方文档：<a href="https://developer.apple.com/documentation/uikit/uidocumentinteractioncontroller">UIDocumentInteractionController</a></p>
</blockquote>
<p>一种视图控制器，用于预览、打开或打印应用程序无法直接处理的文件格式的文件。名字叫控制器，但却是继承自  NSObject ……</p>
<h2 id="iPhone"><a href="#iPhone" class="headerlink" title="iPhone"></a>iPhone</h2><p>在 iOS 上简单的使用它来打开文件是类似这样的：</p>
<span id="more"></span>



<p>初始化的时候，基本就是指定文件路径、指定本应用内打开，还是直接弹出选择菜单可以其他应用内打开</p>
<ul>
<li>初始化：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> url <span class="operator">=</span> <span class="type">Bundle</span>.main.url(forResource: <span class="string">&quot;hhh&quot;</span>, withExtension: <span class="string">&quot;docx&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> documentController <span class="operator">=</span> <span class="type">UIDocumentInteractionController</span>.<span class="keyword">init</span>(url: url<span class="operator">!</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>本应用内预览文档</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置代理 --本应用内预览必须要添加代理 UIDocumentInteractionControllerDelegate</span></span><br><span class="line">documentController.delegate <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line"><span class="comment">//当前APP打开  需实现协议方法才可以完成预览功能</span></span><br><span class="line">documentController.presentPreview(animated: <span class="literal">true</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">documentInteractionControllerViewControllerForPreview</span>(<span class="keyword">_</span> <span class="params">controller</span>: <span class="type">UIDocumentInteractionController</span>)</span> -&gt; <span class="type">UIViewController</span> &#123;</span><br><span class="line">  <span class="comment">//这里需要返回给一个控制器用于展现 documentController 在其上面，所以我们就返回当前控制器self</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>当我们打开一个文档的时候就是左边这样的效果，直接预览文档。右上角的分享按钮也可以选择其他 App 打开文档：</p>
<center>
    <div style="display:inline-block;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/28.png" class width="300"></div>
    <div style="display:inline-block;margin-left:10px;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/29.png" class width="300"></div>
</center>



<ul>
<li>其他应用内预览文档</li>
</ul>
<p>网上很多都是说，加上打开 Menu 菜单(见右图)的一句代码就可以用第三方应用打开，例如:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> url <span class="operator">=</span> <span class="type">Bundle</span>.main.url(forResource: <span class="string">&quot;hhh&quot;</span>, withExtension: <span class="string">&quot;docx&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> documentController <span class="operator">=</span> <span class="type">UIDocumentInteractionController</span>.<span class="keyword">init</span>(url: url<span class="operator">!</span>)</span><br><span class="line">documentController.delegate <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">documentController.presentOptionsMenu(from: <span class="keyword">self</span>.view.frame, in: <span class="keyword">self</span>.view, animated: <span class="literal">true</span>)</span><br></pre></td></tr></table></figure>

<p>只这样写你会发现，菜单确实可以弹出，但你点分享到任何一个 App （包括 Quick Look）都是没反应的，而且在 console 中会报如下错误：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">Could not instantiate <span class="keyword">class</span> <span class="built_in">NSURL</span>. Error: Error Domain=<span class="built_in">NSCocoaErrorDomain</span> Code=<span class="number">4864</span> <span class="string">&quot;The URL archive of type “public.url” contains invalid data.&quot;</span> UserInfo=&#123;<span class="built_in">NSDebugDescription</span>=The URL archive of type “public.url” contains invalid data.&#125;</span><br></pre></td></tr></table></figure>

<p>……</p>
<p>网上的资料给的解决办法是 documentController 这个变量需要被持有一下，才可以用第三方 App 打开文档，所以上面的代码就变成了这样：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>, <span class="title">UIDocumentInteractionControllerDelegate</span>  </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> documentController <span class="operator">=</span> <span class="type">UIDocumentInteractionController</span>()</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">showDocInteractController</span>()</span> -&gt; <span class="type">Void</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">Bundle</span>.main.url(forResource: <span class="string">&quot;hhh&quot;</span>, withExtension: <span class="string">&quot;docx&quot;</span>)</span><br><span class="line">    documentController.url <span class="operator">=</span> url</span><br><span class="line">    documentController.delegate <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">    documentController.presentOptionsMenu(from: <span class="keyword">self</span>.view.frame, in: <span class="keyword">self</span>.view, animated: <span class="literal">true</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>持有一下就可以，咩~~~</p>
<p>PS : 设置 <code>presentOptionsMenuFromRect</code> 的话，我们给的是 全屏，那给一半儿的大小这个选择菜单会怎么弹呢，感兴趣自己试一下🤓……</p>
<p>这些不是重点，重点是在 iPad 上，菜单的弹出会有些不一样的现象</p>
<h2 id="iPad"><a href="#iPad" class="headerlink" title="iPad"></a>iPad</h2><p>上面同样其他应用内预览文档的代码，测试发现点击文档以后，没有弹出选择菜单，当然文档也没有打开。console 中报注入布局异常的错误：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="number">2021</span>-<span class="number">02</span>-<span class="number">26</span> <span class="number">14</span>:<span class="number">43</span>:<span class="number">02</span><span class="variable">.326794</span>+<span class="number">0800</span> UIDocumentInteraction[<span class="number">13039</span>:<span class="number">85917</span>] [LayoutConstraints] Unable to simultaneously satisfy constraints.</span><br><span class="line">	Probably at least one of the constraints in the following list is one you don&#x27;t want. </span><br><span class="line">	Try <span class="keyword">this</span>: </span><br><span class="line">		(<span class="number">1</span>) look at each <span class="keyword">constraint</span> <span class="keyword">and</span> try to figure out which you don&#x27;t <span class="keyword">expect</span>; </span><br><span class="line">		(<span class="number">2</span>) find the code that added the unwanted <span class="keyword">constraint</span> <span class="keyword">or</span> constraints <span class="keyword">and</span> fix it. </span><br><span class="line">(</span><br><span class="line">    <span class="string">&quot;&lt;NSLayoutConstraint:0x600001912da0 H:|-(0)-[_UIActivityContentTitleView:0x7fa2ccc33b10]   (active, names: &#x27;|&#x27;:_UINavigationBarContentView:0x7fa2ccc26a40 )&gt;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&lt;NSLayoutConstraint:0x600001912e40 _UIActivityContentTitleView:0x7fa2ccc33b10.trailing == _UINavigationBarContentView:0x7fa2ccc26a40.trailing   (active)&gt;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&lt;NSLayoutConstraint:0x6000019130c0 LPLinkView:0x7fa2ccc33f30.leading == UILayoutGuide:0x600000322680&#x27;UIViewLayoutMarginsGuide&#x27;.leading   (active)&gt;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&lt;NSLayoutConstraint:0x600001912f30 H:[LPLinkView:0x7fa2ccc33f30]-(27)-|   (active, names: &#x27;|&#x27;:_UIActivityContentTitleView:0x7fa2ccc33b10 )&gt;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&lt;NSLayoutConstraint:0x600001919d10 &#x27;UIView-Encapsulated-Layout-Width&#x27; _UINavigationBarContentView:0x7fa2ccc26a40.width == 0   (active)&gt;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&lt;NSLayoutConstraint:0x600001912fd0 &#x27;UIView-leftMargin-guide-constraint&#x27; H:|-(16)-[UILayoutGuide:0x600000322680&#x27;UIViewLayoutMarginsGuide&#x27;](LTR)   (active, names: &#x27;|&#x27;:_UIActivityContentTitleView:0x7fa2ccc33b10 )&gt;&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">Will attempt to recover by breaking <span class="keyword">constraint</span> </span><br><span class="line">&lt;NSLayoutConstraint:<span class="number">0</span>x6000019130c0 LPLinkView:<span class="number">0</span>x7fa2ccc33f30<span class="variable">.leading</span> == UILayoutGuide:<span class="number">0</span>x600000322680&#x27;UIViewLayoutMarginsGuide&#x27;<span class="variable">.leading</span>   (active)&gt;</span><br><span class="line"></span><br><span class="line">Make a symbolic breakpoint at UIViewAlertForUnsatisfiableConstraints to catch <span class="keyword">this</span> in the debugger.</span><br><span class="line">The methods in the UIConstraintBasedLayoutDebugging category on UIView listed in &lt;UIKitCore/UIView<span class="variable">.h</span>&gt; may also be helpful.</span><br><span class="line"><span class="number">2021</span>-<span class="number">02</span>-<span class="number">26</span> <span class="number">14</span>:<span class="number">43</span>:<span class="number">02</span><span class="variable">.327098</span>+<span class="number">0800</span> UIDocumentInteraction[<span class="number">13039</span>:<span class="number">87855</span>] [Fetching] LPFileMetadataProviderSpecialization failed to retrieve a thumbnail from QuickLookThumbnailing (Error Domain=QLThumbnailErrorDomain Code=<span class="number">0</span> <span class="string">&quot;Could not generate a thumbnail&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们先看下 Safari 中的 Menu 是什么样子:</p>
<center>
    <div style="display:inline-block;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/26.png" class width="600"></div>
</center>

<center>
    <div style="display:inline-block;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/27.png" class width="500"></div>
</center>


<p>咦，无论横竖屏，Menu 不再是以屏幕宽度或者高度来处理的了，而且头上多了一点 “小尖尖~”。所以猜测我们需要给定它一个弹出点。但 API 貌似又没有对应的接口。</p>
<p>参考了官方一个 issue 讨论，emmmmmm，其实我也没太看懂啥意思 😂，总之~~</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> frame <span class="operator">=</span> <span class="type">CGRect</span>.<span class="keyword">init</span>(x: <span class="keyword">self</span>.view.frame.midX, y: <span class="keyword">self</span>.view.frame.midY, width: <span class="number">0</span>, height: <span class="keyword">self</span>.view.frame.height <span class="operator">*</span> <span class="number">0.5</span>)</span><br><span class="line">documentController.presentOptionsMenu(from: frame, in: <span class="keyword">self</span>.view, animated: <span class="literal">true</span>)</span><br></pre></td></tr></table></figure>

<p>这句代码中的 frame 不给全屏就可以正常弹出，小尖尖的位置自己有兴趣可以调一调玩一玩儿~~</p>
]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>WKWebView 隐藏系统键盘的 inputAccessoryView</title>
    <url>/2021/06/22/WKWebView-Keyboard-0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在学习 <code>WKWebView</code> 中键盘的弹出、隐藏时，碰巧看到了网友的一个需求是 隐藏 <code>inputAccessoryView</code>，虽然我并不需要这么高端的操作，也不懂前端的问题，但思路碰巧帮我解决了另一个问题。🤓</p>
<span id="more"></span>

<h4 id="1-声明一个类-用于置空-inputAccessoryView"><a href="#1-声明一个类-用于置空-inputAccessoryView" class="headerlink" title="1. 声明一个类 用于置空 inputAccessoryView"></a>1. 声明一个类 用于置空 <code>inputAccessoryView</code></h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">_NoInputAccessoryView</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">_NoInputAccessoryView</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)inputAccessoryView &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>



<h4 id="2-实现如下方法，例如在-WKWebView-的控制器中"><a href="#2-实现如下方法，例如在-WKWebView-的控制器中" class="headerlink" title="2.实现如下方法，例如在 WKWebView 的控制器中"></a>2.实现如下方法，例如在 WKWebView 的控制器中</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)removeInputAccessoryViewFromWKWebView:(<span class="built_in">WKWebView</span> *)webView &#123;</span><br><span class="line">    <span class="built_in">UIView</span> *targetView;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">UIView</span> *view <span class="keyword">in</span> webView.scrollView.subviews) &#123;</span><br><span class="line">        <span class="keyword">if</span>([[view.class description] hasPrefix:<span class="string">@&quot;WKContent&quot;</span>]) &#123;</span><br><span class="line">            targetView = view;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!targetView) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSString</span> *noInputAccessoryViewClassName = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;%@_NoInputAccessoryView&quot;</span>, targetView.class.superclass];</span><br><span class="line">    Class newClass = <span class="built_in">NSClassFromString</span>(noInputAccessoryViewClassName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(newClass == <span class="literal">nil</span>) &#123;</span><br><span class="line">        newClass = objc_allocateClassPair(targetView.class, [noInputAccessoryViewClassName cStringUsingEncoding:<span class="built_in">NSASCIIStringEncoding</span>], <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(!newClass) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Method method = class_getInstanceMethod([_NoInputAccessoryView <span class="keyword">class</span>], <span class="keyword">@selector</span>(inputAccessoryView));</span><br><span class="line"></span><br><span class="line">        class_addMethod(newClass, <span class="keyword">@selector</span>(inputAccessoryView), method_getImplementation(method), method_getTypeEncoding(method));</span><br><span class="line"></span><br><span class="line">        objc_registerClassPair(newClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    object_setClass(targetView, newClass);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-调用上面的方法，传入对应的-WebView"><a href="#3-调用上面的方法，传入对应的-WebView" class="headerlink" title="3.调用上面的方法，传入对应的 WebView"></a>3.调用上面的方法，传入对应的 WebView</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">self</span> removeInputAccessoryViewFromWKWebView:webView];</span><br></pre></td></tr></table></figure>



<p>PS：这样的确可以隐藏 <code>inputAccessoryView</code>，但是键盘的关闭就需要再单独处理一下了。😂🤓🤗</p>
<p>PPS: <a href="https://stackoverflow.com/questions/32546394/hiding-keyboard-accessorybar-in-wkwebview">原文链接</a></p>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>WebView</tag>
      </tags>
  </entry>
  <entry>
    <title>URL Loading System[译]</title>
    <url>/2018/04/19/URLLoadingSystem/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>Interact with URLs and communicate with servers using standard Internet protocols.</p>
<p>与URL交互并使用标准Internet协议与服务器通信。</p>
<p>官方文档：<a href="https://developer.apple.com/documentation/foundation/url_loading_system?language=objc">苹果文档</a></p>
</blockquote>
<h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><p>URL Loading System 使用标准协议（例如 https 或者我们创建的自定义协议）提供对 URL 标识的资源的访问。加载是异步执行的，因此你的应用可以保持响应能力，并在数据或错误到达时处理它们。使用 URLSession 实例创建一个或多个 URLSessionTask 实例，这些 URLSessionTask 实例可以获取数据、下载文件或将数据和文件上传到服务器。要配置会话，请使用 URLSessionConfiguration 对象，该对象控制行为，例如如何使用缓存和 cookie，或者是否允许在蜂窝网络上进行连接。</p>
<p>我们可以重复使用一个会话来创建任务。例如，网络浏览器可能有分开的会话供常规浏览和私人浏览使用，而私人会话不会缓存其数据。图1显示了具有这些配置的两个会话如何创建多个任务。</p>
<span id="more"></span>

<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/30.png"></p>
<p>每个会话都与一个 delegate 相关联，以接收定期更新（或错误）。delegate 默认会调用我们提供的完成处理程序块，如果选择提供自己的自定义 delegate，则不会调用此块。还可以将会话配置为在后台运行，以便在应用程序挂起时，系统可以代表它下载数据并唤醒应用以交付结果。</p>
<h2 id="话题"><a href="#话题" class="headerlink" title="话题"></a>话题</h2><h3 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h3><p>配置并创建会话，然后使用它们创建URL任务。</p>
<ul>
<li>Fetching Website Data into Memory：通过从URL会话创建数据任务，将数据直接接收到内存中。</li>
<li>Analyzing HTTP Traffic with Instruments：测量基于 HTTP 的网络性能和应用程序的使用情况。</li>
<li>NSURLSession：协调一组相关的网络数据传输任务的对象。</li>
<li>NSURLSessionTask：在URL会话中执行一项任务，例如下载特定资源。</li>
</ul>
<h3 id="请求与响应"><a href="#请求与响应" class="headerlink" title="请求与响应"></a>请求与响应</h3><ul>
<li>NSURLRequest：与协议或 URL 方案无关的 URL 加载请求。</li>
<li>NSURLResponse：与协议或 URL 方案无关的，对 URL 加载请求的响应相关联的元数据。</li>
<li>NSHTTPURLResponse：与 HTTP 协议 URL 加载请求的响应关联的元数据。</li>
</ul>
<h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><ul>
<li>Uploading Data to a Website：将数据从你的应用发送到服务器。</li>
<li>Uploading Streams of Data：将数据流发送到服务器。</li>
</ul>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><ul>
<li>Downloading Files from Websites：直接下载文件到文件系统。</li>
<li>Pausing and Resuming Downloads：允许用户继续下载而无需重新开始。</li>
<li>Downloading Files in the Background：创建在应用不活动时下载文件的任务。</li>
</ul>
<h3 id="缓存行为"><a href="#缓存行为" class="headerlink" title="缓存行为"></a>缓存行为</h3><ul>
<li>Accessing Cached Data：控制 URL 请求如何利用以前缓存的数据。</li>
<li>CachedURLResponse：对 URL 请求的缓存响应。</li>
<li>URLCache：将 URL 请求映射到缓存响应对象的对象。</li>
</ul>
<h3 id="身份验证和凭证"><a href="#身份验证和凭证" class="headerlink" title="身份验证和凭证"></a>身份验证和凭证</h3><ul>
<li>Handling an Authentication Challenge：当服务器要求对 URL 请求进行身份验证时，做出适当的响应。</li>
<li>NSURLAuthenticationChallenge：来自服务器的挑战，要求来自客户端的身份验证。</li>
<li>NSURLCredential：认证凭证，由特定于凭证类型和要使用的持久性存储类型（如果有）的信息组成。</li>
<li>NSURLCredentialStorage：共享凭据缓存的管理器。</li>
<li>NSURLProtectionSpace：服务器或服务器上需要认证的区域，通常描述为领域。</li>
</ul>
<h3 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h3><ul>
<li>NSHTTPCookie：HTTP cookie 的表示形式。</li>
<li>NSHTTPCookieStorage：一个管理 cookie 存储的容器。</li>
</ul>
<h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><ul>
<li>URLError：URL 加载 API 返回的错误代码。</li>
<li>URL Loading System Error Info Keys：从 URL 加载 API 生成的错误对象的用户信息字典中识别这些键。</li>
</ul>
<h2 id="系列："><a href="#系列：" class="headerlink" title="系列："></a>系列：</h2><p><a href="https://tommygirl.cn/2018/04/19/URLLoadingSystem/">URL Loading System[译]</a></p>
<p><a href="https://tommygirl.cn/2018/04/19/NSURLRequest/">NSURLRequest</a></p>
<p><a href="https://tommygirl.cn/2018/04/20/NSURLResponse/">NSURLResponse</a></p>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>WKWebView 协议篇</title>
    <url>/2021/12/02/WKWebView-Protocol/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>WKWebView 的基础内容可以看我之前写的这篇。<a href="/2020/12/01/WKWebView/">WKWebView 基础篇</a></p>
<p>项目中用到的几个协议：</p>
<ul>
<li>WKNavigationDelegate</li>
<li>WKUIDelegate</li>
<li>WKScriptMessageHandler</li>
<li>WKHTTPCookieStoreObserver</li>
<li>WKURLSchemeHandler</li>
<li>WKScriptMessageHandlerWithReply</li>
</ul>
<p>让我们康康都是用来做什么的……</p>
<span id="more"></span>

<hr>
<h2 id="WKNavigationDelegate"><a href="#WKNavigationDelegate" class="headerlink" title="WKNavigationDelegate"></a>WKNavigationDelegate</h2><blockquote>
<p>接受或拒绝导航更改以及跟踪导航请求进度的方法。</p>
</blockquote>
<p>功能有点儿类似 UIWebView 的 <code>UIWebViewDelegate</code>。例如，可以使用这些方法来限制网页中的特定链接导航，还可以使用它们来跟踪请求的进度，并响应错误和身份验证挑战……等等</p>
<p>一、允许或拒绝一个导航</p>
<p>用到两个常量 <code>WKNavigationActionPolicy</code>、 <code>WKNavigationResponsePolicy</code></p>
<ul>
<li>是否允许或拒绝一个导航请求</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView decidePolicyForNavigationAction:(<span class="built_in">WKNavigationAction</span> *)navigationAction decisionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">WKNavigationActionPolicy</span>))decisionHandler;</span><br></pre></td></tr></table></figure>

<p>iOS 13新增了一个接口，需要注意的是，实现了这个方法的话，↑ 的是不会被调用的。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*  iOS 13</span></span><br><span class="line"><span class="comment">	@discussion If you implement this method,</span></span><br><span class="line"><span class="comment">	-webView:decidePolicyForNavigationAction:decisionHandler: will not be called.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView decidePolicyForNavigationAction:(<span class="built_in">WKNavigationAction</span> *)navigationAction preferences:(<span class="built_in">WKWebpagePreferences</span> *)preferences decisionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">WKNavigationActionPolicy</span>, <span class="built_in">WKWebpagePreferences</span> *))decisionHandler;</span><br></pre></td></tr></table></figure>

<ul>
<li>是否展示或拒绝一个导航的返回值</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView decidePolicyForNavigationResponse:(<span class="built_in">WKNavigationResponse</span> *)navigationResponse decisionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">WKNavigationResponsePolicy</span>))decisionHandler;</span><br></pre></td></tr></table></figure>

<p>二、跟踪请求的加载进度</p>
<ul>
<li>请求开始</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView didStartProvisionalNavigation:(<span class="keyword">null_unspecified</span> <span class="built_in">WKNavigation</span> *)navigation;</span><br></pre></td></tr></table></figure>

<ul>
<li>收到服务器的重定向请求</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView didReceiveServerRedirectForProvisionalNavigation:(<span class="keyword">null_unspecified</span> <span class="built_in">WKNavigation</span> *)navigation;</span><br></pre></td></tr></table></figure>

<ul>
<li>已经开始接收主框架的内容</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView didCommitNavigation:(<span class="keyword">null_unspecified</span> <span class="built_in">WKNavigation</span> *)navigation;</span><br></pre></td></tr></table></figure>

<ul>
<li>请求已经完成</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView didFinishNavigation:(<span class="keyword">null_unspecified</span> <span class="built_in">WKNavigation</span> *)navigation;</span><br></pre></td></tr></table></figure>

<p>三、请求发生错误</p>
<ul>
<li>请求期间发生错误</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView didFailNavigation:(<span class="keyword">null_unspecified</span> <span class="built_in">WKNavigation</span> *)navigation withError:(<span class="built_in">NSError</span> *)error;</span><br></pre></td></tr></table></figure>

<ul>
<li>请求的早期发生错误</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView didFailProvisionalNavigation:(<span class="keyword">null_unspecified</span> <span class="built_in">WKNavigation</span> *)navigation withError:(<span class="built_in">NSError</span> *)error;</span><br></pre></td></tr></table></figure>

<ul>
<li>WebView的内容进程终止</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webViewWebContentProcessDidTerminate:(<span class="built_in">WKWebView</span> *)webView;</span><br></pre></td></tr></table></figure>

<p>四、身份验证挑战</p>
<ul>
<li>是否回应收到的身份验证质询</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView didReceiveAuthenticationChallenge:(<span class="built_in">NSURLAuthenticationChallenge</span> *)challenge completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLSessionAuthChallengeDisposition</span> disposition, <span class="built_in">NSURLCredential</span> * _Nullable credential))completionHandler;</span><br></pre></td></tr></table></figure>

<ul>
<li>询问委托是否继续使用不推荐使用的 TLS 版本的连接， ios(14.0)</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView authenticationChallenge:(<span class="built_in">NSURLAuthenticationChallenge</span> *)challenge shouldAllowDeprecatedTLS:(<span class="keyword">void</span> (^)(<span class="built_in">BOOL</span>))decisionHandler;</span><br></pre></td></tr></table></figure>



<h2 id="WKUIDelegate"><a href="#WKUIDelegate" class="headerlink" title="WKUIDelegate"></a>WKUIDelegate</h2><blockquote>
<p>代表网页以原生的形式实现一些 UI 元素。</p>
</blockquote>
<p>实现这个协议可以：</p>
<ul>
<li><p>控制新窗口的打开</p>
</li>
<li><p>自定义 Alert、多个按钮的 Alert、可以输入文字的 Alert 等等</p>
</li>
<li><p>显示上传面板、上下文菜单等</p>
</li>
</ul>
<h3 id="一、JS-触发的-Alert"><a href="#一、JS-触发的-Alert" class="headerlink" title="一、JS 触发的 Alert"></a>一、JS 触发的 Alert</h3><p>这几个我觉得是最常用也是最基本的几个方法，UIWebView 中是使用浏览器默认实现的样式，但在 WKWebView 中需要自己实现原生的视图。</p>
<ul>
<li>普普通通的 Alert ，由 JS 的 <code>alert</code> 函数触发。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView runJavaScriptAlertPanelWithMessage:(<span class="built_in">NSString</span> *)message initiatedByFrame:(<span class="built_in">WKFrameInfo</span> *)frame completionHandler:(<span class="keyword">void</span> (^)(<span class="keyword">void</span>))completionHandler;</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">alert(<span class="string">&quot;逗你玩儿~&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>=&gt;</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView runJavaScriptAlertPanelWithMessage:(<span class="built_in">NSString</span> *)message initiatedByFrame:(<span class="built_in">WKFrameInfo</span> *)frame completionHandler:(<span class="keyword">void</span> (^)(<span class="keyword">void</span>))completionHandler &#123;</span><br><span class="line">  	<span class="comment">// JS端调用alert时所传的数据可以通过message拿到，message = 逗你玩儿</span></span><br><span class="line">    <span class="built_in">UIAlertController</span> *alert = [<span class="built_in">UIAlertController</span> alertControllerWithTitle:<span class="string">@&quot;提示&quot;</span> message:message preferredStyle:<span class="built_in">UIAlertControllerStyleAlert</span>];</span><br><span class="line">    <span class="built_in">UIAlertAction</span> *a = [<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@&quot;OK&quot;</span> style:<span class="built_in">UIAlertActionStyleDefault</span> handler:^(<span class="built_in">UIAlertAction</span> * _Nonnull action) &#123;</span><br><span class="line">        completionHandler();</span><br><span class="line">    &#125;];</span><br><span class="line">    [alert addAction:a];</span><br><span class="line">    [<span class="keyword">self</span> presentViewController:alert animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>区分确认/取消的 Alert ，由 JS 的 <code>confirm</code> 函数触发。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView runJavaScriptConfirmPanelWithMessage:(<span class="built_in">NSString</span> *)message initiatedByFrame:(<span class="built_in">WKFrameInfo</span> *)frame completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">BOOL</span>))completionHandler;</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logout</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> leave = <span class="built_in">window</span>.confirm(<span class="string">&quot;Do you really want to leave?&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (leave) &#123;</span><br><span class="line">        alert(<span class="string">&quot;Thanks for Visiting!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">&quot;I love you!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>=&gt;</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//(void (^)(BOOL))completionHandler Block 返回给JS的类型是一个布尔</span></span><br><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView runJavaScriptConfirmPanelWithMessage:(<span class="built_in">NSString</span> *)message initiatedByFrame:(<span class="built_in">WKFrameInfo</span> *)frame completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">BOOL</span>))completionHandler &#123;    </span><br><span class="line">    <span class="built_in">UIAlertController</span> *alertController = [<span class="built_in">UIAlertController</span> alertControllerWithTitle:<span class="string">@&quot;提示&quot;</span> message:message preferredStyle:<span class="built_in">UIAlertControllerStyleAlert</span>];</span><br><span class="line">    [alertController addAction:([<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@&quot;取消&quot;</span> style:<span class="built_in">UIAlertActionStyleCancel</span> handler:^(<span class="built_in">UIAlertAction</span> * _Nonnull action) &#123;</span><br><span class="line">        completionHandler(<span class="literal">NO</span>);</span><br><span class="line">    &#125;])];</span><br><span class="line">    </span><br><span class="line">    [alertController addAction:([<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@&quot;确认&quot;</span> style:<span class="built_in">UIAlertActionStyleDefault</span> handler:^(<span class="built_in">UIAlertAction</span> * _Nonnull action) &#123;</span><br><span class="line">        completionHandler(<span class="literal">YES</span>);</span><br><span class="line">    &#125;])];</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span> presentViewController:alertController animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>带输入框的 Alert，由 JS 的 <code>prompt</code> 函数触发。</li>
</ul>
<p>一个 prompt 对话框，包含一个单行文本框，一个“取消”按钮，一个“确定”按钮，在对话框关闭时，返回用户输入到文本框内的值(可能为空)。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView runJavaScriptTextInputPanelWithPrompt:(<span class="built_in">NSString</span> *)prompt defaultText:(<span class="built_in">NSString</span> *)defaultText initiatedByFrame:(<span class="built_in">WKFrameInfo</span> *)frame completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSString</span> * _Nullable))completionHandler;</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testPrompt</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sign = prompt(<span class="string">&quot;你是什么星座的?&quot;</span>, <span class="string">&quot;告诉我吧~&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (sign == <span class="string">&quot;天蝎座&quot;</span>) &#123;</span><br><span class="line">        alert(<span class="string">&quot;哇! 我跟天蝎座犯冲!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">&quot;好吧，我是射手座!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>=&gt; </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//prompt = 你是什么星座的?; defaultText = 告诉我吧~</span></span><br><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView runJavaScriptTextInputPanelWithPrompt:(<span class="built_in">NSString</span> *)prompt defaultText:(<span class="built_in">NSString</span> *)defaultText initiatedByFrame:(<span class="built_in">WKFrameInfo</span> *)frame completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSString</span> * _Nullable))completionHandler &#123;</span><br><span class="line">    <span class="built_in">UIAlertController</span> *alert = [<span class="built_in">UIAlertController</span> alertControllerWithTitle:<span class="string">@&quot;提示&quot;</span> message:defaultText preferredStyle:<span class="built_in">UIAlertControllerStyleAlert</span>];</span><br><span class="line">    [alert addTextFieldWithConfigurationHandler:^(<span class="built_in">UITextField</span> * _Nonnull textField) &#123;</span><br><span class="line">        textField.textColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">    &#125;];</span><br><span class="line">    [alert addAction:[<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@&quot;确定&quot;</span> style:<span class="built_in">UIAlertActionStyleDefault</span> handler:^(<span class="built_in">UIAlertAction</span> * _Nonnull action) &#123;</span><br><span class="line">        completionHandler([[alert.textFields lastObject] text]);</span><br><span class="line">    &#125;]];</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">self</span> presentViewController:alert animated:<span class="literal">YES</span> completion:<span class="literal">NULL</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二、创建和关闭新的-WebView"><a href="#二、创建和关闭新的-WebView" class="headerlink" title="二、创建和关闭新的 WebView"></a>二、创建和关闭新的 WebView</h3><ul>
<li>用一个新的 WKWebView 加载请求、资源，可以通过 JS 的 <code>window.open()</code> 函数或者 <code>a</code> 标签触发。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">WKWebView</span> *)webView:(<span class="built_in">WKWebView</span> *)webView createWebViewWithConfiguration:(<span class="built_in">WKWebViewConfiguration</span> *)configuration forNavigationAction:(<span class="built_in">WKNavigationAction</span> *)navigationAction windowFeatures:(<span class="built_in">WKWindowFeatures</span> *)windowFeatures;</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.open(<span class="string">&#x27;https://baidu.com&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>=&gt;</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">WKWebView</span> *)webView:(<span class="built_in">WKWebView</span> *)webView createWebViewWithConfiguration:(<span class="built_in">WKWebViewConfiguration</span> *)configuration forNavigationAction:(<span class="built_in">WKNavigationAction</span> *)navigationAction windowFeatures:(<span class="built_in">WKWindowFeatures</span> *)windowFeatures &#123;</span><br><span class="line">    <span class="built_in">WKWebView</span>* v = [[<span class="built_in">WKWebView</span> alloc] initWithFrame:webView.frame configuration:configuration];</span><br><span class="line">    v.UIDelegate = webView.UIDelegate;</span><br><span class="line">    v.navigationDelegate = webView.navigationDelegate;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UIViewController</span>* vc = [[<span class="built_in">UIViewController</span> alloc] init];</span><br><span class="line">    vc.modalPresentationStyle = <span class="built_in">UIModalPresentationOverCurrentContext</span>;</span><br><span class="line">    vc.view = v;</span><br><span class="line">    [<span class="keyword">self</span> presentViewController:vc animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关于这个方法，我看好多人在这里都判断一下 <code>navigationAction.targetFrame.isMainFrame</code> ，其实但凡这个方法执行了， targetFrame 一定是 nil。so……🤐</p>
<ul>
<li>通知你的应用 DOM 窗口的 <code>close()</code> 已经成功调用，也就是 JS 调用了 <code>window.close()</code></li>
</ul>
<p>这里我理解的是，和上面的原生页面打开方式对应，原生决定怎么关闭页面。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webViewDidClose:(<span class="built_in">WKWebView</span> *)webView;</span><br></pre></td></tr></table></figure>

<h3 id="三、上下文菜单"><a href="#三、上下文菜单" class="headerlink" title="三、上下文菜单"></a>三、上下文菜单</h3><p>不是太熟悉。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView contextMenuWillPresentForElement:(<span class="built_in">WKContextMenuElementInfo</span> *)elementInfo;</span><br><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView contextMenuForElement:(<span class="built_in">WKContextMenuElementInfo</span> *)elementInfo willCommitWithAnimator:(<span class="keyword">id</span>&lt;<span class="built_in">UIContextMenuInteractionCommitAnimating</span>&gt;)animator;</span><br><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView contextMenuConfigurationForElement:(<span class="built_in">WKContextMenuElementInfo</span> *)elementInfo completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">UIContextMenuConfiguration</span> * _Nullable configuration))completionHandler;</span><br><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView contextMenuDidEndForElement:(<span class="built_in">WKContextMenuElementInfo</span> *)elementInfo;</span><br></pre></td></tr></table></figure>

<h3 id="四、iOS10-iOS13"><a href="#四、iOS10-iOS13" class="headerlink" title="四、iOS10 - iOS13"></a>四、iOS10 - iOS13</h3><p>已经废弃的几个方法，被 ↑ 的替换掉。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)webView:(<span class="built_in">WKWebView</span> *)webView shouldPreviewElement:(<span class="built_in">WKPreviewElementInfo</span> *)elementInfo <span class="built_in">WK_API_DEPRECATED_WITH_REPLACEMENT</span>(<span class="string">&quot;webView:contextMenuConfigurationForElement:completionHandler:&quot;</span>, ios(<span class="number">10.0</span>, <span class="number">13.0</span>));</span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIViewController</span> *)webView:(<span class="built_in">WKWebView</span> *)webView previewingViewControllerForElement:(<span class="built_in">WKPreviewElementInfo</span> *)elementInfo defaultActions:(<span class="built_in">NSArray</span>&lt;<span class="keyword">id</span> &lt;<span class="built_in">WKPreviewActionItem</span>&gt;&gt; *)previewActions <span class="built_in">WK_API_DEPRECATED_WITH_REPLACEMENT</span>(<span class="string">&quot;webView:contextMenuConfigurationForElement:completionHandler:&quot;</span>, ios(<span class="number">10.0</span>, <span class="number">13.0</span>));</span><br><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView commitPreviewingViewController:(<span class="built_in">UIViewController</span> *)previewingViewController <span class="built_in">WK_API_DEPRECATED_WITH_REPLACEMENT</span>(<span class="string">&quot;webView:contextMenuForElement:willCommitWithAnimator:&quot;</span>, ios(<span class="number">10.0</span>, <span class="number">13.0</span>));</span><br></pre></td></tr></table></figure>

<h3 id="五、iOS-15-新增-麦克风、摄像头、运动权限"><a href="#五、iOS-15-新增-麦克风、摄像头、运动权限" class="headerlink" title="五、iOS 15 新增-麦克风、摄像头、运动权限"></a>五、iOS 15 新增-麦克风、摄像头、运动权限</h3><p>这两个 API 暂时不太清楚是怎么触发的，通过 input 标签反正没作用</p>
<ul>
<li>代表请求麦克风音频和摄像头视频访问权限。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView requestMediaCapturePermissionForOrigin:(<span class="built_in">WKSecurityOrigin</span> *)origin initiatedByFrame:(<span class="built_in">WKFrameInfo</span> *)frame type:(<span class="built_in">WKMediaCaptureType</span>)type decisionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">WKPermissionDecision</span> decision))decisionHandler;</span><br></pre></td></tr></table></figure>

<ul>
<li>允许你的应用程序确定给定的安全源是否可以访问设备的方向和运动。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView requestDeviceOrientationAndMotionPermissionForOrigin:(<span class="built_in">WKSecurityOrigin</span> *)origin initiatedByFrame:(<span class="built_in">WKFrameInfo</span> *)frame decisionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">WKPermissionDecision</span> decision))decisionHandler;</span><br></pre></td></tr></table></figure>



<h2 id="WKScriptMessageHandler"><a href="#WKScriptMessageHandler" class="headerlink" title="WKScriptMessageHandler"></a>WKScriptMessageHandler</h2><blockquote>
<p>用于 <code>接收</code> JavaScript 发来的消息的消息处理器。</p>
</blockquote>
<p>iOS 与 JavaScript 做交互的协议。当 JavaScript 代码发送一条专门针对我们的消息处理程序的消息时，可以通过这个协议的方法来接收，然后自定义后续的处理。</p>
<p>涉及到的类型 <code>WKUserContentController</code>。基本用法我们在 <a href="https://tommygirl.cn/2020/12/01/WKWebView/#WKUserContentController"><code>WKWebView 基础篇</code></a> 提到过，这里就不重复了。</p>
<p>很简单，就一个方法。干就完了。</p>
<ul>
<li>接收到 script message</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)userContentController:(<span class="built_in">WKUserContentController</span> *)userContentController didReceiveScriptMessage:(<span class="built_in">WKScriptMessage</span> *)message;</span><br></pre></td></tr></table></figure>

<h2 id="WKScriptMessageHandlerWithReply"><a href="#WKScriptMessageHandlerWithReply" class="headerlink" title="WKScriptMessageHandlerWithReply"></a>WKScriptMessageHandlerWithReply</h2><blockquote>
<p>用于 <code>接收</code>＋<code>响应</code> JavaScript 发来的消息的消息处理器。</p>
</blockquote>
<p>ios14.0 新增的协议和 API ，同样是 iOS 与 JavaScript 做交互的协议。不过与 <code>WKScriptMessageHandler</code> 相比，多了一个可以向 JS 发送响应结果的处理器。</p>
<p>也是只有一个 API 。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)userContentController:(<span class="built_in">WKUserContentController</span> *)userContentController didReceiveScriptMessage:(<span class="built_in">WKScriptMessage</span> *)message replyHandler:(<span class="keyword">void</span> (^)(<span class="keyword">id</span> _Nullable reply, <span class="built_in">NSString</span> *_Nullable errorMessage))replyHandler;</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scriptMessageWithReply</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> promise = <span class="built_in">window</span>.webkit.messageHandlers.YYWK.postMessage(<span class="string">&quot;Fulfill me with 42&quot;</span>);</span><br><span class="line">    promise.then(</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">&#x27;result&#x27;</span> + result);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">&#x27;error&#x27;</span> + error);</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>=&gt;</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="built_in">WKUserContentController</span> *userContentController = [[<span class="built_in">WKUserContentController</span> alloc] init];</span><br><span class="line">  [userContentController addScriptMessageHandlerWithReply:<span class="keyword">self</span> contentWorld:[<span class="built_in">WKContentWorld</span> pageWorld] name:<span class="string">@&quot;YYWK&quot;</span>];</span><br><span class="line">  <span class="built_in">WKWebViewConfiguration</span> *configuration = [[<span class="built_in">WKWebViewConfiguration</span> alloc] init];</span><br><span class="line">  configuration.userContentController = userContentController;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"> </span><br><span class="line">- (<span class="keyword">void</span>)userContentController:(<span class="built_in">WKUserContentController</span> *)userContentController didReceiveScriptMessage:(<span class="built_in">WKScriptMessage</span> *)message replyHandler:(<span class="keyword">void</span> (^)(<span class="keyword">id</span> _Nullable reply, <span class="built_in">NSString</span> *_Nullable errorMessage))replyHandler &#123;</span><br><span class="line">    <span class="keyword">if</span> ([message.body isEqual:<span class="string">@&quot;Fulfill me with 42&quot;</span>])</span><br><span class="line">        replyHandler(@<span class="number">42</span>, <span class="literal">nil</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        replyHandler(<span class="literal">nil</span>, <span class="string">@&quot;Unexpected message received&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="WKHTTPCookieStoreObserver"><a href="#WKHTTPCookieStoreObserver" class="headerlink" title="WKHTTPCookieStoreObserver"></a>WKHTTPCookieStoreObserver</h2><blockquote>
<p>用于监听WebView中cookie的变化。</p>
</blockquote>
<p>很简单，就一个方法：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">WKHTTPCookieStoreObserver</span> &lt;<span class="title">NSObject</span>&gt;</span></span><br><span class="line"><span class="keyword">@optional</span></span><br><span class="line">- (<span class="keyword">void</span>)cookiesDidChangeInCookieStore:(<span class="built_in">WKHTTPCookieStore</span> *)cookieStore;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<p>上一篇文章我们提到过，与 <code>NSHTTPCookieStorage</code> 的同步操作不同，WKHTTPCookieStore 获取 cookie 是一个异步操作。从 <code>WKHTTPCookieStore</code> 向 <code>NSHTTPCookieStorage</code> 同步 cookie 的话，会发现获取结果有很明显的延迟。太好的办法我也没发现。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)cookiesDidChangeInCookieStore:(<span class="built_in">WKHTTPCookieStore</span> *)cookieStore &#123;</span><br><span class="line">    [cookieStore getAllCookies:^(<span class="built_in">NSArray</span>&lt;<span class="built_in">NSHTTPCookie</span> *&gt; * _Nonnull cookies) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;%s :[%@]&quot;</span>, __FUNCTION__, cookies);</span><br><span class="line">				</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">NSHTTPCookie</span> *cookie <span class="keyword">in</span> cookies) &#123;</span><br><span class="line">            [[<span class="built_in">NSHTTPCookieStorage</span> sharedHTTPCookieStorage] setCookie:cookie];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="WKURLSchemeHandler"><a href="#WKURLSchemeHandler" class="headerlink" title="WKURLSchemeHandler"></a>WKURLSchemeHandler</h2><p>走，让我们去私聊~~</p>
<hr>
<h2 id="关于-WKWebView-的几篇文章："><a href="#关于-WKWebView-的几篇文章：" class="headerlink" title="关于 WKWebView 的几篇文章："></a><strong>关于 WKWebView 的几篇文章：</strong></h2><p><a href="/2021/12/01/WKWebView/">WKWebView 基础篇</a><br><a href="/2021/12/02/WKWebView-Protocol/">WKWebView 协议篇</a><br><a href="/2021/12/11/WKWebView-Use/">WKWebView 实战篇</a></p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a><strong>Demo</strong></h2><p><a href="https://github.com/ATommyGirl/WebView">WebView 的 Demo</a></p>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>WebView</tag>
      </tags>
  </entry>
  <entry>
    <title>WKWebView 实战篇</title>
    <url>/2021/12/11/WKWebView-Use/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p>前两篇文章简单学习了 WKWebView 的基础内容和几个协议，今天我们看看在使用中常见的问题。</p>
<h2 id="一、Cookie-同步"><a href="#一、Cookie-同步" class="headerlink" title="一、Cookie 同步"></a>一、Cookie 同步</h2><p>以往通过 AFNetworking、NSURLSession、UIWebView 等方式得到的 cookie，统统放在 NSHTTPCookieStorage 中，一般情况下是不需要我们特别处理的。但对于 WKWebView 我们说过，改为放在 WKHTTPCookieStore 中，而且两者是不互通的。举个例子，对于现在很多 原生 + h5 混合开发的 App 来说，通常在登录成功以后，WebView 访问页面时会希望携带会话信息直接通过服务端的认证，而不是在 WebView 中再登录一次。这个时候我们可能就需要同步一下两个 Storage 中的 cookie。</p>
<span id="more"></span>

<p>在 <a href="/2020/12/01/WKWebView/#WKProcessPool">WKWebView 基础篇 - WKProcessPool</a> 中，我们留了一个疑问，给不同的 WKWebView 指定不同的 WKProcessPool，他们的 cookie 能否自动同步呢？跟上面的问题一起测试一下：</p>
<ol>
<li>使用两个 UIWebView 和 UIWebView-1、两个 WKWebView 和 WKWebView -1，访问同样的页面。</li>
</ol>
<p>例如谷歌账号的个人信息页面 <code>https://myaccount.google.com/personal-info</code> ，没有登录而直接访问这个页面的话，会重定向到登录页面。同时，两个 WKWebView 我们指定不同的 WKProcessPool 。</p>
<img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/WK01.png" width="500px">

<ol start="2">
<li>在 <code>viewWillAppear</code> 中让 WebView 刷新</li>
</ol>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewWillAppear:(<span class="built_in">BOOL</span>)animated &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewWillAppear:animated];</span><br><span class="line">    [<span class="keyword">self</span>.webView reload];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>选择任意一个页面进行登录，例如第一个 UIWebView 。</li>
</ol>
<p>当第一个 UIWebView 登录成功以后，我们切换页签刷新其他三个页面，会发现 UIWebView-1 可以成功访问 personal-info 页面，而两个 WKWebView 依旧是登录页面。同样，如果选择一个 WKWebView 进行登录结果也是一样的。所以，不同的 UIWebView 可以共享 NSHTTPCookieStorage 中的 cookie；不同的 WKWebView 、不同的 WKProcessPool 也可以共享 WKHTTPCookieStore 中的 cookie。当然它们二者是不互通的。</p>
<ol start="4">
<li>一个简单的 cookie 同步方案</li>
</ol>
<p>❌ <strong>Cookie 同步方案目前有缺陷，不建议这种方式.2022.11.25</strong></p>
<ul>
<li>NSHTTPCookieStorage 向 WKHTTPCookieStore 同步</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (@available(iOS <span class="number">11.0</span>, *)) &#123;</span><br><span class="line">    <span class="built_in">NSArray</span> *cookies = [[<span class="built_in">NSHTTPCookieStorage</span> sharedHTTPCookieStorage] cookies];</span><br><span class="line">    <span class="built_in">WKHTTPCookieStore</span> *cookieStroe = <span class="keyword">self</span>.webView.configuration.websiteDataStore.httpCookieStore;</span><br><span class="line">    <span class="keyword">if</span> (cookies.count == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSHTTPCookie</span> *cookie <span class="keyword">in</span> cookies) &#123;</span><br><span class="line">        [cookieStroe setCookie:cookie completionHandler:^&#123;</span><br><span class="line">            <span class="keyword">if</span> ([[cookies lastObject] isEqual:cookie]) &#123;</span><br><span class="line">                <span class="comment">//Sync end</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Fallback on earlier versions</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li> WKHTTPCookieStore 向 NSHTTPCookieStorage 同步，使用 WKHTTPCookieStoreObserver</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">WKWebViewController</span> () &lt;<span class="title">WKHTTPCookieStoreObserver</span>&gt;</span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">  </span><br><span class="line">[configuration.websiteDataStore.httpCookieStore addObserver:<span class="keyword">self</span>];</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - WKHTTPCookieStoreObserver</span></span><br><span class="line">- (<span class="keyword">void</span>)cookiesDidChangeInCookieStore:(<span class="built_in">WKHTTPCookieStore</span> *)cookieStore &#123;</span><br><span class="line">    [cookieStore getAllCookies:^(<span class="built_in">NSArray</span>&lt;<span class="built_in">NSHTTPCookie</span> *&gt; * _Nonnull cookies) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">NSHTTPCookie</span> *cookie <span class="keyword">in</span> cookies) &#123;</span><br><span class="line">            [[<span class="built_in">NSHTTPCookieStorage</span> sharedHTTPCookieStorage] setCookie:cookie];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样实现的一个缺点是 cookie 污染，因为不管三七二十八都同步到一起了。可以做一个简单的筛选？只同步访问目标资源需要的 cookie ？欢迎讨论~</p>
<h2 id="二、跨域"><a href="#二、跨域" class="headerlink" title="二、跨域"></a>二、跨域</h2><p>关于跨域我接触的也不是很多，这篇 <a href="https://www.jianshu.com/p/f880878c1398">什么是跨域请求以及实现跨域的方案</a> 我觉得写的很清楚。iOS 开发中常遇到的跨域问题有两种：无法访问本地 HTML 资源；跨域存取 Cookie 问题。</p>
<ul>
<li>对于 无法访问本地 HTML 资源 的情况，修改下面的属性。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[configuration.preferences setValue:@YES forKey:<span class="string">@&quot;allowFileAccessFromFileURLs&quot;</span>];</span><br><span class="line"><span class="keyword">if</span> (@available(iOS <span class="number">10.0</span>, *)) &#123;</span><br><span class="line">    [configuration setValue:@YES forKey:<span class="string">@&quot;allowUniversalAccessFromFileURLs&quot;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>对于 跨域存取 Cookie 问题</li>
</ul>
<p>读了一下这篇博客，算是作为一个参考思路吧。<a href="https://dib-nhnl.github.io/2018/02/13/WKWebView%E8%B7%A8%E5%9F%9F%E7%9A%84Cookie%E9%97%AE%E9%A2%98/">WKWebView跨域的Cookie问题</a> 。</p>
<h2 id="三、Native-与-JS-的交互"><a href="#三、Native-与-JS-的交互" class="headerlink" title="三、Native 与 JS 的交互"></a>三、Native 与 JS 的交互</h2><h3 id="JS-调用-Native"><a href="#JS-调用-Native" class="headerlink" title="JS 调用 Native"></a>JS 调用 Native</h3><p>在 <a href="/2020/12/01/WKWebView/#WKUserContentController"><code>WKWebView 基础篇 - WKUserContentController</code></a> 提到过了，通过消息处理器 addScriptMessageHandler 注册一个唯一的 name ，并且实现 WKScriptMessageHandler 协议。 示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//js 测</span></span><br><span class="line"><span class="built_in">window</span>.webkit.messageHandlers.YYWK.postMessage([<span class="string">&#x27;MPWebView&#x27;</span>, <span class="string">&#x27;close&#x27;</span>, []]);</span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//native 测</span></span><br><span class="line">- (<span class="keyword">void</span>)userContentController:(<span class="built_in">WKUserContentController</span> *)userContentController didReceiveScriptMessage:(<span class="built_in">WKScriptMessage</span> *)message &#123;</span><br><span class="line">    <span class="keyword">if</span> ([message.name isEqualToString:<span class="string">@&quot;YYWK&quot;</span>]) &#123;</span><br><span class="line">      <span class="comment">//Call MPWebView&#x27;s selector - close.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Native-调用-JS"><a href="#Native-调用-JS" class="headerlink" title="Native 调用 JS"></a>Native 调用 JS</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//js 已声明了一个方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">helloWorld</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(message);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;YES&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//native 测</span></span><br><span class="line">[<span class="keyword">self</span>.webView evaluateJavaScript:<span class="string">@&quot;helloWorld(&#x27;Are you kidding me?&#x27;)&quot;</span> completionHandler:^(<span class="keyword">id</span> _Nullable result, <span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">  	<span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, result); <span class="comment">//Will be &#x27;YES&#x27;.</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<p>当然，如果调用的 JS 方法不存在，result 会是 nil。</p>
<h3 id="JS-调用-Native-并且得到执行结果"><a href="#JS-调用-Native-并且得到执行结果" class="headerlink" title="JS 调用 Native 并且得到执行结果"></a>JS 调用 Native 并且得到执行结果</h3><p>我们可以看到，Native 调用 JS 时，苹果提供了 completionHandler 来获得执行结果；但是 JS 通过 postMessage 调用 Native 时，我们是没有办法将 Native 的执行结果同步给 JS 的。苹果应该也注意到了这个问题，所以在 iOS14 中提供了一个新的解决方案，让我们一起康康：</p>
<h4 id="1-iOS14-新增"><a href="#1-iOS14-新增" class="headerlink" title="1. iOS14 新增"></a>1. iOS14 新增</h4><blockquote>
<p>WKScriptMessageHandlerWithReply</p>
</blockquote>
<p>iOS14.0 新增的协议，同样是 iOS 与 JavaScript 做交互的协议。不过与 WKScriptMessageHandler 相比，多了一个可以向 JS 发送响应结果的处理器，而且还是异步的。是不是用起来很爽？🤓</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//js 测使用promise异步回调获取结果。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scriptMessageWithReply</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> promise = <span class="built_in">window</span>.webkit.messageHandlers.YYWK.postMessage(<span class="string">&quot;Fulfill me with 42&quot;</span>);</span><br><span class="line">    promise.then(</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">&#x27;result&#x27;</span> + result);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">&#x27;error&#x27;</span> + error);</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//native 测</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">WKUserContentController</span> *userContentController = [[<span class="built_in">WKUserContentController</span> alloc] init];</span><br><span class="line">  [userContentController addScriptMessageHandlerWithReply:<span class="keyword">self</span> contentWorld:[<span class="built_in">WKContentWorld</span> pageWorld] name:<span class="string">@&quot;YYWK&quot;</span>];</span><br><span class="line">  <span class="built_in">WKWebViewConfiguration</span> *configuration = [[<span class="built_in">WKWebViewConfiguration</span> alloc] init];</span><br><span class="line">  configuration.userContentController = userContentController;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"> </span><br><span class="line">- (<span class="keyword">void</span>)userContentController:(<span class="built_in">WKUserContentController</span> *)userContentController didReceiveScriptMessage:(<span class="built_in">WKScriptMessage</span> *)message replyHandler:(<span class="keyword">void</span> (^)(<span class="keyword">id</span> _Nullable reply, <span class="built_in">NSString</span> *_Nullable errorMessage))replyHandler &#123;</span><br><span class="line">    <span class="keyword">if</span> ([message.body isEqual:<span class="string">@&quot;Fulfill me with 42&quot;</span>])</span><br><span class="line">        replyHandler(@<span class="number">42</span>, <span class="literal">nil</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        replyHandler(<span class="literal">nil</span>, <span class="string">@&quot;Unexpected message received&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-基于-prompt-的实现"><a href="#2-基于-prompt-的实现" class="headerlink" title="2. 基于 prompt 的实现"></a>2. 基于 prompt 的实现</h4><p><a href="/2021/12/02/WKWebView-Protocol/#WKUIDelegate">WKWebView 协议篇 - WKUIDelegate</a> 中我们提到过关于 Native 实现 JS <code>prompt</code> 函数的操作。JS 会触发一个带输入框的 Alert，等用户输入了信息之后，Native 会将结果异步返回到 JS。所以我们是不是可以利用这个异步时机呢？这个时候 prompt 的参数就不是普通的字符串了，而是作为一个指令。示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> msg = prompt(<span class="string">&quot;GetUserMessage&quot;</span>, <span class="string">&quot;YYLittleCat&quot;</span>);</span><br><span class="line">    <span class="comment">//Use YYLittleCat&#x27;s msg.</span></span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Native 的处理就改为：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//native 接收到的prompt: 指令 = 获取用户的信息; defaultText: uid = YYLittleCat</span></span><br><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView runJavaScriptTextInputPanelWithPrompt:(<span class="built_in">NSString</span> *)prompt defaultText:(<span class="built_in">NSString</span> *)defaultText initiatedByFrame:(<span class="built_in">WKFrameInfo</span> *)frame completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSString</span> * _Nullable))completionHandler &#123;</span><br><span class="line">    <span class="keyword">if</span> ([prompt isEqualToString:<span class="string">@&quot;GetUserMessage&quot;</span>]) &#123;</span><br><span class="line">        <span class="comment">//Did get user message.</span></span><br><span class="line">        completionHandler(<span class="string">@&quot;A json object, Like dictionary to string.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="四、HTTPS-单、双向认证"><a href="#四、HTTPS-单、双向认证" class="headerlink" title="四、HTTPS 单、双向认证"></a>四、HTTPS 单、双向认证</h2><p>以我们当前博客站点儿为例，SSL 证书是向”正经“机构申请的，Nginx 配置 HTTPS，并且 HTTP 请求自动跳转 HTTPS 示例：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span>  tommygirl.cn;</span><br><span class="line">    <span class="attribute">ssl_certificate</span>  certs/server.crt;<span class="comment">#公钥</span></span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> certs/server.key;<span class="comment">#私钥</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span>       [::]:<span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  tommygirl.cn;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span>   https://tommygirl.cn;</span><br><span class="line">&#125; </span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>更多关于 Nginx 配置 HTTPS 单、双向认证的内容 <a href="https://www.hi-linux.com/posts/38492.html">Here</a> 。</p>
<h3 id="单向认证"><a href="#单向认证" class="headerlink" title="单向认证"></a>单向认证</h3><p>显然通过浏览器访问 <a href="https://tommygirl.cn/">tommygirl.cn</a> 是可以成功的，并且地址栏有一个小锁头🔒，所以 HTTPS 我们配置成功了。或者说单向认证已经没问题了。那有的同学可能会问，单向认证？谁？哪里认证的？我没有认证呀？我们对照着一个流程图看一下一个完整的 HTTPS 请求都经历了哪些过程：</p>
<p><img src="https://ata2-img.cn-hangzhou.oss-pub.aliyun-inc.com/14158ca87e2f341ff044efd967f3e008.png" alt="img"></p>
<ol>
<li>客户端访问 <a href="https://tommygirl.cn/">https://tommygirl.cn</a> ；</li>
<li>服务器端将本机的公钥证书 server.crt 发送给客户端；</li>
<li>客户端读取公钥证书 server.crt ，取出了服务端公钥；</li>
<li>客户端生成一个随机数（密钥 R），用刚才得到的服务器公钥去加密这个随机数形成密文，发送给服务端；</li>
<li>服务端用自己的私钥 server.key 去解密这个密文，得到了密钥 R；</li>
<li>服务端和客户端在后续通讯过程中就使用这个密钥 R 进行通信了。</li>
</ol>
<p>所以单向认证是在哪一步完成的？第3步。那浏览器怎么知道应该信任我们的 SSL 证书呢？受信任的根证书，其任何下级证书都是受信任的。根证书在哪里呢？以 Mac 为例，打开钥匙串可以看到有一项是 系统根证书，也就是说系统会内置一部分根证书，浏览器在拿到我们的 SSL 证书后，它使用里面的公钥来验证签名并在证书链上向上移动一层；重复这个过程：对签名进行身份验证，并跟踪签名的证书链，直到最终到达浏览器信任存储中的一个根证书。如果它不能将证书链回到其受信任的根，它就不会信任该证书。（关于证书链的讨论，是一个比较大的话题，可以先参考 <a href="https://cloud.tencent.com/developer/article/1458151">证书链</a> ，这里不再赘述。）</p>
<h3 id="双向认证"><a href="#双向认证" class="headerlink" title="双向认证"></a>双向认证</h3><p>客户端校验服务端的证书可靠性称为单向认证，那顾名思义，双向认证中服务端也需要校验客户端的合法性。为了不影响页面的正常访问，新起了一个 ssl.tommygirl.cn，Nginx 上的测试配置：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span>  ssl.tommygirl.cn;</span><br><span class="line">    <span class="attribute">ssl_certificate</span>  certs/server.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> certs/server.key;</span><br><span class="line">    <span class="attribute">ssl_client_certificate</span> certs/client.crt;</span><br><span class="line">    <span class="attribute">ssl_verify_client</span> <span class="literal">on</span>;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在访问 <a href="https://ssl.tommygirl.cn/">https://ssl.tommygirl.cn</a> 会收到 Nginx 的错误提示，因为我们没有发送客户端的证书：</p>
<img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/WK02.png" width="500px">

<p>继续说，一个基于双向认证的请求交互过程：</p>
<p><img src="https://ata2-img.cn-hangzhou.oss-pub.aliyun-inc.com/08e6235892053a81603a4c3d7c7f44ad.png" alt="img"></p>
<ol>
<li>客户端访问 <a href="https://ssl.tommygirl.cn/">https://ssl.tommygirl.cn</a> ；</li>
<li>服务端返回 server.crt；</li>
<li>客户端校验 crt 文件中的证书颁发机构、证书时效、公钥信息等等；</li>
<li>客户端将客户端公钥证书 client.crt 发送给服务器端；</li>
<li>服务器端解密客户端公钥证书，拿到客户端公钥；</li>
<li>客户端发送自己支持的加密方案给服务器端；</li>
<li>服务器端根据自己和客户端的能力，选择一个双方都能接受的加密方案，使用客户端的公钥加密后发送给客户端；</li>
<li>客户端使用自己的私钥解密加密方案，生成一个随机数 R，使用服务器公钥加密后传给服务器端；</li>
<li>服务端用自己的私钥去解密这个密文，得到了密钥 R；</li>
<li>服务端和客户端在后续通讯过程中就使用这个密钥 R 进行通信了。</li>
</ol>
<h3 id="手机端的处理"><a href="#手机端的处理" class="headerlink" title="手机端的处理"></a>手机端的处理</h3><p>简单的单向认证，手机端也是不用特别处理的；以往在 UIWebView 中如果想实现双向认证，需要自己定义 NSURLProtocol 做网络拦截，并且实现 NSURLSessionDelegate 协议方法进行处理。但对于 WKWebView，Bingo~苹果提供了单独的方法供开发者实现。</p>
<blockquote>
<p>相关协议： <a href="/2021/12/02/WKWebView-Protocol/#WKNavigationDelegate">WKNavigationDelegate</a></p>
</blockquote>
<p>供参考的实现如下，细节看项目需求优化吧。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView didReceiveAuthenticationChallenge:(<span class="built_in">NSURLAuthenticationChallenge</span> *)challenge completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLSessionAuthChallengeDisposition</span>, <span class="built_in">NSURLCredential</span> * _Nullable))completionHandler &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%s&quot;</span>,__FUNCTION__);</span><br><span class="line">    <span class="built_in">NSString</span> *authenticationMethod = [[challenge protectionSpace] authenticationMethod];</span><br><span class="line">    <span class="keyword">if</span> ([authenticationMethod isEqualToString:<span class="built_in">NSURLAuthenticationMethodServerTrust</span>]) &#123; </span><br><span class="line">      	<span class="comment">//校验服务端证书</span></span><br><span class="line">        SecTrustRef secTrustRef = challenge.protectionSpace.serverTrust;</span><br><span class="line">        <span class="keyword">if</span> (secTrustRef != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            SecTrustResultType result;</span><br><span class="line">            OSErr er = SecTrustEvaluate(secTrustRef, &amp;result);</span><br><span class="line">            <span class="keyword">if</span> (er != noErr)&#123;</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@&quot;error&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (result) &#123;</span><br><span class="line">                <span class="keyword">case</span> kSecTrustResultProceed:</span><br><span class="line">                    <span class="built_in">NSLog</span>(<span class="string">@&quot;kSecTrustResultProceed&quot;</span>);</span><br><span class="line">                    completionHandler(<span class="built_in">NSURLSessionAuthChallengePerformDefaultHandling</span>, <span class="literal">nil</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> kSecTrustResultUnspecified:</span><br><span class="line">                    <span class="built_in">NSLog</span>(<span class="string">@&quot;kSecTrustResultUnspecified&quot;</span>);</span><br><span class="line">                    completionHandler(<span class="built_in">NSURLSessionAuthChallengeUseCredential</span>, [<span class="built_in">NSURLCredential</span> credentialForTrust:secTrustRef]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> kSecTrustResultRecoverableTrustFailure:</span><br><span class="line">                    <span class="built_in">NSLog</span>(<span class="string">@&quot;kSecTrustResultRecoverableTrustFailure&quot;</span>);</span><br><span class="line">                    completionHandler(<span class="built_in">NSURLSessionAuthChallengeUseCredential</span>, [<span class="built_in">NSURLCredential</span> credentialForTrust:secTrustRef]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> ([authenticationMethod isEqualToString:<span class="built_in">NSURLAuthenticationMethodClientCertificate</span>]) &#123; </span><br><span class="line">      	<span class="comment">//发送客户端证书</span></span><br><span class="line">        SecIdentityRef identity = <span class="literal">NULL</span>;</span><br><span class="line">        SecTrustRef trust = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">NSString</span> *p12 = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@&quot;client&quot;</span>ofType:<span class="string">@&quot;p12&quot;</span>];</span><br><span class="line">        <span class="built_in">NSFileManager</span> *fileManager = [<span class="built_in">NSFileManager</span> defaultManager];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(![fileManager fileExistsAtPath:p12]) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;client.p12: Not exist.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">NSData</span> *PKCS12Data = [<span class="built_in">NSData</span> dataWithContentsOfFile:p12];</span><br><span class="line">            <span class="keyword">if</span> ([<span class="keyword">self</span> _extractIdentity:&amp;identity andTrust:&amp;trust fromPKCS12Data:PKCS12Data]) &#123;</span><br><span class="line">                SecCertificateRef certificate = <span class="literal">NULL</span>;</span><br><span class="line">                SecIdentityCopyCertificate(identity, &amp;certificate);</span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">void</span>*certs[] = &#123;certificate&#125;;</span><br><span class="line">                <span class="built_in">CFArrayRef</span> certArray = <span class="built_in">CFArrayCreate</span>(kCFAllocatorDefault, certs,<span class="number">1</span>,<span class="literal">NULL</span>);</span><br><span class="line">                <span class="built_in">NSURLCredential</span> *credential = [<span class="built_in">NSURLCredential</span> credentialWithIdentity:identity certificates:(__bridge <span class="built_in">NSArray</span>*)certArray persistence:<span class="built_in">NSURLCredentialPersistencePermanent</span>];</span><br><span class="line">                <span class="built_in">NSURLSessionAuthChallengeDisposition</span> disposition =<span class="built_in">NSURLSessionAuthChallengeUseCredential</span>;</span><br><span class="line">                completionHandler(disposition, credential);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;else&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)_extractIdentity:(SecIdentityRef*)outIdentity andTrust:(SecTrustRef *)outTrust fromPKCS12Data:(<span class="built_in">NSData</span> *)inPKCS12Data &#123;</span><br><span class="line">    OSStatus securityError = errSecSuccess;</span><br><span class="line">    <span class="comment">//client certificate password</span></span><br><span class="line">    <span class="built_in">NSDictionary</span> *optionsDictionary = [<span class="built_in">NSDictionary</span> dictionaryWithObject:<span class="string">@&quot;123456&quot;</span></span><br><span class="line">                                                                 forKey:(__bridge <span class="keyword">id</span>)kSecImportExportPassphrase];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CFArrayRef</span> items = <span class="built_in">CFArrayCreate</span>(<span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    securityError = SecPKCS12Import((__bridge <span class="built_in">CFDataRef</span>)inPKCS12Data,(__bridge <span class="built_in">CFDictionaryRef</span>)optionsDictionary,&amp;items);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(securityError == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">CFDictionaryRef</span> myIdentityAndTrust =<span class="built_in">CFArrayGetValueAtIndex</span>(items,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">void</span>*tempIdentity =<span class="literal">NULL</span>;</span><br><span class="line">        tempIdentity= <span class="built_in">CFDictionaryGetValue</span> (myIdentityAndTrust,kSecImportItemIdentity);</span><br><span class="line">        *outIdentity = (SecIdentityRef)tempIdentity;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">void</span>*tempTrust =<span class="literal">NULL</span>;</span><br><span class="line">        tempTrust = <span class="built_in">CFDictionaryGetValue</span>(myIdentityAndTrust,kSecImportItemTrust);</span><br><span class="line">        *outTrust = (SecTrustRef)tempTrust;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;Failedwith error code %d&quot;</span>,(<span class="keyword">int</span>)securityError);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PS：对于门户型的网站，同一套服务，想全部做到双向认证似乎不是很现实，客户端的证书一般也不会分发给每一个人。很多人为了网络安全考虑，常用的一个做法是防抓包：在单向认证中加入自己的校验规则-域名比对、CA信息比对、客户端内置 sever.crt 证书链校验等等。对于这种情况，只针对 NSURLAuthenticationMethodServerTrust 进行处理就行了。</p>
<h2 id="五、window-open"><a href="#五、window-open" class="headerlink" title="五、window.open()"></a>五、window.open()</h2><p>JS 与 Native 最常见的交互就是 window.open(); ，用于打开一个新窗口。更多细节<a href="https://www.w3schools.com/jsref/met_win_open.asp">见</a> 。常用的写法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在一个新窗口中打开链接</span></span><br><span class="line"><span class="built_in">window</span>.open(<span class="string">&#x27;https://tommygirl.cn&#x27;</span>); <span class="comment">//默认就是_blank。</span></span><br><span class="line"><span class="built_in">window</span>.open(<span class="string">&#x27;https://tommygirl.cn&#x27;</span>, <span class="string">&#x27;_blank&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在当前窗口打开链接</span></span><br><span class="line"><span class="built_in">window</span>.open(<span class="string">&#x27;https://tommygirl.cn&#x27;</span>, <span class="string">&#x27;_self&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>有的前端人员基于 Cordova 或者 Ionic 这些框架开发久了，会习惯要求 native 支持 <code>window.open(&#39;&#39;, &#39;_system&#39;);</code> ，即用系统浏览器打开链接，但其实标准的 JS 中是没有 <code>_system</code> 参数的，只是 Cordova 框架内部提供了支持而已。所以在单纯的 WebView 使用中有没有问题呢？当然有问题……🙄</p>
<p>说回 WKWebView ，会发现对于 _blank 类型没有响应，但是 _self 可以打开。这是因为对于新窗口的弹出，苹果独立出了一个协议来让 native 自己实现：<a href="/2021/12/02/WKWebView-Protocol/#%E4%BA%8C%E3%80%81%E5%88%9B%E5%BB%BA%E5%92%8C%E5%85%B3%E9%97%AD%E6%96%B0%E7%9A%84-WebView">WKUIDelegate</a> ，👈上一篇我们提到过了，不再赘述。</p>
<h2 id="六、还没写完，累了，明天再说。"><a href="#六、还没写完，累了，明天再说。" class="headerlink" title="六、还没写完，累了，明天再说。"></a>六、还没写完，累了，明天再说。</h2><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/un_do.jpg" width="400px">

<hr>
<h2 id="关于-WKWebView-的几篇文章："><a href="#关于-WKWebView-的几篇文章：" class="headerlink" title="关于 WKWebView 的几篇文章："></a><strong>关于 WKWebView 的几篇文章：</strong></h2><p><a href="/2021/12/01/WKWebView/">WKWebView 基础篇</a><br><a href="/2021/12/02/WKWebView-Protocol/">WKWebView 协议篇</a><br><a href="/2021/12/11/WKWebView-Use/">WKWebView 实战篇</a></p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a><strong>Demo</strong></h2><p><a href="https://github.com/ATommyGirl/WebView">WebView 的 Demo</a></p>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>WebView</tag>
      </tags>
  </entry>
  <entry>
    <title>WKWebView Cookie 试错</title>
    <url>/2023/01/03/WKWebView-XHR/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/wkxhr.png"></p>
<p>Too young too naive…</p>
<hr>
<h2 id="让人头疼的问题"><a href="#让人头疼的问题" class="headerlink" title="让人头疼的问题"></a>让人头疼的问题</h2><p>&#8195;&#8195;在项目中替换 UIWebView 之前，我看了 WKWebView 的文档、也看了网上大部分的博客，算是做了一些评估，优缺点都挺明显：优在性能更好（也有网友说徒有其表）、苹果官方主推，缺在 API 还没完全成型、Cookie 同步等历史问题，网上关于 Cookie 的解决方案五花八门（其实抄来抄去的也都差不多），看完我觉得我行了，果断换™的。</p>
<p>&#8195;&#8195;之前在<a href="/2021/12/11/WKWebView-Use/">WKWebView 实战篇</a> - 4. 一个简单的 Cookie 同步方案 提到过一个非常简陋的 Cookie 同步的方式，简陋就算了，主要是发现了非常严重的问题 🤡🤡🤡🤡🤡</p>
<p>————————————————&gt;<br>NSHTTPCookieStorage 向 WKHTTPCookieStore 同步</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (@available(iOS <span class="number">11.0</span>, *)) &#123;</span><br><span class="line">    <span class="built_in">NSArray</span> *cookies = [[<span class="built_in">NSHTTPCookieStorage</span> sharedHTTPCookieStorage] cookies];</span><br><span class="line">    <span class="built_in">WKHTTPCookieStore</span> *cookieStroe = <span class="keyword">self</span>.webView.configuration.websiteDataStore.httpCookieStore;</span><br><span class="line">    <span class="keyword">if</span> (cookies.count == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSHTTPCookie</span> *cookie <span class="keyword">in</span> cookies) &#123;</span><br><span class="line">        [cookieStroe setCookie:cookie completionHandler:^&#123;</span><br><span class="line">            <span class="keyword">if</span> ([[cookies lastObject] isEqual:cookie]) &#123;</span><br><span class="line">                <span class="comment">//Sync end</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Fallback on earlier versions</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>……<br>&lt;————————————————</p>
<p>&#8195;&#8195;先说一下应用场景：App 基础功能是原生的页面，包括登录认证等，对于一些业务流程采用的是 H5 页面，所以才用到了 WKWebView。为了实现 SSO，在打开 H5 页面时需要把原生获取到的认证信息传递给页面…然后就有了上面 Cookie 同步的需求。对于系统型号，原本计划支持的范围是 ios12.x~ios 16.x(当年最新版本)，但是貌似苹果在略低版本的实现上还是有点儿差别，又或者低版本的系统性能跟不上 API 预期的速度。</p>
<p>❌ 问题一：集中出现在 ios13.x、ios14.x 的系统，最初的方式是采用 <code>defaultDataStore</code> 来配置 WebView，配合 <code>WKHTTPCookieStore</code> 的 API 同步 Cookie。在 ios13.* 的机型上，登录用户 A、打开 H5 页面，认证正常；清理原生的 Cookie、切换用户 B、打开 H5 页面，认证的还是用户 A，这个时候关闭 H5 、再次打开，用户 B 认证成功。体现了两个问题：一 新的 Cookie 并没有成功同步过去、或者说有非常严重的时差；二 <code>defaultDataStore</code> 默认会读取存储在本地沙盒的缓存、也有一定的时差，在官方注释中也确实标明了监听 Cookie 变化可能会存在明显的延迟；这些延迟我怀疑是读写文件导致的。</p>
<p>&#8195;&#8195;对于打开 H5 的方式，很多网友也提到了一个方案：先加载一个大小为 0 不可见的 WebView，然后再加载另一个可见的 WebView，这种方式对于 Ticket 只能用一次的认证方案貌似不太友好；另一种大厂方案是拦截 WKWebView 的所有请求，把认证信息手动添加到请求头中，这个需要修改 H5 框架来配合？。这两种方式对于我的场景可能没起作用或者不太适用，在纠结方案时留意到了一个之前漏掉的 API 👇🏻</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">WKWebsiteDataStore</span> : <span class="title">NSObject</span> &lt;<span class="title">NSSecureCoding</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* @abstract Returns the default data store. */</span></span><br><span class="line">+ (<span class="built_in">WKWebsiteDataStore</span> *)defaultDataStore;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** @abstract Returns a new non-persistent data store.</span></span><br><span class="line"><span class="comment"> @discussion If a WKWebView is associated with a non-persistent data store, no data will</span></span><br><span class="line"><span class="comment"> be written to the file system. This is useful for implementing &quot;private browsing&quot; in a web view.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">+ (<span class="built_in">WKWebsiteDataStore</span> *)nonPersistentDataStore;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p><code>nonPersistentDataStore</code> 返回一个非持久性数据存储。如果 WKWebView 与非持久性数据存储关联，则不会有任何数据被写入文件系统，我理解是类似”无痕浏览”。对于彼此没有关联的业务页面，使用这种方式貌似更合理，也可以避免 Cookie 互相污染。于是乎……尝试了一下，值得开心的是，在 ios13.* 上的问题没有再出现，但是出现了个问题二……🤹‍♀️🤹‍♀️🤹‍♀️🤹‍♀️🤹‍♀️</p>
<p>❌ 问题二：集中出现在 ios12.* 的系统。改为使用 <code>nonPersistentDataStore</code> 以后，使用旧 Cookie 的问题不存在了，但是在 ios12.* 的机型上，打开 H5 页面，一个 Cookie 都同步不过去，也不对，这样说不严谨，在刚打开页面的时候可以同步过去一个，其他几个没同步过去，然后，最可笑的就是然后，监听 👇🏻</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)cookiesDidChangeInCookieStore:(<span class="built_in">WKHTTPCookieStore</span> *)cookieStore;</span><br></pre></td></tr></table></figure>

<p>，我盯着控制台的输出大概等了一年半载，其他几个 Cookie 才显示同步成功。不是说 <strong>no data will be written to the file system</strong> 吗？苍了天了。</p>
<p>所以哪个问题更严重呢？好像是问题二…🤣🤣🤣🤣🤣🤣🤣🤣🤣🤣</p>
<p>⚠️ 对于问题一，或许有另一个 API 可以参考：在退出登录（切换用户）时，不止清空原生的会话信息，把 WKWebView 存储在沙盒中的记录也删除：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="built_in">WKWebsiteDataStore</span>* dataStore = [<span class="built_in">WKWebsiteDataStore</span> defaultDataStore];</span><br><span class="line">  <span class="comment">//Delete all data store 删除所有数据存储</span></span><br><span class="line">  <span class="built_in">NSDate</span>* dateFrom = [<span class="built_in">NSDate</span> dateWithTimeIntervalSince1970:<span class="number">0</span>];</span><br><span class="line">  [dataStore removeDataOfTypes:[<span class="built_in">WKWebsiteDataStore</span> allWebsiteDataTypes] modifiedSince:dateFrom completionHandler:^&#123;</span><br><span class="line">      LogDebug(<span class="string">@&quot;Removed all WKWebView data&quot;</span>);</span><br><span class="line">      <span class="keyword">self</span>.webView.configuration.processPool = [[<span class="built_in">WKProcessPool</span> alloc] init]; <span class="comment">// create new process pool to flush all data</span></span><br><span class="line">  &#125;];</span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//ios11.* or later Deletes all cookies</span></span><br><span class="line">  <span class="built_in">WKHTTPCookieStore</span>* cookieStore = dataStore.httpCookieStore;</span><br><span class="line">  [cookieStore getAllCookies:^(<span class="built_in">NSArray</span>* cookies) &#123;</span><br><span class="line">      <span class="built_in">NSHTTPCookie</span>* cookie;</span><br><span class="line">      <span class="keyword">for</span>(cookie <span class="keyword">in</span> cookies)&#123;</span><br><span class="line">          [cookieStore deleteCookie:cookie completionHandler:<span class="literal">nil</span>];</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;];</span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Only deletes domain Cookies (not session Cookies) 删除 file system 中的部分 cookie</span></span><br><span class="line">  [dataStore fetchDataRecordsOfTypes:[<span class="built_in">WKWebsiteDataStore</span> allWebsiteDataTypes]</span><br><span class="line">   completionHandler:^(<span class="built_in">NSArray</span>&lt;<span class="built_in">WKWebsiteDataRecord</span> *&gt; * __<span class="keyword">nonnull</span> records) &#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="built_in">WKWebsiteDataRecord</span> *record  <span class="keyword">in</span> records)&#123;</span><br><span class="line">           <span class="built_in">NSSet</span>&lt;<span class="built_in">NSString</span>*&gt;* dataTypes = record.dataTypes;</span><br><span class="line">           <span class="keyword">if</span>([dataTypes containsObject:<span class="built_in">WKWebsiteDataTypeCookies</span>])&#123;</span><br><span class="line">               [[<span class="built_in">WKWebsiteDataStore</span> defaultDataStore] removeDataOfTypes:record.dataTypes</span><br><span class="line">                     forDataRecords:@[record]</span><br><span class="line">                     completionHandler:^&#123;&#125;];</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;];</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>粘一段 ChatGPT 回复的会话 Cookie 和 长效 Cookie 的区别：</p>
<p>❓ Cookie 是否分为会话 Cookie 和长效 Cookie ？</p>
<p>&#8195;&#8195;Cookie 可以分为会话 Cookie（Session Cookie）和长效 Cookie（Persistent Cookie）两种类型。</p>
<ol>
<li>会话 Cookie（Session Cookie）：<br>会话Cookie是一种临时性的Cookie，它保存在用户的浏览器中，只在用户的会话期间有效。会话期间通常是指用户在浏览器中打开网站直到关闭浏览器的这段时间。一旦用户关闭浏览器，会话 Cookie 就会被删除，不会在用户的计算机上保留任何信息。会话Cookie通常用于存储临时的、与用户会话相关的信息，比如用户登录状态、购物车内容等。</li>
<li>长效 Cookie（Persistent Cookie）：<br>长效 Cookie 是一种更持久的 Cookie，它也保存在用户的浏览器中，但具有一定的过期时间。长效 Cookie 不会随着用户会话的结束而被删除，而是在设置的过期时间到达之前一直有效。长效 Cookie 通常用于跟踪用户的偏好设置、广告定向、用户标识等。这样，当用户重新访问网站时，网站可以读取长效 Cookie 中存储的信息，并根据之前的活动提供更加个性化的体验。</li>
</ol>
<p>总结：</p>
<ul>
<li>会话 Cookie 是临时性的，在用户会话期间有效，关闭浏览器后会被删除。</li>
<li>长效 Cookie 是持久性的，具有过期时间，在过期之前一直有效。</li>
</ul>
<p>❓ 服务端是如何指定不同类型的 Cookie？</p>
<p>&#8195;&#8195;在服务端，可以通过设置 Cookie 的属性来指定它的类型是会话 Cookie 还是长效 Cookie。这可以通过在 HTTP 响应头中设置 Cookie 的 “Max-Age”（最大年龄）或 “Expires”（过期时间）属性来实现。</p>
<ol>
<li><p>设置会话 Cookie：<br>如果希望 Cookie 在用户会话期间有效，即在用户关闭浏览器后被删除，可以在 HTTP 响应头中设置 “Set-Cookie” 字段，并省略 “Max-Age” 和 “Expires” 属性，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set-Cookie: cookie_name=cookie_value; path=/; HttpOnly</span><br></pre></td></tr></table></figure>
<p>&#8195;&#8195;”HttpOnly” 属性可以防止 JavaScript 访问 Cookie，提高安全性。</p>
</li>
<li><p>设置长效 Cookie：<br>如果希望 Cookie 在一定的时间内保持有效，可以设置 “Max-Age” 属性来指定Cookie的存活时间（单位为秒），或者使用 “Expires” 属性来指定过期日期和时间。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set-Cookie: cookie_name=cookie_value; path=/; Max-Age=3600; HttpOnly</span><br></pre></td></tr></table></figure>
<p>&#8195;&#8195;上述例子中，”Max-Age=3600” 表示 Cookie 将在设置后的3600秒（1小时）后过期。</p>
</li>
</ol>
<p>&#8195;&#8195;或者使用 “Expires” 属性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set-Cookie: cookie_name=cookie_value; path=/; Expires=Wed, 20 Jul 2023 12:00:00 GMT; HttpOnly</span><br></pre></td></tr></table></figure>
<p>&#8195;&#8195;上述例子中，”Expires” 属性指定了一个具体的过期日期和时间，当到达指定时间后，Cookie 将过期失效。</p>
<p>&#8195;&#8195;请注意，”Max-Age” 和 “Expires” 属性是互斥的，只需要设置其中一个即可。同时，如果两者都设置了，”Max-Age” 属性优先于 “Expires” 属性。</p>
<p>&#8195;&#8195;需要注意的是，如果设置了长效 Cookie，那么这个 Cookie 将在用户的浏览器中保持有效，直到达到指定的过期时间或者用户手动删除了这个 Cookie 为止。而会话 Cookie 则会在用户关闭浏览器后自动删除，不会在用户计算机上保留任何信息。</p>
<hr>
<h2 id="关于-WKWebView-的几篇文章："><a href="#关于-WKWebView-的几篇文章：" class="headerlink" title="关于 WKWebView 的几篇文章："></a><strong>关于 WKWebView 的几篇文章：</strong></h2><p><a href="/2021/12/01/WKWebView/">WKWebView 基础篇</a><br><a href="/2021/12/02/WKWebView-Protocol/">WKWebView 协议篇</a><br><a href="/2021/12/11/WKWebView-Use/">WKWebView 实战篇</a></p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a><strong>Demo</strong></h2><p><a href="https://github.com/ATommyGirl/WebView">WebView 的 Demo</a></p>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>WebView</tag>
      </tags>
  </entry>
  <entry>
    <title>Xcode 11 IPA processing failed 初见</title>
    <url>/2020/01/20/Xcode%2011%20IPA%20processing/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="⚠️-warning-Configuration-issue-platform-iPhoneSimulator-platform-doesn’t-have-any-non-simulator-SDKs-ignoring-it"><a href="#⚠️-warning-Configuration-issue-platform-iPhoneSimulator-platform-doesn’t-have-any-non-simulator-SDKs-ignoring-it" class="headerlink" title="⚠️ warning: Configuration issue: platform iPhoneSimulator.platform doesn’t have any non-simulator SDKs; ignoring it"></a>⚠️ warning: Configuration issue: platform iPhoneSimulator.platform doesn’t have any non-simulator SDKs; ignoring it</h3><h3 id="❌-Assertion-failed-Expected-2-archs-in-otool-output"><a href="#❌-Assertion-failed-Expected-2-archs-in-otool-output" class="headerlink" title="❌ Assertion failed: Expected 2 archs in otool output"></a>❌ Assertion failed: Expected 2 archs in otool output</h3><p>今天准备打一个企业ipa的时候，报了一个错，吓出了一身冷汗：<code>IPA processing failed</code><br>看到了 Show Logs，就抱着试试看的态度，点开了，毕竟试试又不会怀孕~~~</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/35.png" alt="IPA processing failed"></p>
<span id="more"></span>

<p>Show Logs 我们会看到下面四个日志文件，就是我们本次Archive~Package过程中的日志，然后我们着重看一下第二个选中的log</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/36.png" alt="log"></p>
<p>搜索一下 <code>error</code> 或者 <code>failed</code> 总会发现什么的，喏，我们发现了就包含一个failed，注意上下文划线的几句话，应该是提示的那个framework包含了模拟器架构，上架肯定是要移除的，所以我们需要忽略它，换句话说，它太胖了，我们需要给它瘦个身🤹‍♂️🤹‍♂️🤹‍♂️🤹‍♂️🤹‍♂️</p>
<blockquote>
<p>模拟器32位处理器测试需要i386架构，（iphone5，iphone5s以下的模拟器）<br>模拟器64位处理器测试需要x86_64架构，(iphone6以上的模拟器)<br>真机32位处理器需要armv7,或者armv7s架构，（iphone4真机/armv7, ipnone5，iphone5s真机/armv7s）<br>真机64位处理器需要arm64架构，(iphone6，iphone6p以上的真机)</p>
</blockquote>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/37.png" alt="寻找恐惧"></p>
<h2 id="Framework-瘦身大法"><a href="#Framework-瘦身大法" class="headerlink" title="Framework 瘦身大法"></a>Framework 瘦身大法</h2><blockquote>
<p>本段内容来自于：<a href="%5Bhttps://www.jianshu.com/p/3c6b1dd7a0ed%5D(https://www.jianshu.com/p/3c6b1dd7a0ed)">xcode11打包失败 IPA processing failed 问题解决</a></p>
</blockquote>
<ul>
<li><p>1、 进入framework所在的目录（以下的框架名称换成自己的即可）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> [your framework path]</span><br></pre></td></tr></table></figure></li>
<li><p>2、查看SDK的二进制文件支持的CPU架构，如果只显示armv7 arm64，那么就没问题，如果有模拟器的架构x86_64, i386那就是有问题</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">lipo -info OAChatClient.framework/OAChatClient</span><br></pre></td></tr></table></figure></li>
<li><p>3、移除支持x86_64,i386的二进制文件<br>ps：移除自己对应的类型就可以，这里只是举个例子。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">lipo OAChatClient.framework/OAChatClient -remove x86_64 -remove i386 -output OAChatClient</span><br></pre></td></tr></table></figure></li>
<li><p>4、用第3步生成的新的可执行文件 替换framwork内部的可执行文件[记得备份]</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mv OAChatClient OAChatClient.framework/OAChatClient</span><br></pre></td></tr></table></figure></li>
<li><p>5、查看我们瘦身后的可执行文件是否正确，显示armv7或arm64，就完成剥离，再打包应该就可以了，啊哈哈哈</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">lipo -info OAChatClient.framework/OAChatClient</span><br></pre></td></tr></table></figure></li>
<li><p>如果你觉得以上操作比较麻烦，每次模拟器调试和打包还要替换对应的SDK,那么以下方式将更加简便的解决你的问题：<br>buildPhases-&gt;New Run Script Phase添加以下内容</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">APP_PATH=<span class="string">&quot;<span class="variable">$&#123;TARGET_BUILD_DIR&#125;</span>/<span class="variable">$&#123;WRAPPER_NAME&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This script loops through the frameworks embedded in the application and</span></span><br><span class="line"><span class="comment"># removes unused architectures.</span></span><br><span class="line">find <span class="string">&quot;<span class="variable">$APP_PATH</span>&quot;</span> -name <span class="string">&#x27;*.framework&#x27;</span> -<span class="built_in">type</span> d | <span class="keyword">while</span> <span class="built_in">read</span> -r FRAMEWORK</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">FRAMEWORK_EXECUTABLE_NAME=$(defaults <span class="built_in">read</span> <span class="string">&quot;<span class="variable">$FRAMEWORK</span>/Info.plist&quot;</span> CFBundleExecutable)</span><br><span class="line">FRAMEWORK_EXECUTABLE_PATH=<span class="string">&quot;<span class="variable">$FRAMEWORK</span>/<span class="variable">$FRAMEWORK_EXECUTABLE_NAME</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Executable is <span class="variable">$FRAMEWORK_EXECUTABLE_PATH</span>&quot;</span></span><br><span class="line"></span><br><span class="line">EXTRACTED_ARCHS=()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ARCH <span class="keyword">in</span> <span class="variable">$ARCHS</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Extracting <span class="variable">$ARCH</span> from <span class="variable">$FRAMEWORK_EXECUTABLE_NAME</span>&quot;</span></span><br><span class="line">lipo -extract <span class="string">&quot;<span class="variable">$ARCH</span>&quot;</span> <span class="string">&quot;<span class="variable">$FRAMEWORK_EXECUTABLE_PATH</span>&quot;</span> -o <span class="string">&quot;<span class="variable">$FRAMEWORK_EXECUTABLE_PATH</span>-<span class="variable">$ARCH</span>&quot;</span></span><br><span class="line">EXTRACTED_ARCHS+=(<span class="string">&quot;<span class="variable">$FRAMEWORK_EXECUTABLE_PATH</span>-<span class="variable">$ARCH</span>&quot;</span>)</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Merging extracted architectures: <span class="variable">$&#123;ARCHS&#125;</span>&quot;</span></span><br><span class="line">lipo -o <span class="string">&quot;<span class="variable">$FRAMEWORK_EXECUTABLE_PATH</span>-merged&quot;</span> -create <span class="string">&quot;<span class="variable">$&#123;EXTRACTED_ARCHS[@]&#125;</span>&quot;</span></span><br><span class="line">rm <span class="string">&quot;<span class="variable">$&#123;EXTRACTED_ARCHS[@]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Replacing original executable with thinned version&quot;</span></span><br><span class="line">rm <span class="string">&quot;<span class="variable">$FRAMEWORK_EXECUTABLE_PATH</span>&quot;</span></span><br><span class="line">mv <span class="string">&quot;<span class="variable">$FRAMEWORK_EXECUTABLE_PATH</span>-merged&quot;</span> <span class="string">&quot;<span class="variable">$FRAMEWORK_EXECUTABLE_PATH</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="小乌龙"><a href="#小乌龙" class="headerlink" title="小乌龙"></a>小乌龙</h2><p>PS：发现这个问题，是因为想使用人家野火的IM demo，自己打个包，结果就报了上面的问题，按照上面的步骤改完一个framework后，发现，其实野火的工程里，已经写好了脚本（文件：removex86.sh，是不是看名字就知道是干嘛的了），哈哈哈，只需要运行一下就ok了🤓🤓🤓🤓🤓🤓🤓🤓🤓🤓</p>
<p>这是人家的shell，如果有和我一样的人，一定要注意哦：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> Frameworks</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;朋友圈的库如果不存在，脚本会报错误，可以忽略掉！&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#lipo WFChatUIKit.framework/WFChatUIKit -thin armv7 -output XXXX_armv7</span></span><br><span class="line">lipo WFChatUIKit.framework/WFChatUIKit -thin arm64 -output XXXX_arm64</span><br><span class="line"><span class="comment">#lipo -create XXXX_armv7 XXXX_arm64 -output XXXX</span></span><br><span class="line">mv XXXX_arm64 WFChatUIKit.framework/WFChatUIKit</span><br><span class="line">rm -rf XXXX*</span><br><span class="line"></span><br><span class="line"><span class="comment"># lipo WFAVEngineKit.framework/WFAVEngineKit -thin armv7 -output XXXX_armv7</span></span><br><span class="line">lipo WFAVEngineKit.framework/WFAVEngineKit -thin arm64 -output XXXX_arm64</span><br><span class="line"><span class="comment"># lipo -create XXXX_armv7 XXXX_arm64 -output XXXX</span></span><br><span class="line">mv XXXX_arm64 WFAVEngineKit.framework/WFAVEngineKit</span><br><span class="line">rm -rf XXXX*</span><br><span class="line"></span><br><span class="line"><span class="comment"># lipo WFChatClient.framework/WFChatClient -thin armv7 -output XXXX_armv7</span></span><br><span class="line">lipo WFChatClient.framework/WFChatClient -thin arm64 -output XXXX_arm64</span><br><span class="line"><span class="comment"># lipo -create XXXX_armv7 XXXX_arm64 -output XXXX</span></span><br><span class="line">mv XXXX_arm64 WFChatClient.framework/WFChatClient</span><br><span class="line">rm -rf XXXX*</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ../WildFireChat/Moments</span><br><span class="line"><span class="comment">#lipo WFMomentClient.framework/WFMomentClient -thin armv7 -output XXXX_armv7</span></span><br><span class="line">lipo WFMomentClient.framework/WFMomentClient -thin arm64 -output XXXX_arm64</span><br><span class="line"><span class="comment">#lipo -create XXXX_armv7 XXXX_arm64 -output XXXX</span></span><br><span class="line">mv XXXX_arm64 WFMomentClient.framework/WFMomentClient</span><br><span class="line">rm -rf XXXX*</span><br><span class="line"></span><br><span class="line"><span class="comment"># lipo WFMomentUIKit.framework/WFMomentUIKit -thin armv7 -output XXXX_armv7</span></span><br><span class="line">lipo WFMomentUIKit.framework/WFMomentUIKit -thin arm64 -output XXXX_arm64</span><br><span class="line"><span class="comment"># lipo -create XXXX_armv7 XXXX_arm64 -output XXXX</span></span><br><span class="line">mv XXXX_arm64 WFMomentUIKit.framework/WFMomentUIKit</span><br><span class="line">rm -rf XXXX*</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ../../Frameworks</span><br><span class="line"></span><br><span class="line"><span class="comment">#lipo GoogleWebRTC/Frameworks/frameworks/WebRTC.framework/WebRTC -thin armv7 -output XXXX_armv7</span></span><br><span class="line">lipo GoogleWebRTC/Frameworks/frameworks/WebRTC.framework/WebRTC -thin arm64 -output XXXX_arm64</span><br><span class="line"><span class="comment">#lipo -create XXXX_armv7 XXXX_arm64 -output XXXX</span></span><br><span class="line">mv XXXX_arm64 GoogleWebRTC/Frameworks/frameworks/WebRTC.framework/WebRTC</span><br><span class="line">rm -rf XXXX*</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;朋友圈的库如果不存在，脚本会报错误，可以忽略掉！&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;执行这个脚本后，打包时一定不要打开ios-chat这个项目空间进行打包，因为会重新生成这些被瘦身的库。要打开wfchat这个项目进行打包！&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>PPS：运行脚本的命令就是<code>sh ***.sh</code></p>
<div contenteditable="plaintext-only"><div contenteditable="plaintext-only"><center>
  <div style="display:inline-block;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/flag.jpeg" class width="200"></div>
</center>


</div></div>]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>Xcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Warning! PATH is not properly set up, &#39;/Users/***/.rvm/gems/ruby-2.4.0/bin&#39; is not at first place.</title>
    <url>/2018/12/27/Warning!PATH-is/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>忽然有一天。。。使用 <code>cocoapods</code> 安装三方库不好使了，报了好长的错。。。</p>
<span id="more"></span>

<p>前<br>方<br>有<br>超<br>长<br>图<br>片<br>，<br>慎<br>点<br>。</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/031.png" alt="error"></p>
<blockquote>
<p>按照里面的提示去github搜索了cocoapods使用中的问题，多数都是说，重装gem。笔者不是很懂这些，gem，ruby，cocoapods，全都更新了一遍。依旧是这个问题。</p>
</blockquote>
<p>睡了一觉醒来后，笔者认真看了看错误提示，注意到这句：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">### Command</span></span><br><span class="line"></span><br><span class="line">/Users/我/.rvm/gems/ruby-<span class="number">2.4</span>.<span class="number">0</span>/bin/pod install</span><br></pre></td></tr></table></figure>

<p>既然命令执行文件在这个路径下，可能是rvm出了问题，执行 <code>rvm list</code>查看ruby版本</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/32.png" alt="rvm list"></p>
<p>注意到里面有个 <code>Warning！</code> 和几个建议的操作（做了也没用，是的，我试过了）😌</p>
<blockquote>
<p>Warning! PATH is not properly set up, ‘/Users/***/.rvm/gems/ruby-2.4.0/bin’ is not at first place.<br>仿佛是在说，ruby不在最初？首先？第一个位置？<br>总之某些东西被改了（但我真的没动）</p>
</blockquote>
<p>本人脾气暴躁，所以想着，既然动了，那就暴力还原吧，执行 <code>rvm -h</code> 查看rvm 的神操作们</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/33.png" alt="rvm -h"></p>
<p>注意到了图中的这几个命令：<code>rvm maintenance</code> rvm 的维护？于是乎试了一下<br><code>rvm reset</code><br><code>rvm reset</code><br><code>rvm reset</code><br><code>rvm reset</code><br><code>rvm reset</code><br>重要的 事情说五遍。<br>command里并没有什么输出，仿佛秘密做了一些事情，然后再试了下 <code>pod install</code> 就👌了。<br>看到了久违的绿色，放心了。</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/34.png" alt="绿色走一波"></p>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>Mac</tag>
        <tag>Xcode</tag>
        <tag>pod</tag>
      </tags>
  </entry>
  <entry>
    <title>WKWebView 基础篇</title>
    <url>/2021/12/01/WKWebView/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p>WKWebView 是 iOS 8.0 以后用于替代 UIWebView 的浏览器组件。和 UIWebView 相比，具有渲染性能更好、支持更多的 HTML5 特性、控制更加细致等诸多优点。一直没沉下心来学习，我们一起好好看看里面都有什么吧🤓</p>
<span id="more"></span>

<h2 id="WKWebView"><a href="#WKWebView" class="headerlink" title="WKWebView"></a>WKWebView</h2><p>主要的</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">WKWebView</span> : <span class="title">UIView</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//重要属性</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="built_in">WKWebViewConfiguration</span> *configuration;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">id</span> &lt;<span class="built_in">WKNavigationDelegate</span>&gt; navigationDelegate;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">id</span> &lt;<span class="built_in">WKUIDelegate</span>&gt; <span class="built_in">UIDelegate</span>;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">strong</span>) <span class="built_in">WKBackForwardList</span> *backForwardList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">nullable</span>) SecTrustRef serverTrust;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *customUserAgent;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> allowsLinkPreview;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">strong</span>) <span class="built_in">UIScrollView</span> *scrollView;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载方法</span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">WKNavigation</span> *)loadRequest:(<span class="built_in">NSURLRequest</span> *)request;</span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">WKNavigation</span> *)loadFileURL:(<span class="built_in">NSURL</span> *)URL allowingReadAccessToURL:(<span class="built_in">NSURL</span> *)readAccessURL;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">WKNavigation</span> *)goBack;</span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">WKNavigation</span> *)goForward;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">WKNavigation</span> *)reload;</span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">WKNavigation</span> *)reloadFromOrigin;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类方法</span></span><br><span class="line">+ (<span class="built_in">BOOL</span>)handlesURLScheme:(<span class="built_in">NSString</span> *)urlScheme;</span><br><span class="line"></span><br><span class="line"><span class="comment">//与JS交互接口</span></span><br><span class="line">- (<span class="keyword">void</span>)evaluateJavaScript:(<span class="built_in">NSString</span> *)javaScriptString completionHandler:(<span class="keyword">void</span> (^ _Nullable)(_Nullable <span class="keyword">id</span>, <span class="built_in">NSError</span> * _Nullable error))completionHandler;</span><br><span class="line"><span class="comment">//iOS 14新增的API</span></span><br><span class="line">- (<span class="keyword">void</span>)evaluateJavaScript:(<span class="built_in">NSString</span> *)javaScriptString inFrame:(<span class="keyword">nullable</span> <span class="built_in">WKFrameInfo</span> *)frame inContentWorld:(<span class="built_in">WKContentWorld</span> *)contentWorld completionHandler:(<span class="keyword">void</span> (^ _Nullable)(_Nullable <span class="keyword">id</span>, <span class="built_in">NSError</span> * _Nullable error))completionHandler;</span><br><span class="line">- (<span class="keyword">void</span>)callAsyncJavaScript:(<span class="built_in">NSString</span> *)functionBody arguments:(<span class="keyword">nullable</span> <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="keyword">id</span>&gt; *)arguments inFrame:(<span class="keyword">nullable</span> <span class="built_in">WKFrameInfo</span> *)frame inContentWorld:(<span class="built_in">WKContentWorld</span> *)contentWorld completionHandler:(<span class="keyword">void</span> (^ _Nullable)(_Nullable <span class="keyword">id</span>, <span class="built_in">NSError</span> * _Nullable error))completionHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<h2 id="WKWebView-初始化"><a href="#WKWebView-初始化" class="headerlink" title="WKWebView 初始化"></a>WKWebView 初始化</h2><p>一个简单用于展示的 WebView 可以是这样的：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">WKWebViewConfiguration</span> *configuration = [[<span class="built_in">WKWebViewConfiguration</span> alloc] init];</span><br><span class="line"><span class="built_in">WKWebView</span> *webView = (&#123;</span><br><span class="line">    webView = [[<span class="built_in">WKWebView</span> alloc] initWithFrame:<span class="keyword">self</span>.view.bounds configuration:configuration];</span><br><span class="line">    webView.scrollView.bounces = <span class="literal">NO</span>;</span><br><span class="line">    webView.backgroundColor = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">    webView;</span><br><span class="line">&#125;);</span><br><span class="line">    </span><br><span class="line">[<span class="keyword">self</span>.view addSubview:webView];</span><br><span class="line">[webView loadRequest:[<span class="built_in">NSURLRequest</span> requestWithURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@&quot;http://baidu.com&quot;</span>]]];</span><br></pre></td></tr></table></figure>

<p>这样一个单纯用于展示网页、没有任何配置项的 WebView 就算完成了。相较于 <code>UIWebView</code>，我们看到多了一个 <code>configuration</code> 配置类型，那我们就来 Read the fucking source code……</p>
<h2 id="WKWebViewConfiguration"><a href="#WKWebViewConfiguration" class="headerlink" title="WKWebViewConfiguration"></a>WKWebViewConfiguration</h2><p>官方文档是这样描述这个类型的：</p>
<blockquote>
<p>A <code>WKWebViewConfiguration</code> object is a collection of properties with which to initialize a web view.</p>
<p>一个用于初始化 web view 属性的集合。</p>
</blockquote>
<p>我们可以用它做什么呢？</p>
<blockquote>
<ul>
<li>设置用于网站的初始cookie</li>
<li>处理自定义的 URL schemes</li>
<li>设置如何处理媒体内容</li>
<li>管理网页中选中的信息</li>
<li>自定义注入网页的脚本</li>
<li>自定义内容的展示规则</li>
<li>……</li>
</ul>
</blockquote>
<p>我们可以通过创建一个 <code>WKWebViewConfiguration</code> 对象来设置网页的属性，并且在 WebView 初始化的时候传递给它。注意的是只能在初始化的时候配置 <code>configuration</code> 中的属性，后面是没办法动态再去修改这些配置的。</p>
<p>我们通过这个类看看 WebKit 里面有哪些主要的内容：</p>
<h2 id="WKProcessPool"><a href="#WKProcessPool" class="headerlink" title="WKProcessPool"></a>WKProcessPool</h2><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*! @abstract The process pool from which to obtain the view&#x27;s web content</span></span><br><span class="line"><span class="comment"> process.</span></span><br><span class="line"><span class="comment"> @discussion When a web view is initialized, a new web content process</span></span><br><span class="line"><span class="comment"> will be created for it from the specified pool, or an existing process in</span></span><br><span class="line"><span class="comment"> that pool will be used.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">WKProcessPool</span> *processPool;</span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">WKProcessPool</span> : <span class="title">NSObject</span> &lt;<span class="title">NSSecureCoding</span>&gt;</span></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<p>官方文档解释为一个可以在单个进程中运行多个 web 视图的不可见 token？令牌？。进程池。可以看到 WKProcessPool 类没有暴漏任何接口，这意味着我们只能创建和读取该对象，通过对象地址判断是否在相同进程。</p>
<p>WKWebView 为了安全和稳定性考虑，会为每一个 WKWebView 实例分配独立的进程（而不是直接使用APP的进程空间），系统会有一个设定的进程个数上线。相同 WKProcessPool 对象的 WKWebView 共享相同的进程空间。这也是与 <code>UIWebView</code> 最大不同的一点：<code>NSHTTPCookieStorage</code> 中的 cookie ，<code>UIWebView</code> 是可以自动携带使用的，但 <code>WKWebView</code> 无法获取 Storage中 的 cookie。</p>
<p>诶，那是不是放在同一个进程池中的 web view 就可以共享 cookie 了呢？带着这个问题，稍后我们会提到 cookie 有关的处理。</p>
<h2 id="WKPreferences"><a href="#WKPreferences" class="headerlink" title="WKPreferences"></a>WKPreferences</h2><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*! @abstract The preference settings to be used by the web view.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">WKPreferences</span> *preferences;</span><br></pre></td></tr></table></figure>

<p>针对 web 视图的偏好设置，如果是针对 web 内容的设置还是使用 <code>WKWebViewConfiguration</code> ，感觉这个类还在完善、扩充中，内容很少。比较值得注意的是与 JavaScript 有关的两个属性。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字体</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> minimumFontSize;</span><br><span class="line"><span class="comment">//是否允许在没有用户交互的情况下，JavaScript可以打开windows</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> javaScriptCanOpenWindowsAutomatically;</span><br><span class="line"><span class="comment">//是否启用javaScript，14.0 以后就废弃了，有对应替换的 API</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> javaScriptEnabled;<span class="comment">//ios(8.0, 14.0)</span></span><br><span class="line"><span class="comment">//是否提醒 如网络钓鱼或恶意软件 等可疑的欺诈内容</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> fraudulentWebsiteWarningEnabled;<span class="comment">//ios(13.0)</span></span><br></pre></td></tr></table></figure>

<h2 id="WKUserContentController"><a href="#WKUserContentController" class="headerlink" title="WKUserContentController"></a>WKUserContentController</h2><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*! @abstract The user content controller to associate with the web view.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">WKUserContentController</span> *userContentController;</span><br></pre></td></tr></table></figure>

<p>这个类提供了一个 JavaScript 向 web view 发送消息的途径，可以增删用户脚本。</p>
<p>JavaScript 与原生做交互，比较多的一个场景是需要调用原生的某些能力。在 <code>UIWebView</code> 中简单的方式是拦截请求，根据特定的 scheme 或者参数来区分，那在 <code>WKWebView</code> 中则是通过 <code>WKUserContentController</code> 添加消息处理器。例如打开相机功能：</p>
<ul>
<li>添加脚本处理器</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">WKUserContentController</span> *userContentController = [[<span class="built_in">WKUserContentController</span> alloc] init];</span><br><span class="line">[userContentController addScriptMessageHandler:<span class="keyword">self</span> name:<span class="string">@&quot;OpenCamera&quot;</span>];</span><br><span class="line"><span class="built_in">WKWebViewConfiguration</span> *configuration = [[<span class="built_in">WKWebViewConfiguration</span> alloc] init];</span><br><span class="line">configuration.userContentController = userContentController;</span><br></pre></td></tr></table></figure>

<ul>
<li>实现 WKScriptMessageHandler 代理的方法</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - WKScriptMessageHandler</span></span><br><span class="line">- (<span class="keyword">void</span>)userContentController:(<span class="built_in">WKUserContentController</span> *)userContentController didReceiveScriptMessage:(<span class="built_in">WKScriptMessage</span> *)message &#123;</span><br><span class="line">    <span class="keyword">if</span> ([message.name caseInsensitiveCompare:<span class="string">@&quot;OpenCamera&quot;</span>] == <span class="built_in">NSOrderedSame</span>) &#123;</span><br><span class="line">        <span class="comment">//Call your open camera action.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>JS 中调用</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.webkit.messageHandlers.OpenCamera.postMessage(<span class="comment">/*需要传的参数，两端约定好*/</span>);</span><br></pre></td></tr></table></figure>

<p>我们看到接收 JavaScript 的消息是通过一个 <code>WKScriptMessage</code> 类型，我们再来简单看下这个类</p>
<h3 id="WKScriptMessage"><a href="#WKScriptMessage" class="headerlink" title="WKScriptMessage"></a>WKScriptMessage</h3><blockquote>
<p>A WKScriptMessage object contains information about a message sent from a webpage.</p>
</blockquote>
<p>他的注释就很简单了：一个包含网页发来的消息内容的对象。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 消息体、参数。允许的类型 NSNumber, NSString, NSDate, NSArray, NSDictionary, and NSNull.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="keyword">id</span> body;</span><br><span class="line"><span class="comment">// 发送消息的 web view。</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">weak</span>) <span class="built_in">WKWebView</span> *webView;</span><br><span class="line"><span class="comment">// 前端中发送消息的 frame。</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="built_in">WKFrameInfo</span> *frameInfo;</span><br><span class="line"><span class="comment">// 用于接收前端消息的处理器的名字。</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line"><span class="comment">// The content world from which the message was sent. ？我也还没用过不清楚是干嘛的。</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">WKContentWorld</span> *world API_AVAILABLE(macos(<span class="number">11.0</span>), ios(<span class="number">14.0</span>));</span><br></pre></td></tr></table></figure>

<h3 id="WKUserScript"><a href="#WKUserScript" class="headerlink" title="WKUserScript"></a>WKUserScript</h3><blockquote>
<p>A script that the web view injects into a webpage.</p>
</blockquote>
<p>当需要将自定义脚本代码注入 Web 页面时，可以创建一个 WKUserScript 对象。使用此对象指定要注入的 JavaScript 代码，以及与注入该代码的时间和方式相关的参数。通过前面提到的 WKUserContentController 调用 <code>addUserScript:</code> 完成注入。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">WKUserScript</span> : <span class="title">NSObject</span> &lt;<span class="title">NSCopying</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//JS 代码</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *source;</span><br><span class="line"><span class="comment">//JS 注入的时机</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">WKUserScriptInjectionTime</span> injectionTime;</span><br><span class="line"><span class="comment">//是否只用于主视图</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">getter</span>=isForMainFrameOnly) <span class="built_in">BOOL</span> forMainFrameOnly;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithSource:(<span class="built_in">NSString</span> *)source injectionTime:(<span class="built_in">WKUserScriptInjectionTime</span>)injectionTime forMainFrameOnly:(<span class="built_in">BOOL</span>)forMainFrameOnly;</span><br><span class="line"><span class="comment">//iOS14 新增的一个方法，区分JS的“作用域”</span></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithSource:(<span class="built_in">NSString</span> *)source injectionTime:(<span class="built_in">WKUserScriptInjectionTime</span>)injectionTime forMainFrameOnly:(<span class="built_in">BOOL</span>)forMainFrameOnly inContentWorld:(<span class="built_in">WKContentWorld</span> *)contentWorld <span class="built_in">WK_API_AVAILABLE</span>(macos(<span class="number">11.0</span>), ios(<span class="number">14.0</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<h3 id="WKContentWorld"><a href="#WKContentWorld" class="headerlink" title="WKContentWorld"></a>WKContentWorld</h3><blockquote>
<p>An object that defines a scope of execution for JavaScript code, and which you use to prevent conflicts between different scripts.</p>
</blockquote>
<p>WKContentWorld 是 iOS 14 的新增内容，可以理解为不同的命名空间、不同的运行环境。显而易见的，在逻辑上，原生的 JS 环境和 web JS 运行环境存在命名冲突的可能。WKContentWorld 有两个类属性 <code>defaultClientWorld</code> 、<code>pageWorld</code>，分别代表原生和 web 容器的 JS 运行空间。开发者也可以通过：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">+ (<span class="built_in">WKContentWorld</span> *)worldWithName:(<span class="built_in">NSString</span> *)name;</span><br></pre></td></tr></table></figure>

<p>工厂方法创建一个独立的 JS 运行环境。</p>
<h2 id="WKWebsiteDataStore"><a href="#WKWebsiteDataStore" class="headerlink" title="WKWebsiteDataStore"></a>WKWebsiteDataStore</h2><p>这个类貌似包含了一个 web view 的所有数据，我看完这个类的介绍，第一感觉是，哇，我可以窥探一切了。然而，除了 cookie，一毛钱都拿不到……不讲了，有兴趣自己试吧~~</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">(</span><br><span class="line">    <span class="built_in">WKWebsiteDataTypeDiskCache</span>,</span><br><span class="line">    <span class="built_in">WKWebsiteDataTypeOfflineWebApplicationCache</span>,</span><br><span class="line">    <span class="built_in">WKWebsiteDataTypeMemoryCache</span>,</span><br><span class="line">    <span class="built_in">WKWebsiteDataTypeLocalStorage</span>,</span><br><span class="line">    <span class="built_in">WKWebsiteDataTypeFetchCache</span>,</span><br><span class="line">    <span class="built_in">WKWebsiteDataTypeCookies</span>,</span><br><span class="line">    <span class="built_in">WKWebsiteDataTypeSessionStorage</span>,</span><br><span class="line">    <span class="built_in">WKWebsiteDataTypeIndexedDBDatabases</span>,</span><br><span class="line">    <span class="built_in">WKWebsiteDataTypeWebSQLDatabases</span>,</span><br><span class="line">    <span class="built_in">WKWebsiteDataTypeServiceWorkerRegistrations</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="WKHTTPCookieStore"><a href="#WKHTTPCookieStore" class="headerlink" title="WKHTTPCookieStore"></a>WKHTTPCookieStore</h2><blockquote>
<p> A WKHTTPCookieStore object allows managing the HTTP cookies associated with a particular WKWebsiteDataStore.</p>
<p> 用来管理与特定 <code>WKWebsiteDataStore</code> 相关联的 HTTP cookie。</p>
</blockquote>
<p>API 看上去很简单…但获得 cookie 是异步操作，与 <code>NSHTTPCookieStorage</code> 的同步操作不同，处理起来可能要注意下。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)getAllCookies:(<span class="keyword">void</span> (^)(<span class="built_in">NSArray</span>&lt;<span class="built_in">NSHTTPCookie</span> *&gt; *))completionHandler;</span><br><span class="line">- (<span class="keyword">void</span>)setCookie:(<span class="built_in">NSHTTPCookie</span> *)cookie completionHandler:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="keyword">void</span>))completionHandler;</span><br><span class="line">- (<span class="keyword">void</span>)deleteCookie:(<span class="built_in">NSHTTPCookie</span> *)cookie completionHandler:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="keyword">void</span>))completionHandler;</span><br><span class="line">- (<span class="keyword">void</span>)addObserver:(<span class="keyword">id</span>&lt;<span class="built_in">WKHTTPCookieStoreObserver</span>&gt;)observer;</span><br><span class="line">- (<span class="keyword">void</span>)removeObserver:(<span class="keyword">id</span>&lt;<span class="built_in">WKHTTPCookieStoreObserver</span>&gt;)observer;</span><br></pre></td></tr></table></figure>

<p>对应观察者的协议方法：</p>
<p>在 cookie 发生变化时，可以异步通知，但经测试是有一点延迟的，有兴趣可以测一测？</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">WKHTTPCookieStoreObserver</span> &lt;<span class="title">NSObject</span>&gt;</span></span><br><span class="line"><span class="keyword">@optional</span></span><br><span class="line">- (<span class="keyword">void</span>)cookiesDidChangeInCookieStore:(<span class="built_in">WKHTTPCookieStore</span> *)cookieStore;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<h2 id="WKBackForwardList"><a href="#WKBackForwardList" class="headerlink" title="WKBackForwardList"></a>WKBackForwardList</h2><p>访问过的 web 页面历史记录。</p>
<h2 id="WKNavigation"><a href="#WKNavigation" class="headerlink" title="WKNavigation"></a>WKNavigation</h2><p>WKNavigation 对象可以用来了解网页的加载进度。通过 loadRequest、goBack 等方法加载页面时，将返回一个 WKNavigation 对象。通过 WKNavigationDelegate 代理的以下几个方法，可以知道页面的加载情况。WKNavigationDelegate 稍后我们再说。</p>
<h3 id="WKNavigationAction"><a href="#WKNavigationAction" class="headerlink" title="WKNavigationAction"></a>WKNavigationAction</h3><p>包含网页导航信息，需要据此显示对应的操作界面。</p>
<h3 id="WKFrameInfo"><a href="#WKFrameInfo" class="headerlink" title="WKFrameInfo"></a>WKFrameInfo</h3><p>标识当前网页内容信息的对象。</p>
<hr>
<h2 id="关于-WKWebView-的几篇文章："><a href="#关于-WKWebView-的几篇文章：" class="headerlink" title="关于 WKWebView 的几篇文章："></a><strong>关于 WKWebView 的几篇文章：</strong></h2><p><a href="/2021/12/01/WKWebView/">WKWebView 基础篇</a><br><a href="/2021/12/02/WKWebView-Protocol/">WKWebView 协议篇</a><br><a href="/2021/12/11/WKWebView-Use/">WKWebView 实战篇</a></p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a><strong>Demo</strong></h2><p><a href="https://github.com/ATommyGirl/WebView">WebView 的 Demo</a></p>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>WebView</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 打卡 Day1 - 小目标</title>
    <url>/2023/06/29/android_day1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p>昨天忙完工作，脑子突然一热对安卓产生了兴趣，因为听周围的人讨论问题挺有意思，于是乎…今天开整。</p>
<p>先定三个小目标：</p>
<ol>
<li>Hello World!</li>
<li>Dice Roller</li>
<li>Tip Time</li>
</ol>
<p>对 Android 了解甚少，今天主要目的是借助两个小 demo 接触一下 Android Studio 和 Android 工程结构。</p>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h2><p>业界众所周知，万物皆始于<strong>Hello World</strong>，每一门编程语言都逃不过的定律。但是，Android Studio 新建一个空的 Activity，界面中间就是一个 Hello World!，好吧，这个目标自动完成，哈哈。Next~</p>
<span id="more"></span>

<h2 id="Dice-Roller"><a href="#Dice-Roller" class="headerlink" title="Dice Roller"></a>Dice Roller</h2><p>看到几个 Android 教程都是以摇骰子作为案例，随手点开一个视频跟着写了一下：</p>
<img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/dice_roller.png" style="zoom: 33%;">

<p>忽略配色，目前不重要🤓。拖拖拽拽几个控件、随机摇到数字、随机展示图片…初步感受：</p>
<ol>
<li>与 Android Studio 相比，Xcode 简直是个呆子，他们的编译器也太好用了；</li>
<li>对于布局文件，既可以通过图形界面来操作，也可以通过 xml 文件来修改，这一点是目前 iOS 做不到的；</li>
<li>各控件布局时的约束关系，个人觉得没有 iOS 的 AutoLayout 智能和严谨；</li>
<li>关于随机展示骰子点数的图片：</li>
</ol>
<p>假设六张图片对应 1~6 的点数，图片名称一般可能定义为 dice_1、dice_2、dice_3、dice_4、dice_5、dice_6，在 iOS 中的做法可能会是</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用伪代码代替</span></span><br><span class="line">num = random [<span class="number">1</span>,<span class="number">6</span>] 作为摇到的点数</span><br><span class="line">imageName = <span class="string">&quot;dice_&quot;</span> + num.toString 拼接图片名称</span><br><span class="line">image = Image.withName(imageName)</span><br><span class="line">imageView.setImage(image)</span><br></pre></td></tr></table></figure>

<p>我看在 Android 中，图片资源会放在工程中的 res -&gt; drawable 文件夹下，通过形如 R.drawable.dice_1 获取图片的 id，R.drawable 就对应 res -&gt; drawable。问了一下安卓同事、谷歌了几个博客很多都说只通过这种方式来做：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先把图片都放到一个集合中</span></span><br><span class="line"><span class="comment">//random 到的数字作为 index，再读取对应的“随机”图片</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">rollDice</span><span class="params">()</span></span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">val</span> num = (<span class="number">1.</span><span class="number">.6</span>).random()</span><br><span class="line">  <span class="keyword">val</span> images = arrayOf(</span><br><span class="line">      R.drawable.dice_1,</span><br><span class="line">      R.drawable.dice_2,</span><br><span class="line">      R.drawable.dice_3,</span><br><span class="line">      R.drawable.dice_4,</span><br><span class="line">      R.drawable.dice_5,</span><br><span class="line">      R.drawable.dice_6</span><br><span class="line">  )</span><br><span class="line">  diceImageView.setImageResource(images[num-<span class="number">1</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那如果有 100 张图片，也要都放到数组中吗？不解，是为了保证图片一定存在？？。翻了翻文档+问同学，找到另一个 API，可以通过字符串来拼接图片名称，不过我不清楚这种方式有没有什么隐含的技术问题，如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">rollDice</span><span class="params">()</span></span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">val</span> num = (<span class="number">1.</span><span class="number">.6</span>).random()</span><br><span class="line">  <span class="keyword">val</span> imageName = <span class="string">&quot;dice_<span class="variable">$num</span>&quot;</span></span><br><span class="line">  diceImage.setImageResource(getDrawableResource(<span class="keyword">this</span>, imageName))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getDrawableResource</span><span class="params">(context: <span class="type">Context</span>, name: <span class="type">String</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> packageName = context.packageName</span><br><span class="line">    <span class="keyword">return</span> context.resources.getIdentifier(name, <span class="string">&quot;drawable&quot;</span>, packageName)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Tip-Time"><a href="#Tip-Time" class="headerlink" title="Tip Time"></a>Tip Time</h2><p>另一个 demo 是用于计算小费的：</p>
<img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/tip_time.png" style="zoom:33%;">

<ol>
<li>when 语法块还挺优雅：</li>
</ol>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> tipPercentage = <span class="keyword">when</span>(binding.radioGroup.checkedRadioButtonId) &#123;</span><br><span class="line">    R.id.amazing_21 -&gt; <span class="number">0.21</span></span><br><span class="line">    R.id.good_16 -&gt; <span class="number">0.16</span></span><br><span class="line">    <span class="keyword">else</span> -&gt; <span class="number">0.10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>View binding</strong> 视图绑定。对于快速构建简单的页面还是挺方便的。这一点貌似也比 iOS 方便，不需要设置插座变量、拖来拖去的“电线”，但是 Android 中每一个控件都需要手动设置 id?…Ummmmm：</li>
</ol>
<p><a href="https://developer.android.google.cn/topic/libraries/view-binding?hl=en">View binding 官方文档</a></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// build.gradle(Module:xxx.app) 中打开视图绑定的配置</span></span><br><span class="line">android &#123;</span><br><span class="line">    ...</span><br><span class="line">    buildFeatures &#123;</span><br><span class="line">        viewBinding = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以在某个不想使用视图绑定的页面中忽略它</span></span><br><span class="line">&lt;LinearLayout</span><br><span class="line">        ...</span><br><span class="line">        tools:viewBindingIgnore=<span class="string">&quot;true&quot;</span> &gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;/LinearLayout&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 Activity 中使用视图绑定</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> binding: ActivityMainBinding</span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">    binding = ActivityMainBinding.inflate(layoutInflater)</span><br><span class="line">    setContentView(binding.root)</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 使用视图绑定来引用视图</span></span><br><span class="line">binding.calculate.setOnClickListener &#123;</span><br><span class="line">  calculateTip()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> tipPercentage = <span class="keyword">when</span>(binding.radioGroup.checkedRadioButtonId) &#123;</span><br><span class="line">    R.id.amazing_21 -&gt; <span class="number">0.21</span></span><br><span class="line">    R.id.good_16 -&gt; <span class="number">0.16</span></span><br><span class="line">    <span class="keyword">else</span> -&gt; <span class="number">0.10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在布局文件中指定视图 id 貌似一般是用小写单词并以 _ 下划线隔开，’android:id=”@+id/radio_group” 通过 R 来引用视图是形如 R.id.radio_group，id 还是小写的。但是当通过视图绑定来引用的话，id 会自动变为驼峰的形式，radio_group 被引用时形如 binding.radioGroup。</p>
<ol start="3">
<li>说到 RadioGroup，Android 的系统组件也太丰富了吧，都是现成的，iOS 没有…几乎很多组件都需要自己来绘制。还有，提到 Switch 组件，就更大无语了，Android 里的 Switch 还自带文本，iOS 系统提供的 Switch 组件这么多年了连改大小都不行，啊啊啊啊啊，家人们谁懂啊，好想骂人。这样想来 Android 开发者也太幸福了吧。🤡</li>
<li>在 Android Studio 编辑页面中的变量/参数下面出现下划线，是指该变量为 Reassigned parameter，即该变量可以被多次赋值。val 是只读变量，var 是可变变量。还可以设置下划线的样式，设置的位置 ： Editor -&gt; Color Scheme -&gt; Language Defaults -&gt; Identifiers -&gt; Reassigned parameters。</li>
</ol>
<img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/var_line.jpg" style="zoom:67%;">

<h2 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h2><p>Demo 期间遇到了好多个错误…当然，我一点也看不懂是为什么，希望后面学习深入以后能搞清楚：</p>
<h3 id="❌-6-issues-were-found-when-checking-AAR-metadata"><a href="#❌-6-issues-were-found-when-checking-AAR-metadata" class="headerlink" title="❌: 6 issues were found when checking AAR metadata:"></a>❌: 6 issues were found when checking AAR metadata:</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="number">6</span> issues were found <span class="keyword">when</span> checking AAR metadata:</span><br><span class="line"></span><br><span class="line">  <span class="number">1.</span>  Dependency <span class="string">&#x27;androidx.appcompat:appcompat-resources:1.6.1&#x27;</span> requires libraries and applications that</span><br><span class="line">      depend on it to compile against version <span class="number">33</span> or later of the</span><br><span class="line">      Android APIs.</span><br><span class="line"></span><br><span class="line">      :app <span class="keyword">is</span> currently compiled against android-<span class="number">32.</span></span><br><span class="line"></span><br><span class="line">      Recommended action: Update <span class="keyword">this</span> project to use a newer compileSdkVersion</span><br><span class="line">      of at least <span class="number">33</span>, <span class="keyword">for</span> example <span class="number">33.</span></span><br><span class="line"></span><br><span class="line">      Note that updating a library or application<span class="string">&#x27;s compileSdkVersion (which</span></span><br><span class="line"><span class="string">      allows newer APIs to be used) can be done separately from updating</span></span><br><span class="line"><span class="string">      targetSdkVersion (which opts the app in to new runtime behavior) and</span></span><br><span class="line"><span class="string">      minSdkVersion (which determines which devices the app can be installed</span></span><br><span class="line"><span class="string">      on).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure>

<p>是说选择的 android 版本太低了吗？但是写骰子的时候还是可以的，算小费的时候就不行了…改了一下配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    compileSdk 33</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="⚠️-Use-SwitchCompat-from-AppCompat-or-SwitchMaterial-from-Material-library"><a href="#⚠️-Use-SwitchCompat-from-AppCompat-or-SwitchMaterial-from-Material-library" class="headerlink" title="⚠️: Use SwitchCompat from AppCompat or SwitchMaterial from Material library."></a>⚠️: Use SwitchCompat from AppCompat or SwitchMaterial from Material library.</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">Use SwitchCompat from AppCompat or SwitchMaterial from Material library  Use SwitchCompat from AppCompat or SwitchMaterial from Material library  Issue id: UseSwitchCompatOrMaterialXml  Vendor: Android Open Source Project Identifier: androidx.appcompat Feedback: https:<span class="comment">//issuetracker.google.com/issues/new?component=460343 </span></span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/notthin/article/details/121903846">参考的这里：</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Switch</span><br><span class="line">	android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">    android:layout_height=&quot;wrap_content&quot; /&gt;</span><br><span class="line">    </span><br><span class="line">//改为</span><br><span class="line"></span><br><span class="line">&lt;androidx.appcompat.widget.SwitchCompat</span><br><span class="line">	android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">	android:layout_height=&quot;wrap_content&quot;/&gt;</span><br></pre></td></tr></table></figure>

<p>因为 Switch 对于旧版本的 Android 有不同的外观。则使用 SwitchCompat 可以为所有 Android 版本提供一致的外观。</p>
<blockquote>
<p>SwitchCompat 是核心 Switch 控件的完整向后移植版，它将该控件的视觉效果和功能带到了旧版本的平台。与此包中的其他控件不同，SwitchCompat 不会自动用于使用该元素的布局中。相反，您需要在布局中显式使用 &lt;androidx.appcompat.widget.SwitchCompat&gt; 和匹配的属性。</p>
</blockquote>
<h3 id="❌-system-process-E-JavaBinder-FAILED-BINDER-TRANSACTION-parcel-size-108"><a href="#❌-system-process-E-JavaBinder-FAILED-BINDER-TRANSACTION-parcel-size-108" class="headerlink" title="❌: system_process E/JavaBinder: !!! FAILED BINDER TRANSACTION !!! (parcel size = 108)"></a>❌: system_process E/JavaBinder: !!! FAILED BINDER TRANSACTION !!! (parcel size = 108)</h3><p>不知道。</p>
<h3 id="⚠️-Unknown-attribute-android-importantForAutofill"><a href="#⚠️-Unknown-attribute-android-importantForAutofill" class="headerlink" title="⚠️: Unknown attribute android:importantForAutofill"></a>⚠️: Unknown attribute android:importantForAutofill</h3><p>不知道。</p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>仅用于记录学习过程，不具备指导性。🤓</p>
<p><a href="https://github.com/ATommyGirl/android">Demo-Github</a></p>
<hr>
<p>下一日目标：了解 SDK version、Android version、Gradle 之间的关系、工程结构。</p>
]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 打卡 Day3 - 四大组件 - 初识</title>
    <url>/2023/09/22/android_day3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="Android-平台架构"><a href="#Android-平台架构" class="headerlink" title="Android 平台架构"></a>Android 平台架构</h2><p>Android 是一个适用于移动设备的开源操作系统，由 Google 主导对应的开源项目。整个 Android 以 Linux 的核心作为底层，加上中介函数库和 API，函数库大部分以 C语言设计，框架大多以 Java 相容的程序编写，在这个框架之上才是手机安装的应用。作为一个开源项目，Android 被打造成了一个适用于消费类产品的完整高品质操作系统，并配有可自定义并运用到几乎所有设备的源代码，以及所有用户均可使用的公开文档。</p>
<img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/android-stack_2x.png" style="zoom: 40%;">

<p>从下往上：</p>
<ul>
<li><p>Linux 内核。</p>
</li>
<li><p>HAL - 硬件抽象层。提供标准界面，向更高级别的 Java API 框架显示设备硬件功能。HAL 包含多个库模块，其中每个模块都为特定类型的硬件组件实现一个界面，例如相机或蓝牙模块。当框架 API 要求访问设备硬件时，Android 系统将为该硬件组件加载库模块。</p>
</li>
<li><p>ART - Android Runtime。</p>
</li>
<li><p>原生 C/C++ 库 - 许多核心 Android 系统组件和服务（例如 ART 和 HAL）构建自原生代码，需要以 C 和 C++ 编写的原生库。Android 平台提供 Java 框架 API 以向应用显示其中部分原生库的功能。</p>
</li>
<li><p>Java API 框架- 可通过以 Java 语言编写的 API 使用 Android OS 的整个功能集。这些 API 形成创建 Android 应用所需的构建块，它们可简化核心模块化系统组件和服务的重复使用，包括以下组件和服务：</p>
<ul>
<li>丰富、可扩展的<a href="https://developer.android.com/guide/topics/ui/overview?hl=zh-cn">视图系统</a>，可用以构建应用的 UI，包括列表、网格、文本框、按钮甚至可嵌入的网络浏览器</li>
<li><a href="https://developer.android.com/guide/topics/resources/overview?hl=zh-cn">资源管理器</a>，用于访问非代码资源，例如本地化的字符串、图形和布局文件</li>
<li><a href="https://developer.android.com/guide/topics/ui/notifiers/notifications?hl=zh-cn">通知管理器</a>，可让所有应用在状态栏中显示自定义提醒</li>
<li><a href="https://developer.android.com/guide/components/activities?hl=zh-cn">Activity 管理器</a>，用于管理应用的生命周期，提供常见的<a href="https://developer.android.com/guide/components/tasks-and-back-stack?hl=zh-cn">导航返回栈</a></li>
<li><a href="https://developer.android.com/guide/topics/providers/content-providers?hl=zh-cn">内容提供程序</a>，可让应用访问其他应用（例如“联系人”应用）中的数据或者共享其自己的数据</li>
</ul>
<p>开发者可以完全访问 Android 系统应用使用的<a href="https://developer.android.com/reference/packages?hl=zh-cn">框架 API</a>。</p>
</li>
<li><p>系统应用（System Apps）- 相机、邮件、短信、日历等。</p>
</li>
</ul>
<h2 id="四大组件"><a href="#四大组件" class="headerlink" title="四大组件"></a>四大组件</h2><h3 id="☄️-Activity"><a href="#☄️-Activity" class="headerlink" title="☄️ Activity"></a>☄️ Activity</h3><ul>
<li><p>一个 <a href="https://developer.android.com/guide/components/activities/intro-activities?hl=zh-cn#mtal">Activity</a> 通常就是一个单独的屏幕（窗口）。此窗口通常会填满屏幕，但也可能比屏幕小，并浮动在其他窗口上面。通常，应用中的一个 Activity 会被指定为主 Activity，这是用户启动应用时出现的第一个屏幕。然后，每个 Activity 可以启动另一个 Activity，以执行不同的操作。例如，一个简单的电子邮件应用中的主 Activity 可能会提供显示电子邮件收件箱的屏幕。主 Activity 可能会从该屏幕启动其他 Activity，以提供执行写邮件和打开邮件这类任务的屏幕。</p>
</li>
<li><p>Activity 之间通过 Intent 进行通信。虽然应用中的各个 Activity 协同工作形成统一的用户体验，但每个 Activity 与其他 Activity 之间只存在松散的关联，应用内不同 Activity 之间的依赖关系通常很小。事实上，Activity 经常会启动属于其他应用的 Activity。例如，浏览器应用可能会启动社交媒体应用的“分享”Activity。</p>
</li>
<li><p><strong>Android 应用中每一个 Activity 都必须要在 AndroidManifest.xml 配置文件中声明</strong>，并且必须适当地管理 Activity 的生命周期，否则系统将不识别也不执行该 Activity。</p>
</li>
<li><p>使用 <code>&lt;activity&gt;</code> 标签进行声明，唯一的必要属性是 <code>android:name</code>。</p>
</li>
<li><p>使用 <code>Intent</code> 显示/隐式请求启动 Activity。</p>
</li>
<li><p>生命周期：</p>
<p><code>onCreate()</code> 在系统创建 Activity 时触发，初始化 Activity 的基本组件、必须在此处调用 <code>setContentView()</code> 来定义 Activity 界面的布局。<br>⬇️<br><code>onStart()</code> “已启动”，并对用户可见。此回调包含 Activity 进入前台与用户进行互动之前的最后准备工作。<br>⬇️<br><code>onResume()</code> 系统会在 Activity 开始与用户互动之前调用此回调。此时，该 Activity 位于 Activity 堆栈的顶部，并会捕获所有用户输入。应用的大部分核心功能都是在 <code>onResume()</code> 方法中实现的。<code>onResume()</code> 回调后面总是跟着 <code>onPause()</code> 回调。<br>⬇️<br><code>onPause()</code> 当 Activity 失去焦点并进入“已暂停”状态时，系统就会调用 <code>onPause()</code>。例如，当用户点按“返回”或“最近使用的应用”按钮时，就会出现此状态。当系统调用 Activity 的 <code>onPause()</code> 时，从技术上来说，这意味着该 Activity 仍然部分可见，但大多数情况下，这表明用户正在离开该 Activity，该 Activity 很快将进入“已停止”或“已恢复”状态。如果用户希望界面继续更新，则处于“已暂停”状态的 Activity 也可以继续更新界面。例如，显示导航地图屏幕或播放媒体播放器的 Activity 就属于此类 Activity。即使此类 Activity 失去了焦点，用户仍希望其界面继续更新。开发者<strong>不</strong>应使用 <code>onPause()</code> 来保存应用或用户数据、进行网络呼叫或执行数据库事务。有关保存数据的信息，请参阅<a href="https://developer.android.com/guide/components/activities/activity-lifecycle?hl=zh-cn#saras">保存和恢复 Activity 状态</a>。</p>
<p><code>onPause()</code> 执行完毕后，下一个回调为 <code>onStop()</code>或 <code>onResume()</code>，具体取决于 Activity 进入“已暂停”状态后发生的情况。<br>⬇️<br><code>onStop()</code> 当 Activity 对用户不再可见时，系统会调用 <code>onStop()</code>。出现这种情况的原因可能是 Activity 被销毁、新的 Activity 启动、或者现有的 Activity 正在进入“已恢复”状态并覆盖了已停止的 Activity。在所有这些情况下，停止的 Activity 都将完全不再可见。系统调用的下一个回调将是 <code>onRestart()</code>（如果 Activity 重新与用户互动）或者 <code>onDestroy()</code>（如果 Activity 彻底终止）。</p>
<p>⬇️<br><code>onRestart()</code> 当处于“已停止”状态的 Activity 即将重启时，系统就会调用此回调。<code>onRestart()</code> 会从 Activity 停止时的状态恢复 Activity。此回调后面总是跟着 <code>onStart()</code>。<br>⬇️<br><code>onDestroy()</code> 系统会在销毁 Activity 之前调用此回调。此回调是 Activity 接收的最后一个回调。通常，实现 <code>onDestroy()</code> 是为了确保在销毁 Activity 或包含该 Activity 的进程时释放该 Activity 的所有资源。</p>
</li>
</ul>
<p>生命周期整体上和 iOS 类似。</p>
<h3 id="☄️-Service"><a href="#☄️-Service" class="headerlink" title="☄️ Service"></a>☄️ Service</h3><ul>
<li><p><a href="https://developer.android.com/guide/components/services?hl=zh-cn">Service</a> 是一种可在后台执行长时间运行操作而不提供界面的应用组件。Service 可由其他应用组件启动，而且即使用户切换到其他应用，Service 仍将在后台继续运行。此外，组件可通过绑定到 Service 与之进行交互，甚至是执行进程间通信 (IPC)。Service 组件通常用于为其他组件提供后台服务或监控其他组件的运行状态，例如，服务可在后台处理网络事务、播放音乐，执行文件 I/O 或与内容提供程序进行交互。</p>
</li>
<li><p>Service 的启动方式分为两种：</p>
<ul>
<li>Started（启动）：当应用程序组件（如 activity）调用 <code>startService()</code> 方法启动服务时，服务处于 started 状态。</li>
<li>Bound（绑定）：当应用程序组件调用 <code>bindService()</code> 方法绑定到服务时，服务处于 bound 状态。</li>
</ul>
</li>
<li><p>startService() 与 bindService() 区别：</p>
<ul>
<li>Started Service（启动服务）是由其他组件调用 <code>startService()</code> 方法启动的，这导致服务的 <code>onStartCommand()</code> 方法被调用。当服务是 started 状态时，其生命周期与启动它的组件无关，并且可以在后台无限期运行，即使启动服务的组件已经被销毁。因此，服务需要在完成任务后调用 <code>stopSelf()</code> 方法停止，或者由其他组件调用 <code>stopService()</code> 方法停止。</li>
<li>Bound Service（绑定服务）使用 <code>bindService()</code> 方法启用服务，调用者与服务绑定在了一起，调用者一旦退出，服务也就终止，“不求同年同月同日生，必须同年同月同日死”。</li>
</ul>
</li>
<li><p>如同 Activity 及其他组件的操作一样，<strong>开发者必须在 AndroidManifest.xml 文件中声明所有服务</strong>，使用 <service></service> 标签。</p>
</li>
<li><p>生命周期：</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/service_lifecycle.png"></p>
<p>左图显示使用 <code>startService()</code> 创建的服务的生命周期，右图显示使用 <code>bindService()</code> 创建的服务的生命周期，两者还可以嵌套循环使用。</p>
</li>
</ul>
<h3 id="☄️-Content-Provider"><a href="#☄️-Content-Provider" class="headerlink" title="☄️ Content Provider"></a>☄️ Content Provider</h3><ul>
<li>Content Provider 使一个应用程序的指定数据集提供给其他应用程序，是一种标准接口。其他应用可以通过 ContentResolver 类从该内容提供者中访问或修改数据。</li>
<li>只有需要在多个应用程序间共享数据是才需要内容提供者。例如，通讯录数据被多个应用程序使用，且必须存储在一个内容提供者中。它的好处是统一数据访问方式。</li>
<li>ContentProvider 实现数据共享。ContentProvider 用于保存和获取数据，并使其对所有应用程序可见。这是不同应用程序间共享数据的唯一方式，因为 Android 没有提供所有应用共同访问的公共存储区。</li>
<li>开发人员不会直接使用 ContentProvider 类的对象，大多数是通过 ContentResolver 对象实现对 ContentProvider 的操作。</li>
<li>ContentProvider 使用 URI 来唯一标识其数据集，这里的 URI 以 content:// 作为 scheme，表示该数据由 ContentProvider 来管理。</li>
</ul>
<h3 id="☄️-Broadcast-Receiver"><a href="#☄️-Broadcast-Receiver" class="headerlink" title="☄️ Broadcast Receiver"></a>☄️ Broadcast Receiver</h3><ul>
<li>类似<strong>发布-订阅</strong>的设计模式，应用可以订阅特定的广播，对外部事件进行过滤，只对感兴趣的外部事件 (如当电话呼入时，或者数据网络可用时) 进行接收并做出响应。广播接收器没有用户界面。然而，它们可以启动一个 Activity 或 Service 来响应它们收到的信息，或者用 NotificationManager 来通知用户，通知可以用很多种方式来吸引用户的注意力，例如闪动背灯、震动、播放声音等。一般来说是在状态栏上放一个持久的图标，用户可以打开它并获取消息。</li>
<li>应用可以通过两种方式接收广播：<strong>清单声明</strong>的（静态）接收器和<strong>上下文注册</strong>的（动态）接收器。</li>
<li>动态注册广播接收器特点是当用来注册的 Activity 关掉后，广播也就失效了。静态注册无需担忧广播接收器是否被关闭，只要设备是开启状态，广播接收器也是打开着的。也就是说即使 App 本身未启动，该 app 订阅的广播在触发时也会对它起作用。</li>
</ul>
<p>🔆 概念理解起来还算顺利，Activity 类似 ViewController，Content Provider 一定程度上类似文件分享？，Broadcast 类似 iOS 的远程/本地通知，还有 Service 和 iOS 的小组件有点类似，但是限制明显比 iOS 少一些…</p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>仅用于记录学习过程，不具备指导性。🤓</p>
<p><a href="https://github.com/ATommyGirl/android">Demo-Github</a></p>
<hr>
<p>下一日目标：Demo 中实践四大组件。</p>
]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 动态修改状态栏风格</title>
    <url>/2021/01/20/iOS%20%E5%8A%A8%E6%80%81%E4%BF%AE%E6%94%B9%E7%8A%B6%E6%80%81%E6%A0%8F%E9%A3%8E%E6%A0%BC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>App 中经常需要根据页面的风格改变电池栏文字的颜色，记录一下都是如何调整的。</p>
<ul>
<li> UIStatusBarStyle 的样式</li>
<li>改变状态栏文字颜色的方式</li>
<li>状态栏的显示和隐藏</li>
</ul>
<span id="more"></span>

<h2 id="UIStatusBarStyle-的样式"><a href="#UIStatusBarStyle-的样式" class="headerlink" title="UIStatusBarStyle 的样式"></a>UIStatusBarStyle 的样式</h2><p>iOS 13.0 中新增了暗黑模式，对应的状态栏风格也增加了一个 <code>darkContent</code>。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">UIStatusBarStyle</span> : <span class="title">Int</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">default</span> <span class="operator">=</span> <span class="number">0</span> <span class="comment">// Automatically chooses light or dark content based on the user interface style</span></span><br><span class="line">    <span class="keyword">@available</span>(<span class="keyword">iOS</span> <span class="number">7.0</span>, <span class="operator">*</span>)</span><br><span class="line">    <span class="keyword">case</span> lightContent <span class="operator">=</span> <span class="number">1</span> <span class="comment">// Light content, for use on dark backgrounds</span></span><br><span class="line">    <span class="keyword">@available</span>(<span class="keyword">iOS</span> <span class="number">13.0</span>, <span class="operator">*</span>)</span><br><span class="line">    <span class="keyword">case</span> darkContent <span class="operator">=</span> <span class="number">3</span> <span class="comment">// Dark content, for use on light backgrounds</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="改变状态栏文字的颜色"><a href="#改变状态栏文字的颜色" class="headerlink" title="改变状态栏文字的颜色"></a>改变状态栏文字的颜色</h2><p>是否可以在不同页面设置不同的风格，首先要配置好 <code>Info.plist</code> 中的 </p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">View</span> controller<span class="operator">-</span>based status bar appearance</span><br></pre></td></tr></table></figure>

<p>属性，默认为 <code>YES</code>。</p>
<ul>
<li>如果整个应用只需要使用固定的风格，上述属性改为 <code>NO</code>。在应用配置或者代码中设定好风格即可。</li>
<li>如果状态栏颜色需要视页面而定，上述属性改为 <code>YES</code>，并且重写控制器的 <code>preferredStatusBarStyle</code> 方法。</li>
</ul>
<p>对于需要调整 <code>ViewController</code> 风格的页面，我们重写它的 getter，这是一个 只读 的属性。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">var</span> preferredStatusBarStyle: <span class="type">UIStatusBarStyle</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">UIStatusBarStyle</span>.lightContent</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然如果导航控制器重写了这个方法，它的子控制器都会以 导航控制器 的为准。如果子控制器中有需要改变风格的，同样也需要自己实现这个方法。</p>
<h2 id="状态栏的显示和隐藏"><a href="#状态栏的显示和隐藏" class="headerlink" title="状态栏的显示和隐藏"></a>状态栏的显示和隐藏</h2><ul>
<li>全局隐藏的话，很简单，直接改配置。</li>
<li>部分页面隐藏，同上，重写~~</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">var</span> prefersStatusBarHidden: <span class="type">Bool</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>HEAD 小乌龙</title>
    <url>/2022/01/14/http_head/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="手机-App"><a href="#手机-App" class="headerlink" title="手机 App"></a>手机 App</h3><p>熟悉手机端的朋友一般都了解:</p>
<ol>
<li>iOS App 的文件格式是 .ipa ；Android App 的文件格式是 .apk。</li>
<li>ipa 文件安装协议是苹果提供的形如：<code>itms-services://?action=download-manifest&amp;url=https://tommygirl.cn/app/download/plist</code> 的链接。一系列的请求首先指向 plist 文件，plist 文件中会注明 ipa 文件的真实下载地址以及 App 的基本信息。在此不赘述。</li>
<li>apk 文件相较于 ipa 的安装更简单一些，下载好 apk 文件以后跟随系统的提示进行安装即可。</li>
</ol>
<p>提供给企业内部员工使用的 App 一般不会特意上线 AppStore 或者安卓各应用市场，通常自己维护一个下载机制供少数人安装即可。</p>
<h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>基于手机端的背景，一个简单的下载机制可以是这样的:</p>
<span id="more"></span>

<ol>
<li><p>提供一个统一的 App 下载(更新)接口:</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">https://tommygirl.cn/app/download</span><br></pre></td></tr></table></figure></li>
<li><p>根据 HTTP 头部 User-Agent 字段来判断设备类型：PC、iOS、Android……等等。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">User-Agent : Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36</span><br></pre></td></tr></table></figure></li>
<li><p>根据不同设备在 Response 中返回不同的下载地址:</p>
<p>如果是 Android 设备呢，1. 接口返回形如:</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">https://tommygirl.cn/app/download/ahaaaaa.apk</span><br></pre></td></tr></table></figure>

<p>如果是 iOS 设备呢，1. 接口返回形如:</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">itms-services://?action=download-manifest&amp;url=https://tommygirl.cn/app/download/plist</span><br></pre></td></tr></table></figure>

<p>plist 指向 ipa:</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">https://tommygirl.cn/app/download/ahaaaaa.ipa</span><br></pre></td></tr></table></figure></li>
<li><p>手机端根据各自系统的特点去下载新的安装包。</p>
</li>
</ol>
<h3 id="用户需求"><a href="#用户需求" class="headerlink" title="用户需求"></a>用户需求</h3><p>用户要求统计 ipa 和 apk 的下载量，误差姑且接受 ±100 吧。哈哈哈，毕竟自己人可能反复测试产生一些误差数据🤓。</p>
<p>由于项目周期短，服务端的实现机制是统计两个文件所在位置的访问量。然鹅，同事测试的时候发现：下载量是翻倍在增长，这样下去我们 App 的下载量可以跟微信媲美了 😂。所以这个诡异的现象是为什么呢？</p>
<h2 id="分析-抓包"><a href="#分析-抓包" class="headerlink" title="分析-抓包"></a>分析-抓包</h2><p>从安卓手机安装的现象看，浏览器先访问了一次 apk 文件，但又主动取消了下载，要等用户手动再点一次下载，才会真正的开始接收数据。所以我猜测是不是先做了一次 HEAD 请求，第二次再做的 GET 请求下载数据。</p>
<ol>
<li><p>先在 iOS 手机上抓了一下包，每点击一次下载按钮都会依次发出三个网络请求：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/app/download/plist</span> <span class="meta">HTTP/1.1</span></span><br><span class="line">HEAD /app/download/ahaaaaa.ipa HTTP/1.1</span><br><span class="line">GET /app/download/ahaaaaa.ipa HTTP/1.1</span><br></pre></td></tr></table></figure></li>
</ol>
<p>抓包内容：</p>
<center>
    <div style="display:inline-block;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/http-head.jpg" class width="500"></div>
</center>

<p>这个时候我已经咋咋呼呼的跑去找后端同事炫耀自己的猜测了，自信的认为绝对是 HEAD 请求导致的，燃鹅……</p>
<ol start="2">
<li><p>在 Android 手机上抓包，两级反转了：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/app/download/ahaaaaa.apk</span> <span class="meta">HTTP/1.1</span></span><br><span class="line">GET /app/download/ahaaaaa.apk HTTP/1.1</span><br></pre></td></tr></table></figure></li>
</ol>
<p>抓包内容：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">//----- Android</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;time_local&quot;</span>: <span class="string">&quot;30/Dec/2021:15:24:04 +0800&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;remote_addr&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;remote_user&quot;</span>: <span class="string">&quot;-&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;upstream_addr&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;time_total&quot;</span>: <span class="string">&quot;2.081&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;upstream_response_time&quot;</span>: <span class="string">&quot;2.081&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;status&quot;</span>: <span class="string">&quot;200&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;request&quot;</span>: <span class="string">&quot;GET /app/download/ahaaaaa.apk HTTP/1.1&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;method&quot;</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;body_bytes_sent&quot;</span>: <span class="string">&quot;13815405&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;http_user_agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 9; MHA-AL00; HMSCore 6.2.0.301; GMSCore 19.6.29) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.105 HuaweiBrowser/12.0.1.300 Mobile Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;time_local&quot;</span>: <span class="string">&quot;30/Dec/202:15:24:12 +0800&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;remote_addr&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;remote_user&quot;</span>: <span class="string">&quot;-&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;upstream_addr&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;time_total&quot;</span>: <span class="string">&quot;4.410&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;upstream_response_time&quot;</span>: <span class="string">&quot;4.411&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;status&quot;</span>: <span class="string">&quot;200&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;request&quot;</span>: <span class="string">&quot;GET /app/download/ahaaaaa.apk HTTP/1.1&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;method&quot;</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;body_bytes_sent&quot;</span>: <span class="string">&quot;13815405&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;http_user_agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 9; MHA-AL00; HMSCore 6.2.0.301; GMSCore 19.6.29) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.105 HuaweiBrowser/12.0.1.300 Mobile Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>竟然是两个 GET 请求，第一个请求被浏览器主动断开了，所以时间也相对较短。这里我是挺不理解的，为什么不直接使用一个 HEAD 请求呢？所以这就是为什么我不爱用安卓手机🤓。</p>
<h2 id="HEAD-请求"><a href="#HEAD-请求" class="headerlink" title="HEAD 请求"></a>HEAD 请求</h2><p>所以什么是 HEAD 请求呢？</p>
<blockquote>
<p><strong>HTTP <code>HEAD</code> 方法</strong> 请求资源的头部信息, 并且这些头部与 HTTP <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET"><code>GET</code></a> 方法请求时返回的一致. 该请求方法的一个使用场景是在下载一个大文件前先获取其大小再决定是否要下载, 以此可以节约带宽资源。</p>
<p><code>HEAD</code> 方法的响应不应包含响应正文. 即使包含了正文也必须忽略掉. 虽然描述正文信息的 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Entity_header">entity headers</a>, 例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Length"><code>Content-Length</code></a> 可能会包含在响应中, 但它们并不是用来描述 <code>HEAD</code> 响应本身的, 而是用来描述同样情况下的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET"><code>GET</code></a> 请求应该返回的响应。</p>
<p>如果 <code>HEAD</code> 请求的结果显示在上一次 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET"><code>GET</code></a> 请求后缓存的资源已经过期了, 即使没有发出<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET"><code>GET</code></a>请求，缓存也会失效。</p>
</blockquote>
<p>除了上面提到的节约带宽以外，还可以探测文件的有效性、可用性、最近是否有修改等等。</p>
<h2 id="302"><a href="#302" class="headerlink" title="302"></a>302</h2><p>苹果系统针对 ipa 文件应该是主动发的 HEAD 请求，这个相对好处理一些。但安卓系统内部的实现机制我们不太好猜了。最终的解决方案是通过一个 302 跳转规避这种情况，在 <a href="/2022/01/14/http_head/#%E6%9C%8D%E5%8A%A1%E7%AB%AF">原方案</a> 中的第三步修改为:</p>
<ol start="3">
<li>在 Response 中返回同一个地址(用于统计下载量的接口)，但并不是真正的安装包下载地址。</li>
</ol>
<p>For example 返回一个统计接口给手机端：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">https://tommygirl.cn/app/download/file</span><br></pre></td></tr></table></figure>

<p>如果是 Android 设备呢，统计接口再 302 指向:</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">https://tommygirl.cn/app/download/ahaaaaa.apk</span><br></pre></td></tr></table></figure>

<p>如果是 iOS 设备呢，统计接口再 302 指向:</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">itms-services://?action=download-manifest&amp;url=https://tommygirl.cn/app/download/plist</span><br></pre></td></tr></table></figure>

<p>……后面的过程就一样了。</p>
<p>FYI: iOS 用的网络组件 AFNetworking 正常情况下是不支持 itms-services 协议的，所以要单独在失败回调中处理一下。</p>
<p>so……一个小乌龙就这样了</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/flag.jpeg"></p>
]]></content>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>震惊！由 Referer 引发的一桩“惨案”？</title>
    <url>/2021/12/31/http_referer/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="案件起因"><a href="#案件起因" class="headerlink" title="案件起因"></a>案件起因</h2><p>震惊！全员震惊😱！一位程序员哈某举报有人偷走了他两天两夜的时间，经过我们24小时的跟踪暗访，嫌疑人竟是 Mr.Referrer ？请看详细报道：</p>
<center>
    <div style="display:inline-block;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/shark01.png" class width="300"></div>
    <div style="display:inline-block;margin-left:10px;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/shark02.png" class width="300"></div>
</center>

<span id="more"></span>

<blockquote>
<p>前端同事的一个 jsp 资源A，通过浏览器去访问第三方业务的某个资源B，资源B会做一个 login 认证请求，如果 login 成功则返回资源B的详细页面信息，反之进入 ErrorPage。在测试环境中，login 是可以成功的；但是在生产环境中，login 请求提示了如下错误：</p>
</blockquote>
<blockquote>
<p><strong>Provisional headers are shown.</strong></p>
</blockquote>
<blockquote>
<p>直译是：显示了临时的（暂定的）标题。经抓包查看网络状况是：HTTP Code 200 OK，但是 Response 是空的，更像是浏览器主动取消了这个请求，Google 和 Safari 都是一样的现象。</p>
</blockquote>
<p>哈某排查了许久也没有定位到原因，面临客户提出的紧急上线，情况很是焦灼。</p>
<p>FYI: 不想听我讲废话的话，请直接跳转至 <a href="/2021/12/31/http_referer/#Referrer-or-Referer">Referer</a> 😂</p>
<h2 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h2><h3 id="1-谷歌一下"><a href="#1-谷歌一下" class="headerlink" title="1.谷歌一下"></a>1.谷歌一下</h3><p>相信大部分程序员遇到问题时，第一个排查步骤都是施展 CV 大法粘到谷歌搜索一下。同样，我们和哈某也采取了这一步，搜索 <code>Provisional headers are shown</code> 得到的结果都大同小异。以下几个原因<a href="https://segmentfault.com/a/1190000018191614">粘贴自这里</a></p>
<p>具体原因有多种总结如下：<br>1.请求被某些扩展如 Adblock 拦截了，请求被浏览器插件拦截。解决方案：用 chrome://net-internals 来帮助你查找被屏蔽的请求以及可能的原因。（本人发现现在这个用不了了）；<br>2.请求被墙了；<br>3.走本地缓存或者 dataurl 的请求。强缓存 from disk cache 或者 from memory cache，此时也不会显示；<br>4.服务器未及时响应（超时）；<br>5.跨域，请求被浏览器拦截；<br>6.<a href="https://link.segmentfault.com/?enc=XF6fR2q9AZND/ujtgtszDg==.2MOJqWSs0judvuIA1tJF0rNFn1/t0QMFah/F8CbkeEnIj5LdNIg83y5I67gI9uu1">其他原因</a>；</p>
<p>这里的原因6，我们就当他在钻研废话文学吧……总而言之，网友们提供的这几个原因，经尝试，依旧没有定位到问题。</p>
<h3 id="2-检查-Nginx-配置"><a href="#2-检查-Nginx-配置" class="headerlink" title="2.检查 Nginx 配置"></a>2.检查 Nginx 配置</h3><p>经过上面“专业”的排查~依旧懵逼。随后哈某联系了服务端的同事，想比对一下测试环境、生产环境中 Nginx 的配置是否有区别，燃鹅并没有区别。为了避开 Nginx 存在的未知干扰，从内网访问资源B，login 的操作显示 404 🙄……</p>
<p>二度懵逼~😳</p>
<h3 id="3-沟通"><a href="#3-沟通" class="headerlink" title="3.沟通"></a>3.沟通</h3><p>通过专业手段没有定位到原因，只能尝试和第三方业务的人沟通了。按照我们大部门的管理理念，没有什么事情是沟通解决不了的。</p>
<p>很不幸的是，对端的人只反馈给我们 login 请求并没有到达他们那儿。听到这个回答笑哭了有没有~用哈某的话说：“我都快看他内裤了，还不承认”，今天凌晨躺在床上帮他们分析这个问题时（其实我不懂后端，就是跟着瞎掺和顺便学习新知识），被这句话逗笑了，也算是通宵加班的一个慰藉了。😂</p>
<h3 id="4-Charles"><a href="#4-Charles" class="headerlink" title="4.Charles"></a>4.Charles</h3><p>通过对 App 抓包，login 请求同样显示 HTTP Code 200 OK，但是 Response 是空的。但是跟 Google 浏览器中 NetWork 调试器的表现不太一样。</p>
<h3 id="5-cURL"><a href="#5-cURL" class="headerlink" title="5.cURL"></a>5.cURL</h3><p>为了排除浏览器对 Response 可能存在特殊的解析规则，亦或者服务器针对浏览器发出的请求做一些限制，可以通过 cURL 作网络请求。cURL入门学习：<a href="https://www.ruanyifeng.com/blog/2019/09/curl-reference.html">阮一峰-curl 的用法指南</a> 。</p>
<p>通过 cURL 访问资源B以及 login 请求，Ummmmmmmm，请求是成功的！经过一位”神棍”的提点，我们从 Google 浏览器中选中目标请求 -&gt; 右击 -&gt; Copy -&gt; Copy as cURL：</p>
<center>
    <div style="display:inline-block;margin-left:10px;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/google_copy.png" class width="500"></div>
</center>

<p>比对一下和自己使用 cURL 写的请求区别在哪里，结果如下：</p>
<ul>
<li><p>页面关系</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">1、先访问资源A： https://hhh.com:0000/aaa/test.jsp</span><br><span class="line">2、由1跳转到资源B： https://hhh.com:0000/aaa/index.html</span><br><span class="line">3、由2发起 login 认证请求 https://hhh.com:0000/aaa/loginAction.do</span><br></pre></td></tr></table></figure></li>
<li><p>Google 发出的请求（失败的情况）</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">curl</span> <span class="string">&#x27;https://hhh.com:0000/aaa/loginAction.do&#x27;</span> \</span><br><span class="line">  <span class="literal">-H</span> <span class="string">&#x27;Connection: keep-alive&#x27;</span> \</span><br><span class="line">  <span class="literal">-H</span> <span class="string">&#x27;Pragma: no-cache&#x27;</span> \</span><br><span class="line">  <span class="literal">-H</span> <span class="string">&#x27;Cache-Control: no-cache&#x27;</span> \</span><br><span class="line">  <span class="literal">-H</span> <span class="string">&#x27;sec-ch-ua: &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Chromium&quot;;v=&quot;96&quot;, &quot;Google Chrome&quot;;v=&quot;96&quot;&#x27;</span> \</span><br><span class="line">  <span class="literal">-H</span> <span class="string">&#x27;Accept: application/json, text/plain, */*&#x27;</span> \</span><br><span class="line">  <span class="literal">-H</span> <span class="string">&#x27;sec-ch-ua-mobile: ?0&#x27;</span> \</span><br><span class="line">  <span class="literal">-H</span> <span class="string">&#x27;User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36&#x27;</span> \</span><br><span class="line">  <span class="literal">-H</span> <span class="string">&#x27;sec-ch-ua-platform: &quot;macOS&quot;&#x27;</span> \</span><br><span class="line">  <span class="literal">-H</span> <span class="string">&#x27;Sec-Fetch-Site: same-origin&#x27;</span> \</span><br><span class="line">  <span class="literal">-H</span> <span class="string">&#x27;Sec-Fetch-Mode: cors&#x27;</span> \</span><br><span class="line">  <span class="literal">-H</span> <span class="string">&#x27;Sec-Fetch-Dest: empty&#x27;</span> \</span><br><span class="line">  <span class="literal">-H</span> <span class="string">&#x27;Referer: https://hhh.com:0000/aaa/index.html&#x27;</span> \</span><br><span class="line">  <span class="literal">-H</span> <span class="string">&#x27;Accept-Language: zh-CN,zh;q=0.9,en;q=0.8&#x27;</span> \</span><br><span class="line">  <span class="literal">-H</span> <span class="string">&#x27;Cookie: JSESSIONID=68ED14BCB51A01E5DA08FA2009333BA2&#x27;</span> \</span><br><span class="line">  -<span class="literal">-compressed</span> <span class="literal">-i</span></span><br></pre></td></tr></table></figure></li>
<li><p>自己发的 cURL 请求（成功的情况）</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">curl</span> <span class="string">&#x27;https://hhh.com:0000/aaa/loginAction.do&#x27;</span> <span class="literal">-i</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>所以区别在哪里呢？header ！</p>
<h3 id="6-破案"><a href="#6-破案" class="headerlink" title="6.破案"></a>6.破案</h3><p>经过修改几个主要的 header 信息，最终确定了真凶就是 <code>Referer</code> 字段。去掉 <code>Referer</code> 之后页面可以正常访问了。无奈由于资源B是三方系统，我们无法要求对方修改代码，采用了临时的解决方案：</p>
<blockquote>
<p> <strong>修改 DMZ 区 Nginx 的配置，所有经过这台 Nginx 的请求都不携带 Referer 头部。</strong></p>
</blockquote>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">add_header</span> Referrer-Policy <span class="literal">no</span>-referrer;</span><br></pre></td></tr></table></figure>

<p>所以  <code>Provisional headers are shown</code>  翻译为”临时的头部信息“更为贴切对吗？不知道是否因为 Referer 涉及用户隐私的问题。</p>
<h2 id="Referrer-or-Referer"><a href="#Referrer-or-Referer" class="headerlink" title="Referrer or Referer ?"></a>Referrer or Referer ?</h2><p><code>Referer</code> 是 HTTP 请求头里一个常见的字段，包含了当前请求页面的来源页面的地址，即表示当前页面是通过此来源页面里的链接进入的。服务端一般使用 <code>Referer</code> 请求头识别访问来源，可能会以此进行统计分析、日志记录以及缓存优化等。</p>
<h3 id="1-Referer-的含义"><a href="#1-Referer-的含义" class="headerlink" title="1.Referer 的含义"></a>1.Referer 的含义</h3><p>现实生活中，你一定填过这样的问卷调查：”你从哪里知道了我们？”。这叫做引荐人（referrer），谁引荐了你？对于公司来说，这是很有用的信息。互联网也是一样，你不会无缘无故访问一个网页，总是有人告诉你，可以去那里看看。服务器也想知道，你的 “引荐人” 是谁？</p>
<p>HTTP 协议在请求（request）的头信息里面，设计了一个 <code>Referer</code> 字段，给出 “引荐网页” 的 URL。这个字段是可选的。客户端发送请求的时候，自主决定是否加上该字段。</p>
<p>很有趣的是，这个字段的拼写是错的。<code>Referer</code> 的正确拼写是 <code>Referrer</code>，但是写入标准的时候，不知为何，没人发现少了一个字母<code>r</code>。标准定案以后，只能将错就错，所有头信息的该字段都一律错误拼写成 <code>Referer</code>。Nginx 采用的是正确拼写~</p>
<h3 id="2-Referer-的发生场景"><a href="#2-Referer-的发生场景" class="headerlink" title="2.Referer 的发生场景"></a>2.Referer 的发生场景</h3><p>浏览器向服务器请求资源的时候，<code>Referer</code> 字段的逻辑是这样的，用户在地址栏输入网址，或者选中浏览器书签，就不发送 <code>Referer</code> 字段。</p>
<p>主要是以下三种场景，会发送 <code>Referer</code> 字段：</p>
<p>（1）用户点击网页上的链接。</p>
<p>（2）用户发送表单。</p>
<p>（3）网页加载静态资源，比如加载图片、脚本、样式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 加载图片 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;foo.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 加载脚本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;foo.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 加载样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;foo.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面这些场景，浏览器都会将当前网址作为 <code>Referer</code> 字段，放在 HTTP 请求的头信息发送。</p>
<p>浏览器的 JavaScript 引擎提供 <code>document.referrer</code> 属性，可以查看当前页面的引荐来源。注意，这里采用的是正确拼写。</p>
<h3 id="3-Referer-的作用"><a href="#3-Referer-的作用" class="headerlink" title="3.Referer 的作用"></a>3.Referer 的作用</h3><p><code>Referer</code> 字段实际上告诉了服务器，用户在访问当前资源之前的位置。这往往可以用来用户跟踪。一个典型的应用是，有些网站不允许图片外链，只有自家的网站才能显示图片，外部网站加载图片就会报错。它的实现就是基于 <code>Referer</code> 字段，如果该字段的网址是自家网址，就放行。</p>
<p>由于涉及隐私，很多时候不适合发送 <code>Referer</code> 字段。这里举两个例子，都不适合暴露 URL。一个是功能 URL，即有的 URL 不要登录，可以访问，就能直接完成密码重置、邮件退订等功能。另一个是内网 URL，不希望外部用户知道内网有这样的地址。<code>Referer</code> 字段很可能把这些 URL 暴露出去。</p>
<p>此外，还有一种特殊情况，需要定制 <code>Referer</code> 字段。比如社交网站上，用户在对话中提到某个网址。这时，不希望暴露用户所在的原始网址，但是可以暴露社交网站的域名，让对方知道，是我贡献了你的流量。</p>
<h3 id="4-rel属性"><a href="#4-rel属性" class="headerlink" title="4.rel属性"></a>4.<code>rel</code>属性</h3><p>由于上一节的原因，浏览器提供一系列手段，允许改变默认的 <code>Referer</code> 行为。</p>
<p>对于开发者来说，<code>rel=&quot;noreferrer&quot;</code> 属性是最简单的一种方法。<code>&lt;a&gt;</code>、<code>&lt;area&gt;</code> 和 <code>&lt;form&gt;</code> 三个标签可以使用这个属性，一旦使用，该元素就不会发送<code>Referer</code>字段。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;...&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;noreferrer&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面链接点击产生的 HTTP 请求，不会带有  <code>Referer</code>  字段。</p>
<p>注意，<code>rel=&quot;noreferrer&quot;</code> 采用的是正确的拼写。</p>
<h3 id="5-Referrer-Policy-的值"><a href="#5-Referrer-Policy-的值" class="headerlink" title="5.Referrer Policy 的值"></a>5.Referrer Policy 的值</h3><p><code>rel</code> 属性只能定制单个元素的 <code>Referer</code> 行为，而且选择比较少，只能发送或不发送。W3C 为此制定了更强大的 <a href="https://w3c.github.io/webappsec-referrer-policy/">Referrer Policy</a>。</p>
<p>Referrer Policy 可以设定 8 个值：</p>
<p><strong>（1）no-referrer</strong></p>
<p>不发送 <code>Referer</code> 字段。</p>
<p><strong>（2）no-referrer-when-downgrade</strong></p>
<p>如果从 HTTPS 网址链接到 HTTP 网址，不发送 <code>Referer</code> 字段，其他情况发送（包括 HTTP 网址链接到 HTTP 网址）。这是浏览器的默认行为。</p>
<p><strong>（3）same-origin</strong></p>
<p>链接到同源网址（协议 + 域名 + 端口 都相同）时发送，否则不发送。注意，<code>https://foo.com</code> 链接到 <code>http://foo.com</code> 也属于跨域。</p>
<p><strong>（4）origin</strong></p>
<p><code>Referer</code> 字段一律只发送源信息（协议 + 域名 + 端口），不管是否跨域。</p>
<p><strong>（5）strict-origin</strong></p>
<p>如果从 HTTPS 网址链接到 HTTP 网址，不发送 <code>Referer</code> 字段，其他情况只发送源信息。</p>
<p><strong>（6）origin-when-cross-origin</strong></p>
<p>同源时，发送完整的 <code>Referer</code> 字段，跨域时发送源信息。</p>
<p><strong>（7）strict-origin-when-cross-origin</strong></p>
<p>同源时，发送完整的 <code>Referer</code> 字段；跨域时，如果 HTTPS 网址链接到 HTTP 网址，不发送 <code>Referer</code> 字段，否则发送源信息。</p>
<p><strong>（8）unsafe-url</strong></p>
<p><code>Referer</code> 字段包含源信息、路径和查询字符串，不包含锚点、用户名和密码。</p>
<h3 id="6-Referrer-Policy-的用法"><a href="#6-Referrer-Policy-的用法" class="headerlink" title="6.Referrer Policy 的用法"></a>6.Referrer Policy 的用法</h3><p>Referrer Policy 有<a href="https://w3c.github.io/webappsec-referrer-policy/#referrer-policy-delivery">多种使用方法</a>。</p>
<p><strong>（1）HTTP 头信息</strong></p>
<p>服务器发送网页的时候，通过 HTTP 头信息的 <code>Referrer-Policy</code> 告诉浏览器。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Referrer-Policy</span><span class="punctuation">: </span>origin</span><br></pre></td></tr></table></figure>

<p><strong>（2）<code>&lt;meta&gt;</code> 标签</strong></p>
<p>也可以使用 <code>&lt;meta&gt;</code> 标签，在网页头部设置。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;referrer&quot;</span> <span class="attr">content</span>=<span class="string">&quot;origin&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>（3）<code>referrerpolicy</code> 属性</strong></p>
<p><code>&lt;a&gt;</code>、<code>&lt;area&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;iframe&gt;</code> 和 <code>&lt;link&gt;</code> 标签，可以设置 referrerpolicy 属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;...&quot;</span> <span class="attr">referrerpolicy</span>=<span class="string">&quot;origin&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>PS：更多内容见 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Referer">参考1-MDN</a>、<a href="http://www.ruanyifeng.com/blog/2019/06/http-referer.html">参考2-阮一峰</a></p>
<h2 id="疑惑"><a href="#疑惑" class="headerlink" title="疑惑"></a>疑惑</h2><p>资源B的测试环境同样有 Referer 头部，但所有网络请求都是没问题的。虽然这次通过修改 Nginx 的配置临时解决了问题，但生产环境上为何存在这个问题，根本原因依旧没搞清楚。同事也咨询了对方是否针对 Referer 做了类似防盗链的处理，得到的答案是否定的。所以可能是哪里的问题呢？😳</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/flag.jpeg"></p>
]]></content>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 打卡 Day2 - 项目结构</title>
    <url>/2023/07/01/android_day2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="SDK-Version"><a href="#SDK-Version" class="headerlink" title="SDK Version"></a>SDK Version</h2><p>有些文章看的云里雾里，概念性的内容还是看官方👉：</p>
<p><a href="https://developer.android.com/studio/releases/platforms?hl=zh-cn">官方 - SDK 平台版本说明</a><br><a href="https://developer.android.com/guide/topics/manifest/uses-sdk-element?hl=zh-cn#ApiLevels">官方 - API 级别说明</a></p>
<h2 id="Android-Studio-项目目录结构"><a href="#Android-Studio-项目目录结构" class="headerlink" title="Android Studio 项目目录结构"></a>Android Studio 项目目录结构</h2><p>在 Android Studio 中，新建一个工程、进入 <strong>Project</strong> 标签页。<strong>Project</strong> 标签页会显示项目的文件和文件夹，如下左图。官方说 <strong>如有必要，请从 Project 标签页的下拉菜单中选择 Android</strong>，如下右图：</p>
<blockquote>
<p>这就是您使用的标准文件视图和组织方式，在编写项目代码时会非常有用，因为您可以轻松访问将在应用中使用的各个文件。不过，如果您是通过文件浏览器（如 Finder 或 Windows 资源管理器）浏览文件，则文件层次结构的组织方式会明显不同。</p>
</blockquote>
<center>
    <div style="display:inline-block;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/Project.png" class width="300"></div>
    <div style="display:inline-block;margin-left:10px;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/Android.png" class width="333"></div>
</center>

<p>确实，Project 比 Android 目录看着闹心多了，我说怎么第一次看公司 Android 的代码乱七八糟的呢，他们几个也不告诉我，坏人，啊哈哈哈~🤡🤡🤡🤡🤡</p>
<p>截图是以上次的 Tip Time Demo 为例：</p>
<table>
<thead>
<tr>
<th>目录文件</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>.gradle</td>
<td>gradle 项目产生的文件夹（自动编译工具产生的文件）</td>
</tr>
<tr>
<td>.idea</td>
<td>IDEA 项目文件夹（开发工具产生的文件）</td>
</tr>
<tr>
<td>app</td>
<td>module 模块</td>
</tr>
<tr>
<td>build</td>
<td>构建时生成文件的地方</td>
</tr>
<tr>
<td>gradle</td>
<td>gradle 环境支持文件夹</td>
</tr>
<tr>
<td>.gitignore</td>
<td>git 源码管理文件</td>
</tr>
<tr>
<td>build.gradle</td>
<td>gradle 项目自动编译的配置文件</td>
</tr>
<tr>
<td>gradlew</td>
<td>自动完成 gradle 环境的 linux mac 脚本，配合 gradle 文件夹使用</td>
</tr>
<tr>
<td>gradlew.bat</td>
<td>自动完成 gradle 环境的 windows 脚本，配合 gradle 文件夹使用</td>
</tr>
<tr>
<td>local.properties</td>
<td>Android SDK NDK 环境路径配置</td>
</tr>
<tr>
<td>setting.gradle</td>
<td>gradle 项目的子项目包含文件</td>
</tr>
</tbody></table>
<h3 id="gradle"><a href="#gradle" class="headerlink" title=".gradle"></a>.gradle</h3><p>.gradle 是AS自动生成的目录，一般情况不做修改。</p>
<img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/day2g.png" style="zoom:50%;">

<h3 id="idea"><a href="#idea" class="headerlink" title=".idea"></a>.idea</h3><p>idea 是AS自动生成的目录，一般情况不做修改。</p>
<img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/day2i.png" style="zoom:50%;">

<h3 id="app"><a href="#app" class="headerlink" title="app"></a>app</h3><p>应用的主目录、模块目录。</p>
<img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/day2a.png" style="zoom:50%;">

<table>
<thead>
<tr>
<th>目录文件</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>build</td>
<td>编译时生成</td>
</tr>
<tr>
<td>libs</td>
<td>存放第三方的 jar 包</td>
</tr>
<tr>
<td>src</td>
<td>app 模块的源码</td>
</tr>
<tr>
<td>.gitignore</td>
<td>git 源码管理文件</td>
</tr>
<tr>
<td>build.gradle</td>
<td>app 模块的 gradle 构建脚本</td>
</tr>
<tr>
<td>proguard-rules.pro</td>
<td>指定代码混淆</td>
</tr>
</tbody></table>
<h4 id="1️⃣-build-目录"><a href="#1️⃣-build-目录" class="headerlink" title="1️⃣ build 目录"></a>1️⃣ build 目录</h4><p>和外层的 build 类似主要包含编译时自动生成的内容, 其中在 outputs 文件夹下存放打包好的 apk 文件（debug 和 release）。</p>
<h4 id="2️⃣-libs-目录"><a href="#2️⃣-libs-目录" class="headerlink" title="2️⃣ libs 目录"></a>2️⃣ libs 目录</h4><p>如果项目中是用了第三方的 jar 包，就需要把 jar 包放到 libs 目录下，然后 jar 包会被自动添加到构建路径（如集成百度地图 sdk，把 jar 包放到 libs 目录。可以在 build.gradle（app）文件中查看当前项目依赖）。</p>
<h4 id="3️⃣-src-目录"><a href="#3️⃣-src-目录" class="headerlink" title="3️⃣ src 目录"></a>3️⃣ src 目录</h4><p>module 源码所在目录。</p>
<ul>
<li>AndroidTest - 用来编写 Android test 测试用例的，可以对项目进行一些自动化测试。</li>
<li>Java - 放 Java 代码的地方。</li>
<li>res - 存放各种资源文件的地方，有图片、字符串，动画、音频等，还有各种形式的 XML 文件。</li>
</ul>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">🤓  res [main] 🔥 tree -L 1</span><br><span class="line">.</span><br><span class="line">├── drawable</span><br><span class="line">├── drawable-v24</span><br><span class="line">├── layout</span><br><span class="line">├── mipmap-anydpi-v26</span><br><span class="line">├── mipmap-hdpi</span><br><span class="line">├── mipmap-mdpi</span><br><span class="line">├── mipmap-xhdpi</span><br><span class="line">├── mipmap-xxhdpi</span><br><span class="line">├── mipmap-xxxhdpi</span><br><span class="line">├── values</span><br><span class="line">├── values-night</span><br><span class="line">├── values-zh-rCN</span><br><span class="line">└── xml</span><br></pre></td></tr></table></figure>

<ul>
<li>AndroidManifest.xml - 整个项目的配置文件，四大组件都需要在这里注册才能正常的运行。</li>
<li>test - 用来编写 Unit Test 测试用例的，是对项目进行自动化测试的另一种方式。</li>
</ul>
<h4 id="4️⃣-src-gt-res-资源介绍"><a href="#4️⃣-src-gt-res-资源介绍" class="headerlink" title="4️⃣ src-&gt;res 资源介绍"></a>4️⃣ src-&gt;res 资源介绍</h4><p><a href="https://blog.csdn.net/qq_40959750/article/details/107076963">以下内容转载自</a></p>
<h5 id="💯-图片资源"><a href="#💯-图片资源" class="headerlink" title="💯 图片资源"></a>💯 图片资源</h5><p>drawable：存放各种位图文件，(.png/.jpg/.9png/.gif 等) 除此之外可能是一些其他的 drawable 类型的 XML 文件；<br>mipmap-hdpi：高分辨率，一般把图片放这里；<br>mipmap-mdpi：中等分辨率，很少，除非兼容的的手机很旧；<br>mipmap-xhdpi：超高分辨率，手机屏幕材质越来越好，以后估计会慢慢往这里过渡；<br>mipmap-xxhdpi：超超高分辨率，这个在高端机上有所体现；</p>
<h5 id="💯-布局资源"><a href="#💯-布局资源" class="headerlink" title="💯 布局资源"></a>💯 布局资源</h5><p>layout：该目录下存放的就是我们的布局文件，另外在一些特定的机型上，我们做屏幕适配，比如 480*320 这样的手机，我们会另外创建一套布局，就像：layout-480x320 这样的文件夹。</p>
<h5 id="💯-values-目录"><a href="#💯-values-目录" class="headerlink" title="💯 values 目录"></a>💯 values 目录</h5><p>emens.xml：定义尺寸资源；<br>string.xml：定义字符串资源；<br>styles.xml：定义样式资源；<br>colors.xml：定义颜色资源；<br>arrays.xml：定义数组资源；<br>attrs.xml：自定义控件时用的较多，自定义控件的属性；<br>theme 主题文件：和 styles 很相似，但是会对整个应用中的 Actvitiy 或指定 Activity 起作用，一般是改变窗口外观的，可在 Java 代码中通过 setTheme 使用，或者在 Androidmanifest.xml 中为 &lt;application…&gt; 添加 theme 的属性。</p>
<p>PS: 你可能看到过这样的 values 目录：values-w820dp，values-v11 等，前者 w 代表平板设备，820dp 代表屏幕宽度；而 v11 这样代表在 API(11)，即 android 3.0 后才会用到的。</p>
<h5 id="💯-raw-目录"><a href="#💯-raw-目录" class="headerlink" title="💯 raw 目录"></a>💯 raw 目录</h5><p>用于存放各种原生资源 (音频，视频，一些 XML 文件等)，我们可以通过 openRawResource(int id) 来获得资源的二进制流。其实和 Assets 差不多，不过这里面的资源会在 R 文件那里生成一个资源 id 而已。</p>
<h5 id="💯-动画资源"><a href="#💯-动画资源" class="headerlink" title="💯 动画资源"></a>💯 动画资源</h5><p>animator：存放属性动画的 XML 文件；<br>anim：存放补间动画的 XML 文件；</p>
<h5 id="💯-如何使用资源"><a href="#💯-如何使用资源" class="headerlink" title="💯 如何使用资源"></a>💯 如何使用资源</h5><p>我们所有的资源文件都会在 R.java 文件下生成一个资源 id，我们可以通过这个资源 id 来完成资源的访问，使用情况有两种：Java 代码中使用和 XML 代码中使用。</p>
<ul>
<li>Java 代码中使用：</li>
</ul>
<p>文字：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">txtName.setText(getResources().getText(R.string.name)); </span><br></pre></td></tr></table></figure>

<p>图片：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">imgIcon.setBackgroundDrawableResource(R.drawable.icon); </span><br></pre></td></tr></table></figure>

<p>颜色：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">txtName.setTextColor(getResouces().getColor(R.color.red)); </span><br></pre></td></tr></table></figure>

<p>布局：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setContentView(R.layout.main);</span><br></pre></td></tr></table></figure>

<p>控件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">txtName = (TextView)findViewById(R.id.txt_name);</span><br></pre></td></tr></table></figure>

<ul>
<li>XML 代码中使用：</li>
</ul>
<p>通过 @xxx 即可得到，比如这里获取文本和图片:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;TextView android:text=&quot;@string/hello_world&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:background = &quot;@drawable/img_back&quot;/&gt;</span><br></pre></td></tr></table></figure>

<p>该说不说，这个资源的分布和引用方式，真的比 iOS 方便很多…🚰</p>
<h2 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h2><p><a href="https://developer.android.com/studio/build?hl=zh-cn">官方文档</a></p>
<blockquote>
<p>Android Studio 使用高级构建工具包 <a href="http://www.gradle.org/">Gradle</a> 来自动执行和管理构建流程，同时也允许您自行指定灵活的 build 配置。每项 build 配置均可定义各自的一组代码和资源，同时重复利用所有应用版本共用的部分。Android Gradle 插件与该构建工具包搭配使用，提供专用于构建和测试 Android 应用的流程和可配置设置。</p>
<p>Gradle 和 Android Gradle 插件独立于 Android Studio 运行。这意味着，您可以在 Android Studio 内、计算机上的命令行或未安装 Android Studio 的计算机（如持续集成服务器）上构建 Android 应用。</p>
</blockquote>
<p>对于我这种初学者来说，知道 Gradle 是一个自动化构建工具（管理项目中的依赖、打包、编译）、基于 Groovy 的 DSL等就可以了，不急，后面慢慢来理解。好吧，主要是有些内容我没看懂🤓，但是不急，先用起来。</p>
<p>选中下拉菜单 -&gt; Android，可以看到 Gradle Scripts 包含以下文件：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">build.gradle(Project:Tip_Time)</span><br><span class="line">build.gradle(Module :app)</span><br><span class="line">proguard-rules.pro(ProGuard Rules <span class="keyword">for</span> <span class="string">&quot;:app&quot;</span>)</span><br><span class="line">gradle.properties(Project Properties)</span><br><span class="line">gradle.properties(Global Properties)</span><br><span class="line">gradle-wrapper.properties(Gradle Version)</span><br><span class="line">local.properties(SDK Location)</span><br><span class="line">settings.gradle(Project Settings)</span><br></pre></td></tr></table></figure>

<p>PS: Tip Time 工程太简单，复杂的项目应该不止这些文件。</p>
<h3 id="1️⃣-settings-gradle"><a href="#1️⃣-settings-gradle" class="headerlink" title="1️⃣ settings.gradle"></a>1️⃣ settings.gradle</h3><p>(Project Settings)位于项目的根目录下，此设置文件会定义项目级仓库设置，并告知 Gradle 在构建应用时应将哪些模块包含在内。多模块项目需要指定应包含在最终 build 中的每个模块。可能包含一下这几部分：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">pluginManagement &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        gradlePluginPortal()</span><br><span class="line">        google()</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">dependencyResolutionManagement &#123;</span><br><span class="line">    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)</span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">rootProject.name = <span class="string">&quot;Tip Time&quot;</span>	<span class="comment">//应用名称</span></span><br><span class="line">include <span class="string">&#x27;:app&#x27;</span>	<span class="comment">//所包含的模块</span></span><br></pre></td></tr></table></figure>

<h4 id="✅pluginManagement"><a href="#✅pluginManagement" class="headerlink" title="✅pluginManagement"></a>✅pluginManagement</h4><p><code>pluginManagement &#123;repositions &#123;...&#125;&#125;</code> 块用来配置 Gradle 用于搜索或下载 Gradle 插件及其可传递依赖项的存储库。Gradle 预先配置了对远程存储库（如 JCenter、Maven Central 和 Ivy）的支持。还可以使用本地存储库或定义自己的远程存储库。上面的代码定义了 Gradle 插件门户、谷歌的 Maven 存储库和 Maven 中央存储库，作为 Gradle 应该用来查找其依赖关系的存储库。 </p>
<h4 id="✅dependencyResolutionManagement"><a href="#✅dependencyResolutionManagement" class="headerlink" title="✅dependencyResolutionManagement"></a>✅dependencyResolutionManagement</h4><p><code>dependencyResolutionManagement &#123;repositions &#123;...&#125;&#125;</code> 用于配置项目中所有模块使用的存储库和依赖项，例如用于创建应用程序的库。但是，应该在每个模块级 build.gradle 文件中配置特定于模块的依赖项。对于新项目，Android Studio 默认情况下包括谷歌的 Maven 存储库和 Maven 中央存储库，但它不配置任何依赖项（除非我们选择需要一些依赖项的模板）。</p>
<h3 id="2️⃣-build-gradle-Project-Tip-Time"><a href="#2️⃣-build-gradle-Project-Tip-Time" class="headerlink" title="2️⃣ build.gradle(Project:Tip_Time)"></a>2️⃣ build.gradle(Project:Tip_Time)</h3><p>Project 的构建文件。**// Top-level build file where you can add configuration options common to all sub-projects/modules.** 从这句注释大概能看出它的地位了。顶层 <code>build.gradle</code> 文件位于项目的根目录下。它用于定义适用于项目中所有模块的依赖项。默认情况下，顶层 build 文件使用 <code>plugins</code> 代码块定义项目中所有模块共用的 Gradle 依赖项。此外，顶层 build 文件还包含用于清理 build 目录的代码。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span></span><br><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;com.android.application&#x27;</span> version <span class="string">&#x27;7.2.2&#x27;</span> apply <span class="literal">false</span></span><br><span class="line">    id <span class="string">&#x27;com.android.library&#x27;</span> version <span class="string">&#x27;7.2.2&#x27;</span> apply <span class="literal">false</span></span><br><span class="line">    id <span class="string">&#x27;org.jetbrains.kotlin.android&#x27;</span> version <span class="string">&#x27;1.7.10&#x27;</span> apply <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task clean(<span class="attr">type:</span> Delete) &#123;</span><br><span class="line">    delete rootProject.buildDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3️⃣-build-gradle-Module-app"><a href="#3️⃣-build-gradle-Module-app" class="headerlink" title="3️⃣ build.gradle(Module :app)"></a>3️⃣ build.gradle(Module :app)</h3><p>模块级 <code>build.gradle</code> 文件位于每个 <code>project/module/</code> 目录中，用于为其所在的特定模块配置 build 设置。可以通过配置这些 build 设置提供自定义打包选项（如额外的 build 类型和产品变种），以及替换 <code>main/</code> 应用清单或者顶层 <code>build.gradle</code> 文件中的设置。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;com.android.application&#x27;</span></span><br><span class="line">    id <span class="string">&#x27;org.jetbrains.kotlin.android&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdk <span class="number">33</span>	<span class="comment">//设置编译时用的Android版本</span></span><br><span class="line"></span><br><span class="line">    buildFeatures &#123;</span><br><span class="line">        viewBinding = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">&quot;com.example.tiptime&quot;</span>	<span class="comment">//项目的包名</span></span><br><span class="line">        minSdk <span class="number">28</span>	<span class="comment">//项目最低兼容的版本</span></span><br><span class="line">        targetSdk <span class="number">33</span>	<span class="comment">//项目的目标版本</span></span><br><span class="line">        versionCode <span class="number">1</span>	<span class="comment">//版本号</span></span><br><span class="line">        versionName <span class="string">&quot;1.0&quot;</span>	<span class="comment">//版本名称</span></span><br><span class="line"></span><br><span class="line">        testInstrumentationRunner <span class="string">&quot;androidx.test.runner.AndroidJUnitRunner&quot;</span>	<span class="comment">//表明要使用AndroidJUnitRunner进行单元测试</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">&#x27;proguard-android-optimize.txt&#x27;</span>), <span class="string">&#x27;proguard-rules.pro&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        sourceCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">        targetCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">    &#125;</span><br><span class="line">    kotlinOptions &#123;</span><br><span class="line">        jvmTarget = <span class="string">&#x27;1.8&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;	<span class="comment">//该模块的依赖关系</span></span><br><span class="line"></span><br><span class="line">    implementation <span class="string">&#x27;androidx.core:core-ktx:1.7.0&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;androidx.appcompat:appcompat:1.6.1&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;com.google.android.material:material:1.9.0&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;androidx.constraintlayout:constraintlayout:2.1.4&#x27;</span></span><br><span class="line">    testImplementation <span class="string">&#x27;junit:junit:4.13.2&#x27;</span></span><br><span class="line">    androidTestImplementation <span class="string">&#x27;androidx.test.ext:junit:1.1.5&#x27;</span></span><br><span class="line">    androidTestImplementation <span class="string">&#x27;androidx.test.espresso:espresso-core:3.5.1&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="✅plugins"><a href="#✅plugins" class="headerlink" title="✅plugins"></a>✅plugins</h4><p>指定 <code>android &#123;&#125;</code> 块使用的构建选项。</p>
<ul>
<li>com.android.application - 表示该模块为应用程序模块，可以直接运行，打包得到的是.apk 文件；</li>
<li>com.android.library - 表示该模块为库模块，只能作为代码库依附于别的应用程序模块来运行，打包得到的是.aar文件；</li>
<li>org.jetbrains.kotlin.android - 表示该模块使用 kotlin 开发。</li>
</ul>
<h4 id="✅android"><a href="#✅android" class="headerlink" title="✅android"></a>✅android</h4><p>指定该模块的各种构建属性。</p>
<h4 id="✅dependencies"><a href="#✅dependencies" class="headerlink" title="✅dependencies"></a>✅dependencies</h4><p>指定仅构建该模块本身所需的依赖项。</p>
<h3 id="4️⃣-Properties"><a href="#4️⃣-Properties" class="headerlink" title="4️⃣ Properties"></a>4️⃣ Properties</h3><p>Gradle 的属性文件，项目全局的配置(如 AndroidX 等)、构建的全局配置(例如网络代理等)、本地环境的配置(如 SDK 的路径等)。</p>
<p>gradle.properties(Project Properties)<br>gradle.properties(Global Properties)<br>local.properties(SDK Location)</p>
<p><a href="https://cloud.tencent.com/developer/article/1742368">看到一篇比较细致的文章，不过有些配置项比较老了🔽</a></p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>仅用于记录学习过程，不具备指导性。🤓</p>
<p><a href="https://github.com/ATommyGirl/android">Demo-Github</a></p>
<hr>
<p>下一日目标：膜拜一下四大组件。</p>
]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 重签名脚本</title>
    <url>/2021/11/09/iOS%20%E9%87%8D%E7%AD%BE%E5%90%8D%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>企业应用经常遇到的一个场景，是只需要重签名不需要修改代码，或者一些老项目不（bu）想（gan）用新的编译环境去打包，避免不必要的麻烦~~😂</p>
<p>提供一个重签名脚本 <a href="https://github.com/ATommyGirl/ipa_resign"> ios_app_signature_tool.sh</a></p>
<h2 id="只更新签名"><a href="#只更新签名" class="headerlink" title="只更新签名"></a>只更新签名</h2><p>如果只需要重签名，不需要修改版本信息的话，指定新的描述文件路径和 ipa 文件即可。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sh ios_app_signature_tool.sh -p /Users/tommy/Desktop/PP.mobileprovision old_ipa_1.0.3.ipa</span><br></pre></td></tr></table></figure>

<h2 id="修改版本号"><a href="#修改版本号" class="headerlink" title="修改版本号"></a>修改版本号</h2><p>如果需要修改 version 和 build 两个信息的话，使用 <code>-v</code> 和 <code>-b</code> 两个参数，格式是字符串。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sh ios_app_signature_tool.sh -p /Users/tommy/Desktop/PP.mobileprovision -v <span class="string">&#x27;1.0.4&#x27;</span> -b <span class="string">&#x27;20&#x27;</span> old_ipa_1.0.3.ipa</span><br></pre></td></tr></table></figure>

<h2 id="包含-Extension"><a href="#包含-Extension" class="headerlink" title="包含 Extension"></a>包含 Extension</h2><p>如果 App 包含扩展也需要续签，使用 <code>-s</code> 指定多个描述文件所在的文件夹。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh ios_app_signature_tool.sh -s /Users/tommy/Desktop/your-PPs-folder -v &#x27;1.0.4&#x27; -b &#x27;20&#x27; old_ipa_1.0.3.ipa</span><br></pre></td></tr></table></figure>

<h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><span id="more"></span>

<p>我怕有人不知道点上面的链接，所以粘一下脚本的代码，很长哦，小心滑哦~~~🤓</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参考：</span></span><br><span class="line"><span class="comment"># 临时文件使用说明：https://www.ruanyifeng.com/blog/2019/12/mktemp.html</span></span><br><span class="line"><span class="comment"># Checking Distribution Entitlements：https://developer.apple.com/library/archive/qa/qa1798/_index.html</span></span><br><span class="line"><span class="comment"># iOS的ipa包重签名：https://blog.devlxx.com/2016/04/23/iOS%E7%9A%84ipa%E5%8C%85%E9%87%8D%E7%AD%BE%E5%90%8D/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> <span class="literal">-euo</span> pipefail</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 mobileprovision 中提取信息 =================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 mobileprovision 中提取 plist</span></span><br><span class="line">extract_mobileprovision_plist() &#123;</span><br><span class="line">    security cms <span class="literal">-D</span> <span class="literal">-i</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 mobileprovision 中提取 指定字段内容</span></span><br><span class="line">extract_field_content() &#123;</span><br><span class="line">    local filename=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">    local path=<span class="string">&quot;<span class="variable">$2</span>&quot;</span></span><br><span class="line">    local content</span><br><span class="line">    content=<span class="variable">$</span>(extract_mobileprovision_plist <span class="string">&quot;<span class="variable">$</span>&#123;filename&#125;&quot;</span> | plutil <span class="literal">-extract</span> <span class="string">&quot;<span class="variable">$</span>&#123;path&#125;&quot;</span> xml1 <span class="literal">-o</span> - -- -)</span><br><span class="line">    <span class="keyword">if</span> [[ <span class="string">&quot;0&quot;</span> -<span class="type">ne</span> <span class="string">&quot;<span class="variable">$</span>?&quot;</span> ]]; then</span><br><span class="line">        content=<span class="string">&#x27;&quot;&quot;&#x27;</span></span><br><span class="line">    fi</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$content</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 mobileprovision 中提取 指定字段值</span></span><br><span class="line">extract_field_value() &#123;</span><br><span class="line">    local filename=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">    local path=<span class="string">&quot;<span class="variable">$2</span>&quot;</span></span><br><span class="line">    local val</span><br><span class="line">    val=<span class="variable">$</span>(extract_field_content <span class="string">&quot;<span class="variable">$</span>&#123;filename&#125;&quot;</span> <span class="string">&quot;<span class="variable">$</span>&#123;path&#125;&quot;</span> | plutil <span class="literal">-p</span> -- -)</span><br><span class="line">    eval <span class="string">&quot;echo \&quot;</span><span class="variable">$</span>&#123;val&#125;\<span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 mobileprovision 中提取 Entitlements，格式为 plist，内容在签名时使用</span></span><br><span class="line">extract_entitlements() &#123;</span><br><span class="line">    local filename=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">    local entitlements_val</span><br><span class="line">    entitlements_val=<span class="variable">$</span>(extract_field_content <span class="string">&quot;<span class="variable">$</span>&#123;filename&#125;&quot;</span> Entitlements)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$</span>&#123;entitlements_val&#125;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从描述文件中获取 是否为 In-House 发布文件</span></span><br><span class="line">extract_is_inhouse_profile() &#123;</span><br><span class="line">    local ret</span><br><span class="line">    ret=<span class="variable">$</span>(extract_field_value <span class="string">&quot;<span class="variable">$1</span>&quot;</span> ProvisionsAllDevices <span class="number">2</span>&gt;/dev/null || :)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$</span>&#123;ret&#125;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从描述文件中获取 BundleID</span></span><br><span class="line">extract_bundle_id() &#123;</span><br><span class="line">    extract_field_value <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="string">&#x27;Entitlements.application-identifier&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从描述文件中获取 TeamName</span></span><br><span class="line">extract_team_name() &#123;</span><br><span class="line">    extract_field_value <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="string">&#x27;TeamName&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理 Info.plist 中的信息 ======================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定版本 CFBundleShortVersionString</span></span><br><span class="line">set_short_version() &#123;</span><br><span class="line">    local info_plist=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">    local short_ver=<span class="string">&quot;<span class="variable">$2</span>&quot;</span></span><br><span class="line">    plutil <span class="operator">-replace</span> <span class="string">&#x27;CFBundleShortVersionString&#x27;</span> <span class="literal">-string</span> <span class="string">&quot;<span class="variable">$short_ver</span>&quot;</span> <span class="string">&quot;<span class="variable">$info_plist</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定 Build CFBundleVersion</span></span><br><span class="line">set_build_version() &#123;</span><br><span class="line">    local info_plist=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">    local build_ver=<span class="string">&quot;<span class="variable">$2</span>&quot;</span></span><br><span class="line">    plutil <span class="operator">-replace</span> <span class="string">&#x27;CFBundleVersion&#x27;</span> <span class="literal">-string</span> <span class="string">&quot;<span class="variable">$build_ver</span>&quot;</span> <span class="string">&quot;<span class="variable">$info_plist</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码运行中的临时变量 ===========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间戳</span></span><br><span class="line">gen_timestamp() &#123;</span><br><span class="line">    <span class="comment"># 以当前时间作为时间戳</span></span><br><span class="line">    local timestamp_cmd=<span class="string">&#x27;date +%Y%m%d%H%M%S&#x27;</span></span><br><span class="line">    local timestamp</span><br><span class="line">    timestamp=<span class="variable">$</span>(<span class="variable">$</span>&#123;timestamp_cmd&#125;)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$</span>&#123;timestamp&#125;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 ipa 解压缩目录</span></span><br><span class="line">extract_ipa_folder() &#123;</span><br><span class="line">    local timestamp</span><br><span class="line">    timestamp=<span class="variable">$</span>(gen_timestamp)</span><br><span class="line">    local IPA_FILE=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">    local folder_name</span><br><span class="line">    folder_name=<span class="string">&quot;<span class="variable">$TMP_WORKBENCH_ROOT</span>&quot;</span>/<span class="variable">$</span>(basename <span class="string">&quot;<span class="variable">$</span>&#123;IPA_FILE&#125;&quot;</span> .ipa)_<span class="variable">$</span>&#123;timestamp&#125;</span><br><span class="line">    mkdir <span class="literal">-p</span> <span class="string">&quot;<span class="variable">$TMP_WORKBENCH_ROOT</span>&quot;</span> || :</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$</span>&#123;folder_name&#125;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找匹配的描述文件 =============================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照 BundleID 查找匹配的描述文件</span></span><br><span class="line">search_mobileprovision() &#123;</span><br><span class="line">    <span class="comment"># 如果指定了描述文件目录</span></span><br><span class="line">    <span class="keyword">if</span> [[ -<span class="type">d</span> <span class="string">&quot;<span class="variable">$</span>&#123;MOBILEPROVISION_PATH&#125;&quot;</span> ]]; then</span><br><span class="line">        <span class="comment"># echo MOBILEPROVISION_PATH &quot;$&#123;MOBILEPROVISION_PATH&#125;&quot; | subl</span></span><br><span class="line">        <span class="comment"># 遍历指定目录下所有描述文件</span></span><br><span class="line">        local mobileprovision_files</span><br><span class="line">        mobileprovision_files=<span class="variable">$</span>(find <span class="string">&quot;<span class="variable">$</span>&#123;MOBILEPROVISION_PATH&#125;&quot;</span> <span class="literal">-type</span> f <span class="literal">-name</span> <span class="string">&#x27;*.mobileprovision&#x27;</span>)</span><br><span class="line">        local old_ifs=<span class="variable">$</span>&#123;IFS&#125;</span><br><span class="line">        IFS=<span class="variable">$</span><span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        local mobileprovision_files_array</span><br><span class="line">        mobileprovision_files_array=(<span class="variable">$</span>&#123;mobileprovision_files&#125;)</span><br><span class="line">        IFS=<span class="variable">$</span>&#123;old_ifs&#125;</span><br><span class="line">        <span class="comment"># 判断是否找到了内容</span></span><br><span class="line">        <span class="keyword">if</span> [[ <span class="string">&quot;0&quot;</span> -<span class="type">lt</span> <span class="string">&quot;<span class="variable">$</span>&#123;#mobileprovision_files_array[@]&#125;&quot;</span> ]]; then</span><br><span class="line">            <span class="comment"># 遍历处理</span></span><br><span class="line">            <span class="keyword">for</span> provision_file <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$</span>&#123;mobileprovision_files_array[@]&#125;&quot;</span>; <span class="keyword">do</span></span><br><span class="line">                <span class="comment"># 获取描述文件的 BundleID</span></span><br><span class="line">                local bundle_id</span><br><span class="line">                bundle_id=<span class="variable">$</span>(extract_bundle_id <span class="string">&quot;<span class="variable">$</span>&#123;provision_file&#125;&quot;</span>)</span><br><span class="line">                local is_inhouse_profile</span><br><span class="line">                is_inhouse_profile=<span class="variable">$</span>(extract_is_inhouse_profile <span class="string">&quot;<span class="variable">$</span>&#123;provision_file&#125;&quot;</span>)</span><br><span class="line">                <span class="comment"># 判断是否是 In-House 发布证书</span></span><br><span class="line">                <span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$</span>&#123;is_inhouse_profile&#125;&quot;</span> != <span class="string">&quot;1&quot;</span> ]]; then</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                fi</span><br><span class="line">                <span class="comment"># 判断是否与传入的 BundleID 匹配</span></span><br><span class="line">                <span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$</span>&#123;bundle_id&#125;&quot;</span> == <span class="string">&quot;<span class="variable">$1</span>&quot;</span> ]]; then</span><br><span class="line">                    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$</span>&#123;provision_file&#125;&quot;</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                fi</span><br><span class="line">            done</span><br><span class="line">        fi</span><br><span class="line"></span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 签名相关 ======================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除签名</span></span><br><span class="line">remove_code_signature() &#123;</span><br><span class="line">    local code_signature_path=<span class="string">&quot;<span class="variable">$1</span>/_CodeSignature&quot;</span></span><br><span class="line">    <span class="keyword">if</span> [[ -<span class="type">d</span> <span class="string">&quot;<span class="variable">$</span>&#123;code_signature_path&#125;&quot;</span> ]]; then</span><br><span class="line">        <span class="built_in">rm</span> <span class="literal">-rf</span> <span class="string">&quot;<span class="variable">$</span>&#123;code_signature_path&#125;&quot;</span></span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码签名</span></span><br><span class="line">sign_code() &#123;</span><br><span class="line">    local sign_path=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">    <span class="comment"># 删除原签名</span></span><br><span class="line">    remove_code_signature <span class="string">&quot;<span class="variable">$</span>&#123;sign_path&#125;&quot;</span></span><br><span class="line">    <span class="comment"># 获取旧的描述文件</span></span><br><span class="line">    local old_profile=<span class="string">&quot;<span class="variable">$</span>&#123;sign_path&#125;/embedded.mobileprovision&quot;</span></span><br><span class="line">    <span class="comment"># 获取原来的 BundleID</span></span><br><span class="line">    local bundle_id</span><br><span class="line">    bundle_id=<span class="variable">$</span>(extract_bundle_id <span class="string">&quot;<span class="variable">$</span>&#123;old_profile&#125;&quot;</span>)</span><br><span class="line">    <span class="comment"># 根据 BundleID 在指定目录中查找新的描述文件</span></span><br><span class="line">    local new_profile</span><br><span class="line">    <span class="comment"># 如果命令行中明确指定了描述文件</span></span><br><span class="line">    <span class="keyword">if</span> [[ -<span class="type">n</span> <span class="string">&quot;<span class="variable">$</span>&#123;MOBILEPROVISION_FILE&#125;&quot;</span> ]]; then</span><br><span class="line">        new_profile=<span class="string">&quot;<span class="variable">$</span>&#123;MOBILEPROVISION_FILE&#125;&quot;</span></span><br><span class="line">        <span class="comment"># 如果指定的描述文件不存在</span></span><br><span class="line">        <span class="keyword">if</span> [[ ! -<span class="type">f</span> <span class="string">&quot;<span class="variable">$</span>&#123;new_profile&#125;&quot;</span> ]]; then</span><br><span class="line">            <span class="built_in">echo</span> Provision profile <span class="string">&quot;<span class="variable">$</span>&#123;new_profile&#125;&quot;</span> not exists.</span><br><span class="line">            <span class="keyword">exit</span> <span class="number">1</span></span><br><span class="line">        fi</span><br><span class="line">    elif [[ -<span class="type">n</span> <span class="string">&quot;<span class="variable">$</span>&#123;MOBILEPROVISION_PATH&#125;&quot;</span> ]]; then</span><br><span class="line">        <span class="comment"># 如果命令行中没有明确指定描述文件，但明确指定了描述文件的搜索位置</span></span><br><span class="line">        <span class="comment"># 则在指定路径中搜索</span></span><br><span class="line">        new_profile=<span class="variable">$</span>(search_mobileprovision <span class="string">&quot;<span class="variable">$</span>&#123;bundle_id&#125;&quot;</span>)</span><br><span class="line">        <span class="comment"># 判断搜索描述文件的结果</span></span><br><span class="line">        <span class="keyword">if</span> [[ ! -<span class="type">f</span> <span class="string">&quot;<span class="variable">$</span>&#123;new_profile&#125;&quot;</span> ]]; then</span><br><span class="line">            <span class="built_in">echo</span> Provision profile not found.</span><br><span class="line">            <span class="keyword">exit</span> <span class="number">1</span></span><br><span class="line">        fi</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果找到了新的描述文件则替换旧的</span></span><br><span class="line">    <span class="keyword">if</span> [[ -<span class="type">n</span> <span class="string">&quot;<span class="variable">$</span>&#123;new_profile&#125;&quot;</span> ]]; then</span><br><span class="line">        <span class="built_in">cp</span> <span class="string">&quot;<span class="variable">$</span>&#123;new_profile&#125;&quot;</span> <span class="string">&quot;<span class="variable">$</span>&#123;old_profile&#125;&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment"># 如果没找到新的描述文件则用旧的</span></span><br><span class="line">        new_profile=<span class="string">&quot;<span class="variable">$</span>&#123;old_profile&#125;&quot;</span></span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># echo -e &quot;Use \&quot;\033[94;1m$&#123;new_profile&#125;\033[0m\&quot; to sign...&quot;</span></span><br><span class="line">    <span class="comment"># 从描述文件中提取 Entitlements</span></span><br><span class="line">    entitlements_content=<span class="variable">$</span>(extract_entitlements <span class="string">&quot;<span class="variable">$</span>&#123;new_profile&#125;&quot;</span>)</span><br><span class="line">    <span class="comment"># 临时文件</span></span><br><span class="line">    local tmp_entitlements_file</span><br><span class="line">    tmp_entitlements_file=<span class="variable">$</span>(mktemp)</span><br><span class="line">    <span class="comment"># 生成 entitlements 文件</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$</span>&#123;entitlements_content&#125;&quot;</span> &gt; <span class="string">&quot;<span class="variable">$</span>&#123;tmp_entitlements_file&#125;&quot;</span></span><br><span class="line">    <span class="comment"># 获取 TeamName</span></span><br><span class="line">    <span class="comment"># local team_name</span></span><br><span class="line">    <span class="comment"># team_name=$(extract_team_name &quot;$&#123;new_profile&#125;&quot;)</span></span><br><span class="line">    <span class="comment"># local sign_cert=&quot;iPhone Distribution: $&#123;team_name&#125;&quot;</span></span><br><span class="line">    local sign_cert=<span class="variable">$CERTIFICATE_NAME_FOR_SIGNING</span></span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[97;1m[Signing Information]\033[0m&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;    Bundle ID            : \033[93;1m<span class="variable">$</span>&#123;bundle_id&#125;\033[0m&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;    Provisioning Profile : \033[93;1m<span class="variable">$</span>&#123;new_profile&#125;\033[0m&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;    Signing Certificate  : \033[93;1m<span class="variable">$</span>&#123;sign_cert&#125;\033[0m&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;    entitlements.plist   : <span class="variable">$</span>&#123;tmp_entitlements_file&#125;&quot;</span></span><br><span class="line">    <span class="comment"># 签名</span></span><br><span class="line">    local sign_cmd_line=<span class="string">&#x27;codesign -f -s &#x27;</span><span class="string">&quot;\&quot;</span><span class="variable">$</span>&#123;sign_cert&#125;\<span class="string">&quot;&quot;</span><span class="string">&#x27; \\\n         --entitlements &#x27;</span><span class="string">&quot;&#x27;<span class="variable">$</span>&#123;tmp_entitlements_file&#125;&#x27;&quot;</span><span class="string">&#x27; \\\n         &#x27;</span><span class="string">&quot;&#x27;<span class="variable">$</span>&#123;sign_path&#125;&#x27;&quot;</span></span><br><span class="line">    <span class="built_in">echo</span>    <span class="string">&quot;    Command line:&quot;</span></span><br><span class="line">    <span class="built_in">echo</span>    <span class="string">&quot;-----------------------------------------------------------------------------------------------&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[92m<span class="variable">$</span>&#123;sign_cmd_line&#125;\033[0m&quot;</span></span><br><span class="line">    <span class="comment"># echo -e &quot;$&#123;sign_cmd_line&#125;&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;-----------------------------------------------------------------------------------------------&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># codesign -f -s &quot;$&#123;sign_cert&#125;&quot; --entitlements &quot;$&#123;tmp_entitlements_file&#125;&quot; &quot;$&#123;sign_path&#125;&quot;</span></span><br><span class="line">    <span class="comment"># local result=$(eval &quot;$&#123;sign_cmd_line&#125;&quot; 2&gt;&amp;1)</span></span><br><span class="line">    local result</span><br><span class="line">    result=<span class="variable">$</span>(codesign <span class="operator">-f</span> <span class="literal">-s</span> <span class="string">&quot;<span class="variable">$</span>&#123;sign_cert&#125;&quot;</span> -<span class="literal">-entitlements</span> <span class="string">&quot;<span class="variable">$</span>&#123;tmp_entitlements_file&#125;&quot;</span> <span class="string">&quot;<span class="variable">$</span>&#123;sign_path&#125;&quot;</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;    Execution result     : \033[94;1m<span class="variable">$</span>&#123;result&#125;\033[0m&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># echo &quot;======&quot;</span></span><br><span class="line">    <span class="built_in">rm</span> <span class="string">&quot;<span class="variable">$</span>&#123;tmp_entitlements_file&#125;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 操作系统判断 ==================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查操作系统名称是否为 Darwin</span></span><br><span class="line">check_os_type () &#123;</span><br><span class="line">    local os_name</span><br><span class="line">    os_name=<span class="variable">$</span>(uname <span class="literal">-s</span>)</span><br><span class="line">    test <span class="string">&#x27;Darwin&#x27;</span> == <span class="string">&quot;<span class="variable">$os_name</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查操作系统主版本是否大于 19</span></span><br><span class="line">check_os_release () &#123;</span><br><span class="line">    local os_release</span><br><span class="line">    os_release=<span class="variable">$</span>(uname <span class="literal">-r</span>)</span><br><span class="line">    <span class="comment"># 以 . 作为分隔符，将版本字符串拆分为数组，取数组中的第一个值作为主版本号</span></span><br><span class="line">    <span class="comment"># 其中 // 和 / 的区别在于，两个斜杠替换所有指定字符，一个斜杠只替换出现的第一个字符</span></span><br><span class="line">    <span class="comment"># 参考 https://blog.csdn.net/github_33736971/article/details/53980123</span></span><br><span class="line">    local str_arr=(<span class="variable">$</span>&#123;os_release//./<span class="string">&#x27; &#x27;</span>&#125;)</span><br><span class="line">    local main_ver=<span class="variable">$</span>&#123;str_arr[<span class="number">0</span>]&#125;</span><br><span class="line">    test <span class="number">19</span> <span class="operator">-lt</span> <span class="variable">$main_ver</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 ipa 中直接提取部分信息 ======================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 mobileprovision 中提取 指定字段内容</span></span><br><span class="line">extract_field_content_from_plist_content() &#123;</span><br><span class="line">    local plist_content=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">    local path=<span class="string">&quot;<span class="variable">$2</span>&quot;</span></span><br><span class="line">    local content</span><br><span class="line">    content=<span class="variable">$</span>(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$plist_content</span>&quot;</span> | plutil <span class="literal">-extract</span> <span class="string">&quot;<span class="variable">$</span>&#123;path&#125;&quot;</span> xml1 <span class="literal">-o</span> - -- -)</span><br><span class="line">    <span class="keyword">if</span> [[ <span class="string">&quot;0&quot;</span> -<span class="type">ne</span> <span class="string">&quot;<span class="variable">$</span>?&quot;</span> ]]; then</span><br><span class="line">        content=<span class="string">&#x27;&quot;&quot;&#x27;</span></span><br><span class="line">    fi</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$content</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取数组字段值，以 JSON 数组形式展示</span></span><br><span class="line">extract_field_value_array_from_plist_content() &#123;</span><br><span class="line">    local plist_content=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">    local path=<span class="string">&quot;<span class="variable">$2</span>&quot;</span></span><br><span class="line">    local val</span><br><span class="line">    val=<span class="variable">$</span>(extract_field_content_from_plist_content <span class="string">&quot;<span class="variable">$</span>&#123;plist_content&#125;&quot;</span> <span class="string">&quot;<span class="variable">$</span>&#123;path&#125;&quot;</span> | plutil <span class="literal">-convert</span> json <span class="literal">-o</span> - -- -)</span><br><span class="line">    <span class="keyword">if</span> [[ <span class="string">&quot;0&quot;</span> -<span class="type">ne</span> <span class="string">&quot;<span class="variable">$</span>?&quot;</span> ]]; then</span><br><span class="line">        val=<span class="string">&#x27;[]&#x27;</span></span><br><span class="line">    fi</span><br><span class="line">    eval <span class="string">&quot;echo \&quot;</span><span class="variable">$</span>&#123;val&#125;\<span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 mobileprovision 中提取 指定字段值</span></span><br><span class="line">extract_field_value_from_plist_content() &#123;</span><br><span class="line">    local plist_content=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">    local path=<span class="string">&quot;<span class="variable">$2</span>&quot;</span></span><br><span class="line">    local val</span><br><span class="line">    val=<span class="variable">$</span>(extract_field_content_from_plist_content <span class="string">&quot;<span class="variable">$</span>&#123;plist_content&#125;&quot;</span> <span class="string">&quot;<span class="variable">$</span>&#123;path&#125;&quot;</span> | plutil <span class="literal">-p</span> -- -)</span><br><span class="line">    eval <span class="string">&quot;echo \&quot;</span><span class="variable">$</span>&#123;val&#125;\<span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 ipa 信息</span></span><br><span class="line">ipa_basic_info() &#123;</span><br><span class="line"></span><br><span class="line">    local ipa_file=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">    local INFO_PLIST</span><br><span class="line">    INFO_PLIST=<span class="variable">$</span>(unzip <span class="literal">-p</span> <span class="string">&quot;<span class="variable">$ipa_file</span>&quot;</span> <span class="string">&quot;Payload/*.app/Info.plist&quot;</span> | plutil <span class="literal">-convert</span> xml1 <span class="literal">-o</span> - -- -)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Name</span></span><br><span class="line">    local bundle_name</span><br><span class="line">    bundle_name=<span class="variable">$</span>(extract_field_value_from_plist_content <span class="string">&quot;<span class="variable">$INFO_PLIST</span>&quot;</span> CFBundleName)</span><br><span class="line">    local display_name</span><br><span class="line">    display_name=<span class="variable">$</span>(extract_field_value_from_plist_content <span class="string">&quot;<span class="variable">$INFO_PLIST</span>&quot;</span> CFBundleDisplayName)</span><br><span class="line">    <span class="built_in">echo</span> Name: ^<span class="string">&quot;<span class="variable">$bundle_name</span>(<span class="variable">$display_name</span>)&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Version</span></span><br><span class="line">    local short_ver</span><br><span class="line">    short_ver=<span class="variable">$</span>(extract_field_value_from_plist_content <span class="string">&quot;<span class="variable">$INFO_PLIST</span>&quot;</span> CFBundleShortVersionString)</span><br><span class="line">    local bundle_ver</span><br><span class="line">    bundle_ver=<span class="variable">$</span>(extract_field_value_from_plist_content <span class="string">&quot;<span class="variable">$INFO_PLIST</span>&quot;</span> CFBundleVersion)</span><br><span class="line">    <span class="built_in">echo</span> Version: ^<span class="string">&quot;<span class="variable">$short_ver</span>(<span class="variable">$bundle_ver</span>)&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># BundleID</span></span><br><span class="line">    local bundl_id</span><br><span class="line">    bundl_id=<span class="variable">$</span>(extract_field_value_from_plist_content <span class="string">&quot;<span class="variable">$INFO_PLIST</span>&quot;</span> CFBundleIdentifier)</span><br><span class="line">    <span class="built_in">echo</span> Bundle ID: ^<span class="variable">$bundl_id</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># SDK</span></span><br><span class="line">    local sdk_name</span><br><span class="line">    sdk_name=<span class="variable">$</span>(extract_field_value_from_plist_content <span class="string">&quot;<span class="variable">$INFO_PLIST</span>&quot;</span> DTSDKName)</span><br><span class="line">    local sdk_ver</span><br><span class="line">    sdk_ver=<span class="variable">$</span>(extract_field_value_from_plist_content <span class="string">&quot;<span class="variable">$INFO_PLIST</span>&quot;</span> DTSDKBuild)</span><br><span class="line">    <span class="built_in">echo</span> SDK: ^<span class="string">&quot;<span class="variable">$sdk_name</span>(<span class="variable">$sdk_ver</span>)&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># MinimumOSVersion</span></span><br><span class="line">    local min_os</span><br><span class="line">    min_os=<span class="variable">$</span>(extract_field_value_from_plist_content <span class="string">&quot;<span class="variable">$INFO_PLIST</span>&quot;</span> MinimumOSVersion)</span><br><span class="line">    <span class="built_in">echo</span> Minimum OS Version: ^<span class="variable">$min_os</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># NSAppTransportSecurity</span></span><br><span class="line">    local allows_arbitrary_loads</span><br><span class="line">    allows_arbitrary_loads=<span class="variable">$</span>(extract_field_value_from_plist_content <span class="string">&quot;<span class="variable">$INFO_PLIST</span>&quot;</span> NSAppTransportSecurity.NSAllowsArbitraryLoads)</span><br><span class="line">    <span class="built_in">echo</span> Allows Arbitrary Loads: ^<span class="variable">$allows_arbitrary_loads</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Xcode</span></span><br><span class="line">    local xcode_ver</span><br><span class="line">    xcode_ver=<span class="variable">$</span>(extract_field_value_from_plist_content <span class="string">&quot;<span class="variable">$INFO_PLIST</span>&quot;</span> DTXcode)</span><br><span class="line">    local xcode_build</span><br><span class="line">    xcode_build=<span class="variable">$</span>(extract_field_value_from_plist_content <span class="string">&quot;<span class="variable">$INFO_PLIST</span>&quot;</span> DTXcodeBuild)</span><br><span class="line">    <span class="built_in">echo</span> Xcode: ^<span class="string">&quot;<span class="variable">$xcode_ver</span>(<span class="variable">$xcode_build</span>)&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Machine</span></span><br><span class="line">    local machine_os_build</span><br><span class="line">    machine_os_build=<span class="variable">$</span>(extract_field_value_from_plist_content <span class="string">&quot;<span class="variable">$INFO_PLIST</span>&quot;</span> BuildMachineOSBuild)</span><br><span class="line">    <span class="built_in">echo</span> Build Machine OS Build: ^<span class="variable">$machine_os_build</span></span><br><span class="line"></span><br><span class="line">    local back_modes</span><br><span class="line">    back_modes=<span class="variable">$</span>(extract_field_value_array_from_plist_content <span class="string">&quot;<span class="variable">$INFO_PLIST</span>&quot;</span> UIBackgroundModes)</span><br><span class="line">    eval <span class="string">&quot;echo Background Modes: ^\&quot;</span><span class="variable">$back_modes</span>\<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 provision 信息</span></span><br><span class="line">provision_info() &#123;</span><br><span class="line">    local ipa_file=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">    local PLIST_IN_MOBILEPROVISION</span><br><span class="line">    PLIST_IN_MOBILEPROVISION=<span class="variable">$</span>(unzip <span class="literal">-p</span> <span class="string">&quot;<span class="variable">$ipa_file</span>&quot;</span> <span class="string">&quot;Payload/*.app/embedded.mobileprovision&quot;</span> | security cms <span class="literal">-D</span>)</span><br><span class="line"></span><br><span class="line">    local provision_app_id_name</span><br><span class="line">    provision_app_id_name=<span class="variable">$</span>(extract_field_value_from_plist_content <span class="string">&quot;<span class="variable">$PLIST_IN_MOBILEPROVISION</span>&quot;</span> AppIDName)</span><br><span class="line">    <span class="built_in">echo</span> App ID Name: ^<span class="variable">$provision_app_id_name</span></span><br><span class="line"></span><br><span class="line">    local provision_name</span><br><span class="line">    provision_name=<span class="variable">$</span>(extract_field_value_from_plist_content <span class="string">&quot;<span class="variable">$PLIST_IN_MOBILEPROVISION</span>&quot;</span> Name)</span><br><span class="line">    <span class="built_in">echo</span> Name: ^<span class="variable">$provision_name</span></span><br><span class="line"></span><br><span class="line">    local provision_platform</span><br><span class="line">    provision_platform=<span class="variable">$</span>(extract_field_value_array_from_plist_content <span class="string">&quot;<span class="variable">$PLIST_IN_MOBILEPROVISION</span>&quot;</span> Platform)</span><br><span class="line">    <span class="built_in">echo</span> Platform: ^<span class="variable">$provision_platform</span></span><br><span class="line"></span><br><span class="line">    local provision_is_xcode_managed</span><br><span class="line">    provision_is_xcode_managed=<span class="variable">$</span>(extract_field_value_from_plist_content <span class="string">&quot;<span class="variable">$PLIST_IN_MOBILEPROVISION</span>&quot;</span> IsXcodeManaged)</span><br><span class="line">    <span class="built_in">echo</span> Is Xcode Managed: ^<span class="variable">$provision_is_xcode_managed</span></span><br><span class="line"></span><br><span class="line">    local provision_creation_date</span><br><span class="line">    provision_creation_date=<span class="variable">$</span>(extract_field_value_from_plist_content <span class="string">&quot;<span class="variable">$PLIST_IN_MOBILEPROVISION</span>&quot;</span> CreationDate)</span><br><span class="line">    <span class="built_in">echo</span> Creation Date: ^<span class="variable">$provision_creation_date</span></span><br><span class="line"></span><br><span class="line">    local provision_expiration_date</span><br><span class="line">    provision_expiration_date=<span class="variable">$</span>(extract_field_value_from_plist_content <span class="string">&quot;<span class="variable">$PLIST_IN_MOBILEPROVISION</span>&quot;</span> ExpirationDate)</span><br><span class="line">    <span class="built_in">echo</span> Expiration Date: ^<span class="variable">$provision_expiration_date</span></span><br><span class="line"></span><br><span class="line">    local provision_team_identifier</span><br><span class="line">    provision_team_identifier=<span class="variable">$</span>(extract_field_value_from_plist_content <span class="string">&quot;<span class="variable">$PLIST_IN_MOBILEPROVISION</span>&quot;</span> <span class="string">&#x27;Entitlements.com\.apple\.developer\.team-identifier&#x27;</span>)</span><br><span class="line">    <span class="built_in">echo</span> Team Identifier: ^<span class="variable">$provision_team_identifier</span></span><br><span class="line"></span><br><span class="line">    local provision_team_name</span><br><span class="line">    provision_team_name=<span class="variable">$</span>(extract_field_value_from_plist_content <span class="string">&quot;<span class="variable">$PLIST_IN_MOBILEPROVISION</span>&quot;</span> TeamName)</span><br><span class="line">    <span class="built_in">echo</span> Team Name: ^<span class="variable">$provision_team_name</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 证书 信息</span></span><br><span class="line">certificate_info() &#123;</span><br><span class="line">    local ipa_file=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">    local PLIST_IN_MOBILEPROVISION</span><br><span class="line">    PLIST_IN_MOBILEPROVISION=<span class="variable">$</span>(extract_plist_in_embedded_mobileprovision <span class="string">&quot;<span class="variable">$ipa_file</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第一个证书的 Base64 编码</span></span><br><span class="line">    local dev_cer0</span><br><span class="line">    dev_cer0=<span class="variable">$</span>(extract_field_content_from_plist_content <span class="string">&quot;<span class="variable">$PLIST_IN_MOBILEPROVISION</span>&quot;</span> <span class="string">&#x27;DeveloperCertificates.0&#x27;</span> | tr <span class="literal">-d</span> <span class="string">&#x27;\n&#x27;</span> | sed <span class="literal">-r</span> <span class="string">&#x27;s/.*&lt;data&gt;(.*)&lt;\/data&gt;.*/\1/g&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 起始有效期</span></span><br><span class="line">    local cert_start_date</span><br><span class="line">    cert_start_date=<span class="variable">$</span>(<span class="built_in">echo</span> <span class="variable">$dev_cer0</span> | base64 -<span class="literal">-decode</span> | openssl x509 <span class="literal">-inform</span> der <span class="literal">-noout</span> <span class="literal">-startdate</span> | sed <span class="literal">-r</span> <span class="string">&#x27;s/notBefore=(.*)/\1/g&#x27;</span>)</span><br><span class="line">    <span class="built_in">echo</span> Not Before: ^<span class="variable">$cert_start_date</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 结束有效期</span></span><br><span class="line">    local cert_end_date</span><br><span class="line">    cert_end_date=<span class="variable">$</span>(<span class="built_in">echo</span> <span class="variable">$dev_cer0</span> | base64 -<span class="literal">-decode</span> | openssl x509 <span class="literal">-inform</span> der <span class="literal">-noout</span> <span class="literal">-enddate</span> | sed <span class="literal">-r</span> <span class="string">&#x27;s/notAfter=(.*)/\1/g&#x27;</span>)</span><br><span class="line">    <span class="built_in">echo</span> Not After: ^<span class="variable">$cert_end_date</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 主题</span></span><br><span class="line">    local cert_subject</span><br><span class="line">    cert_subject=<span class="variable">$</span>(<span class="built_in">echo</span> <span class="variable">$dev_cer0</span> | base64 -<span class="literal">-decode</span> | openssl x509 <span class="literal">-inform</span> der <span class="literal">-noout</span> <span class="literal">-subject</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从 主题 中提取 UID</span></span><br><span class="line">    local cert_uid</span><br><span class="line">    cert_uid=<span class="variable">$</span>(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$cert_subject</span>&quot;</span> | sed <span class="literal">-r</span> <span class="string">&#x27;s/.*UID=(.*)?\/CN=.*/\1/g&#x27;</span>)</span><br><span class="line">    <span class="built_in">echo</span> UID: ^<span class="variable">$cert_uid</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从 主题 中提取 CN</span></span><br><span class="line">    local cert_cn</span><br><span class="line">    cert_cn=<span class="variable">$</span>(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$cert_subject</span>&quot;</span> | sed <span class="literal">-r</span> <span class="string">&#x27;s/.*CN=(.*)?\/OU=.*/\1/g&#x27;</span>)</span><br><span class="line">    <span class="built_in">echo</span> Common Name: ^<span class="variable">$cert_cn</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extract_plist_in_embedded_mobileprovision() &#123;</span><br><span class="line">    local ipa_file=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">    unzip <span class="literal">-p</span> <span class="string">&quot;<span class="variable">$ipa_file</span>&quot;</span> <span class="string">&quot;Payload/*.app/embedded.mobileprovision&quot;</span> | security cms <span class="literal">-D</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">show_package_info () &#123;</span><br><span class="line"></span><br><span class="line">    local ipa_file=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[97;1miOS App Package:\033[0m&quot;</span> <span class="string">&quot;<span class="variable">$ipa_file</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[97;1m[App Information]\033[0m&quot;</span></span><br><span class="line">    ipa_basic_info <span class="string">&quot;<span class="variable">$ipa_file</span>&quot;</span> | column <span class="literal">-ts</span>^</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[97;1m[Provisioning Information]\033[0m&quot;</span></span><br><span class="line">    provision_info <span class="string">&quot;<span class="variable">$ipa_file</span>&quot;</span> | column <span class="literal">-ts</span>^</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[97;1m[Certificate Information]\033[0m&quot;</span></span><br><span class="line">    certificate_info <span class="string">&quot;<span class="variable">$ipa_file</span>&quot;</span> | column <span class="literal">-ts</span>^</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># UI ===========================================================================</span></span><br><span class="line"><span class="comment"># 选择证书</span></span><br><span class="line">select_certificate() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取所有可用于签名的证书</span></span><br><span class="line">    local certs</span><br><span class="line">    certs=<span class="variable">$</span>(security <span class="built_in">find-identity</span> <span class="literal">-v</span> <span class="literal">-p</span> codesigning)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算有效行数</span></span><br><span class="line">    local line_count=<span class="variable">$</span>(( <span class="variable">$</span>(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$certs</span>&quot;</span> | wc <span class="literal">-l</span>) - <span class="number">1</span> ))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除无用行</span></span><br><span class="line">    certs=<span class="variable">$</span>(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$certs</span>&quot;</span> | head <span class="literal">-n</span> <span class="variable">$line_count</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示所有可用于签名的证书</span></span><br><span class="line">    local prompt_text</span><br><span class="line">    prompt_text=<span class="variable">$</span>(<span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;<span class="variable">$</span>&#123;certs&#125;\nSelect a certificate for signing: &quot;</span>)</span><br><span class="line"></span><br><span class="line">    local selected_cert=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> [[ -<span class="type">z</span> <span class="string">&quot;<span class="variable">$selected_cert</span>&quot;</span> ]]; <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">        read <span class="literal">-p</span> <span class="string">&quot;<span class="variable">$prompt_text</span>&quot;</span> sel_cert_id</span><br><span class="line"></span><br><span class="line">        prompt_text=<span class="string">&#x27;Select a certificate for signing: &#x27;</span></span><br><span class="line"></span><br><span class="line">        search_text=<span class="string">&quot;^  <span class="variable">$</span>&#123;sel_cert_id&#125;)&quot;</span></span><br><span class="line"></span><br><span class="line">        selected_cert=<span class="variable">$</span>(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$certs</span>&quot;</span> | grep <span class="string">&quot;<span class="variable">$search_text</span>&quot;</span>)</span><br><span class="line">    done</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$selected_cert</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># =================================== 主程序 ===================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断操作系统类型</span></span><br><span class="line">check_os_type</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$</span>?&quot;</span> -<span class="type">ne</span> <span class="string">&quot;0&quot;</span> ]]; then</span><br><span class="line">    <span class="built_in">echo</span> The OS must be <span class="string">&#x27;Darwin&#x27;</span>.</span><br><span class="line">    <span class="keyword">exit</span> <span class="number">1</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断操作系统 release 版本</span></span><br><span class="line">check_os_release</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$</span>?&quot;</span> -<span class="type">ne</span> <span class="string">&quot;0&quot;</span> ]]; then</span><br><span class="line">    <span class="built_in">echo</span> The OS release version at lease <span class="string">&#x27;Darwin 11&#x27;</span>.</span><br><span class="line">    <span class="keyword">exit</span> <span class="number">1</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录开始时间</span></span><br><span class="line">start_time=<span class="variable">$</span>(date +%s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定临时工作目录的位置</span></span><br><span class="line">TMP_WORKBENCH_ROOT=<span class="string">&#x27;/tmp/ipa_signer&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数个数</span></span><br><span class="line"><span class="comment"># echo $#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化变量</span></span><br><span class="line"><span class="comment"># ipa 文件</span></span><br><span class="line">IPA_FILE=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 指定的 Mobile Provision Profile 目录</span></span><br><span class="line">MOBILEPROVISION_PATH=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 指定的 Mobile Provision Profile 文件</span></span><br><span class="line">MOBILEPROVISION_FILE=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 版本号</span></span><br><span class="line">IPA_SHORT_VERSION=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># Build 号</span></span><br><span class="line">IPA_BUILD_VERSION=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 只显示 安装包 信息</span></span><br><span class="line">SHOW_IPA_INFO_ONLY=false</span><br><span class="line"><span class="comment"># 是否需要选择证书</span></span><br><span class="line">NEED_SELECT_CERTIFICATE=false</span><br><span class="line"><span class="comment"># 只提取 embedded.mobileprovision 中的 plist</span></span><br><span class="line">EXTRACT_PLIST_IN_EMBEDDED_MOBILEPROVISION_ONLY=false</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理脚本参数</span></span><br><span class="line"><span class="comment"># -p Mobile Provision Profile 文件</span></span><br><span class="line"><span class="comment"># -s Mobile Provision Profile 所在目录</span></span><br><span class="line"><span class="comment"># -v 版本</span></span><br><span class="line"><span class="comment"># -b Build 信息</span></span><br><span class="line"><span class="comment"># -i 只显示 ipa 信息，然后退出</span></span><br><span class="line"><span class="comment"># -c 选择证书</span></span><br><span class="line"><span class="comment"># -e 只提取 embedded.mobileprovision 中的 plist</span></span><br><span class="line"><span class="keyword">while</span> getopts <span class="string">&quot;:s:p:v:b:ice&quot;</span> opt</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    case <span class="string">&quot;<span class="variable">$opt</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">        <span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">            MOBILEPROVISION_PATH=<span class="string">&quot;<span class="variable">$OPTARG</span>&quot;</span></span><br><span class="line">            <span class="comment"># 在通过命令行明确指定描述文件搜索路径的时候，要求选择证书</span></span><br><span class="line">            NEED_SELECT_CERTIFICATE=true</span><br><span class="line">            ;;</span><br><span class="line">        <span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">            MOBILEPROVISION_FILE=<span class="string">&quot;<span class="variable">$OPTARG</span>&quot;</span></span><br><span class="line">            <span class="comment"># 在通过命令行明确指定描述文件的时候，要求选择证书</span></span><br><span class="line">            NEED_SELECT_CERTIFICATE=true</span><br><span class="line">            ;;</span><br><span class="line">        <span class="string">&#x27;v&#x27;</span>)</span><br><span class="line">            IPA_SHORT_VERSION=<span class="string">&quot;<span class="variable">$OPTARG</span>&quot;</span></span><br><span class="line">            ;;</span><br><span class="line">        <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">            IPA_BUILD_VERSION=<span class="string">&quot;<span class="variable">$OPTARG</span>&quot;</span></span><br><span class="line">            ;;</span><br><span class="line">        <span class="string">&#x27;i&#x27;</span>)</span><br><span class="line">            SHOW_IPA_INFO_ONLY=true</span><br><span class="line">            ;;</span><br><span class="line">        <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">            NEED_SELECT_CERTIFICATE=true</span><br><span class="line">            ;;</span><br><span class="line">        <span class="string">&#x27;e&#x27;</span>)</span><br><span class="line">            EXTRACT_PLIST_IN_EMBEDDED_MOBILEPROVISION_ONLY=true</span><br><span class="line">            ;;</span><br><span class="line">        ?)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;Unknown arguments.&quot;</span></span><br><span class="line">            <span class="keyword">exit</span> <span class="number">1</span></span><br><span class="line">            ;;</span><br><span class="line">    esac</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除已解析的参数</span></span><br><span class="line">shift <span class="variable">$</span>((OPTIND<span class="literal">-1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># ipa 文件</span></span><br><span class="line">IPA_FILE=<span class="variable">$</span>&#123;<span class="number">1</span>-<span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 没有指定 ipa 文件</span></span><br><span class="line"><span class="keyword">if</span> [[ -<span class="type">z</span> <span class="string">&quot;<span class="variable">$</span>&#123;IPA_FILE&#125;&quot;</span> ]]; then</span><br><span class="line">    <span class="built_in">cat</span> &lt;&lt; EOF</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  <span class="variable">$</span>(basename <span class="string">&quot;<span class="variable">$0</span>&quot;</span>) [<span class="type">options</span>] &lt;ipa_file&gt;</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  <span class="literal">-i</span>                                 Show ipa information only.</span><br><span class="line">  <span class="literal">-c</span>                                 Choose a certificate <span class="keyword">for</span> signing.</span><br><span class="line">  <span class="literal">-e</span>                                 Extract <span class="string">&#x27;plist&#x27;</span> content from <span class="string">&#x27;embedded.mobileprovision&#x27;</span> file.</span><br><span class="line">  <span class="literal">-p</span> &lt;provisioning_profile_file&gt;     Choose a provision profile <span class="keyword">for</span> signing.</span><br><span class="line">  <span class="literal">-s</span> &lt;provisioning_profiles_folder&gt;  Specify the directory to search <span class="keyword">for</span> the mobile provision profile.</span><br><span class="line">  <span class="literal">-v</span> &lt;version&gt;                       Specify the <span class="string">&#x27;Bundle version string (CFBundleShortVersionString)&#x27;</span> of the ipa file.</span><br><span class="line">  <span class="literal">-b</span> &lt;build_version&gt;                 Specify the <span class="string">&#x27;Bundle version (CFBundleVersion)&#x27;</span> of the ipa file.</span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line">    <span class="keyword">exit</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="comment"># ipa 文件不存在</span></span><br><span class="line"><span class="keyword">if</span> [[ ! -<span class="type">f</span> <span class="string">&quot;<span class="variable">$</span>&#123;IPA_FILE&#125;&quot;</span> ]]; then</span><br><span class="line">    <span class="built_in">echo</span> File not exists.</span><br><span class="line">    <span class="keyword">exit</span> <span class="number">1</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从安装包的 embedded.mobileprovision 中提取 plist</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$EXTRACT_PLIST_IN_EMBEDDED_MOBILEPROVISION_ONLY</span> == <span class="type">true</span> ]]; then</span><br><span class="line">    extract_plist_in_embedded_mobileprovision <span class="string">&quot;<span class="variable">$</span>&#123;IPA_FILE&#125;&quot;</span></span><br><span class="line">    <span class="keyword">exit</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment"># 获取原始 ipa 签名证书信息</span></span><br><span class="line">    ORIGINAL_CERTIFICATE_NAME=<span class="variable">$</span>(certificate_info  <span class="string">&quot;<span class="variable">$</span>&#123;IPA_FILE&#125;&quot;</span> | grep <span class="string">&#x27;Common Name: ^&#x27;</span> | sed <span class="literal">-r</span> <span class="string">&#x27;s/Common Name: \^(.*)/\1/g&#x27;</span>)</span><br><span class="line">    CERTIFICATE_NAME_FOR_SIGNING=<span class="variable">$ORIGINAL_CERTIFICATE_NAME</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 签名前安装包信息</span></span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    show_package_info <span class="string">&quot;<span class="variable">$</span>&#123;IPA_FILE&#125;&quot;</span></span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果只显示 ipa 信息则退出</span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$SHOW_IPA_INFO_ONLY</span> == <span class="type">true</span> ]]; then</span><br><span class="line">        <span class="keyword">exit</span></span><br><span class="line">    fi</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> ---------------------------------------------------------------------------</span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择证书</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$NEED_SELECT_CERTIFICATE</span> == <span class="type">true</span> ]]; then</span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[97;1mCertificates List:\033[0m&quot;</span></span><br><span class="line">    CERTIFICATE_NAME_FOR_SIGNING=<span class="variable">$</span>(select_certificate)</span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[93;1m<span class="variable">$</span>&#123;CERTIFICATE_NAME_FOR_SIGNING&#125;\033[0m&quot;</span></span><br><span class="line">    <span class="comment"># 获取证书名称，已不再使用，仅保留获取方式，备查</span></span><br><span class="line">    <span class="comment"># CERTIFICATE_NAME_FOR_SIGNING=$(echo &quot;$CERTIFICATE_NAME_FOR_SIGNING&quot; | sed -r &#x27;s/.*&quot;(.*)&quot;/\1/g&#x27;)</span></span><br><span class="line">    <span class="comment"># 获取证书 ID</span></span><br><span class="line">    CERTIFICATE_NAME_FOR_SIGNING=<span class="variable">$</span>(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$CERTIFICATE_NAME_FOR_SIGNING</span>&quot;</span> | sed <span class="literal">-r</span> <span class="string">&#x27;s/.*\) (.*) &quot;.*&quot;/\1/g&#x27;</span>)</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取解压缩目录</span></span><br><span class="line">extract_path=<span class="variable">$</span>(extract_ipa_folder <span class="string">&quot;<span class="variable">$</span>&#123;IPA_FILE&#125;&quot;</span>)</span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Extracting &#x27;<span class="variable">$</span>&#123;IPA_FILE&#125;&#x27;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;to         &#x27;<span class="variable">$</span>&#123;extract_path&#125;/&#x27;...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压缩</span></span><br><span class="line">unzip <span class="literal">-q</span> <span class="string">&quot;<span class="variable">$</span>&#123;IPA_FILE&#125;&quot;</span> <span class="literal">-d</span> <span class="string">&quot;<span class="variable">$</span>&#123;extract_path&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Payload 目录</span></span><br><span class="line">payload_path=<span class="string">&quot;<span class="variable">$</span>&#123;extract_path&#125;/Payload&quot;</span></span><br><span class="line"><span class="comment"># App 目录</span></span><br><span class="line">app_path=<span class="string">&quot;<span class="variable">$</span>&#123;payload_path&#125;/&quot;</span><span class="variable">$</span>(<span class="built_in">ls</span> <span class="literal">-C1</span> <span class="string">&quot;<span class="variable">$</span>&#123;payload_path&#125;&quot;</span> | head <span class="literal">-n</span> <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取扩展所在目录</span></span><br><span class="line">plugins_path=<span class="string">&quot;<span class="variable">$</span>&#123;app_path&#125;/PlugIns&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果存在扩展目录则处理</span></span><br><span class="line"><span class="keyword">if</span> [[ -<span class="type">d</span> <span class="string">&quot;<span class="variable">$</span>&#123;plugins_path&#125;&quot;</span> ]]; then</span><br><span class="line">    <span class="comment"># 列出扩展</span></span><br><span class="line">    plugins=<span class="variable">$</span>(find <span class="string">&quot;<span class="variable">$</span>&#123;plugins_path&#125;&quot;</span> <span class="literal">-type</span> d <span class="literal">-name</span> <span class="string">&#x27;*.appex&#x27;</span>)</span><br><span class="line">    old_ifs=<span class="variable">$</span>&#123;IFS&#125;</span><br><span class="line">    IFS=<span class="variable">$</span><span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    plugins=(<span class="variable">$</span>&#123;plugins&#125;)</span><br><span class="line">    IFS=<span class="variable">$</span>&#123;old_ifs&#125;</span><br><span class="line">    <span class="comment"># 遍历扩展，为每个扩展签名</span></span><br><span class="line">    <span class="keyword">for</span> plugin <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$</span>&#123;plugins[@]&#125;&quot;</span>; <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Signing extension \&quot;</span><span class="variable">$</span>&#123;plugin&#125;\<span class="string">&quot;...&quot;</span></span><br><span class="line">        sign_code <span class="string">&quot;<span class="variable">$</span>&#123;plugin&#125;&quot;</span></span><br><span class="line">    done</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定主程序版本</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-n</span> <span class="string">&#x27;Specify the main app version:&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定 Version</span></span><br><span class="line"><span class="keyword">if</span> [[ -<span class="type">n</span> <span class="string">&quot;<span class="variable">$</span>&#123;IPA_SHORT_VERSION&#125;&quot;</span> ]]; then</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;  Version(CFBundleShortVersionString)=<span class="variable">$</span>&#123;IPA_SHORT_VERSION&#125;&quot;</span></span><br><span class="line">    set_short_version <span class="string">&quot;<span class="variable">$</span>&#123;app_path&#125;/Info.plist&quot;</span> <span class="string">&quot;<span class="variable">$</span>&#123;IPA_SHORT_VERSION&#125;&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27; [N/A]&#x27;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定 Build</span></span><br><span class="line"><span class="keyword">if</span> [[ -<span class="type">n</span> <span class="string">&quot;<span class="variable">$</span>&#123;IPA_BUILD_VERSION&#125;&quot;</span> ]]; then</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;  Build(CFBundleVersion)=<span class="variable">$</span>&#123;IPA_BUILD_VERSION&#125;&quot;</span></span><br><span class="line">    set_build_version <span class="string">&quot;<span class="variable">$</span>&#123;app_path&#125;/Info.plist&quot;</span> <span class="string">&quot;<span class="variable">$</span>&#123;IPA_BUILD_VERSION&#125;&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为主程序签名</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;Signing application \033[93;1m<span class="variable">$</span>&#123;app_path&#125;/\033[0m...&quot;</span></span><br><span class="line">sign_code <span class="string">&quot;<span class="variable">$</span>&#123;app_path&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新 ipa 文件名</span></span><br><span class="line">new_ipafile=<span class="variable">$</span>(dirname <span class="string">&quot;<span class="variable">$</span>&#123;IPA_FILE&#125;&quot;</span>)/<span class="variable">$</span>(basename <span class="string">&quot;<span class="variable">$</span>&#123;IPA_FILE&#125;&quot;</span> .ipa)_sign_<span class="variable">$</span>(gen_timestamp).ipa</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;Packing \033[93;1m<span class="variable">$</span>&#123;new_ipafile&#125;\033[0m...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重签名后的 ipa 文件（临时）</span></span><br><span class="line">resigned_ipa=<span class="string">&quot;<span class="variable">$</span>&#123;extract_path&#125;/resigned.ipa&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入工作目录，zip 命令只能在这个目录下工作，否则压缩包内会带上完整路径</span></span><br><span class="line"><span class="built_in">pushd</span> <span class="string">&quot;<span class="variable">$</span>&#123;extract_path&#125;&quot;</span> &gt; /dev/null</span><br><span class="line">zip <span class="literal">-q</span> <span class="literal">-r</span> <span class="string">&quot;<span class="variable">$</span>&#123;resigned_ipa&#125;&quot;</span> <span class="string">&quot;Payload&quot;</span></span><br><span class="line"><span class="built_in">popd</span> &gt; /dev/null</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于 /tmp 目录作为工作目录，导致文件权限有些问题，所以不能使用 mv 命令</span></span><br><span class="line"><span class="comment"># 而是需要 cp 命令将签名后的文件复制到指定位置</span></span><br><span class="line"><span class="built_in">cp</span> <span class="string">&quot;<span class="variable">$</span>&#123;resigned_ipa&#125;&quot;</span> <span class="string">&quot;<span class="variable">$</span>&#123;new_ipafile&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除临时文件，清理工作区</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-n</span> <span class="string">&quot;Clearing workspace...&quot;</span></span><br><span class="line"><span class="built_in">rm</span> <span class="literal">-rf</span> <span class="string">&quot;<span class="variable">$TMP_WORKBENCH_ROOT</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> OK.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 签名后安装包信息</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line">show_package_info <span class="string">&quot;<span class="variable">$</span>&#123;new_ipafile&#125;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> ---------------------------------------------------------------------------</span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结束时间</span></span><br><span class="line">stop_time=<span class="variable">$</span>(date +%s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算花费时间</span></span><br><span class="line">elapsed_time=<span class="variable">$</span>(( stop_time - start_time ))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 完成</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Done. Totally, <span class="variable">$elapsed_time</span> seconds elapsed.&quot;</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开签名后文件所在目录</span></span><br><span class="line">open <span class="string">&quot;<span class="variable">$</span>(dirname &quot;</span><span class="variable">$</span>&#123;new_ipafile&#125;<span class="string">&quot;)&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 15 适配踩坑</title>
    <url>/2021/07/20/iOS15/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>苹果前两天推出了iOS 15的beta-3。这个消息还是从客户那儿知道的😂，没想到他们比我还前卫，秋天都等不及~~</p>
<h2 id="测试背景"><a href="#测试背景" class="headerlink" title="测试背景"></a>测试背景</h2><p>Xcode 13 beta版，iOS 15 beta 3的系统。<br>除了客户提出的问题，自己还发现了两处UI异常，不过说不定苹果能良心发现，在正式版中给修复一下。</p>
<h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><h3 id="一、企业签名的-App-无法使用"><a href="#一、企业签名的-App-无法使用" class="headerlink" title="一、企业签名的 App 无法使用"></a>一、企业签名的 App 无法使用</h3><p>客户反馈说 App 不能正常打开，并且提示下面的这种信息：</p>
<blockquote>
<p>“xxx”Needs to Be Updated : The developer of this app needs to update it to work with this version of iOS.</p>
<p>“xxx”需要更新 ：App开发者需要更新此App以在此iOS版本上正常工作。</p>
</blockquote>
  <span id="more"></span>

<center>
<div style="display:inline-block;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/iOS15.jpg" class width="300"></div>
</center>

<p>猜测是需要重签名或者使用最新的 Xcode 打包。</p>
<p>我看苹果论坛上有人说必须使用新的 Xcode 以适配 iOS 15，但我用旧版的 Xcode 重新打了一个包，也可以解决这个问题。所以，不方便更新 Xcode 的话，可以尝试重签名试试。</p>
<p><strong>睡了一觉之究极补充：</strong> 签名问题与 Xcode 版本无关，而是 Mac 系统导致的，将 macOS 升级到 11.* Big Sur 以上再进行重新签名，可以解决 App 无法使用的问题。</p>
<h3 id="二、-NavigationBar-颜色及背景失效"><a href="#二、-NavigationBar-颜色及背景失效" class="headerlink" title="二、 NavigationBar 颜色及背景失效"></a>二、 NavigationBar 颜色及背景失效</h3><h4 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h4><p>项目中往往会自定义一个导航控制器，方便全局指定导航条的背景色、标题颜色等等。以设置背景色和标题颜色为例：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//背景色</span></span><br><span class="line"><span class="keyword">self</span>.navigationBar.barTintColor = RGB(<span class="number">42</span>, <span class="number">109</span>, <span class="number">240</span>);</span><br><span class="line"><span class="comment">//Title 颜色</span></span><br><span class="line"><span class="built_in">NSDictionary</span> *titleTextAttributes = @&#123;<span class="built_in">NSFontAttributeName</span>:[<span class="built_in">UIFont</span> fontWithName:<span class="string">@&quot;&quot;</span> size:<span class="number">18</span>], <span class="built_in">NSForegroundColorAttributeName</span>:RGB(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>)&#125;;</span><br><span class="line">[<span class="keyword">self</span>.navigationBar setTitleTextAttributes:titleTextAttributes];</span><br></pre></td></tr></table></figure>

<p>但在 iOS 15上发现，指定的背景色失效了，但滚动控制器的视图时，导航条的背景又出现了。看了一眼 UINavigationBar 的 API，15中并没有新增的。倒是有几个 iOS 13新增的 API 我没用过……哈哈哈，写到这里觉得自己以前的功课落下太多了，13的更新还没学习呢😂😂😂😂😂</p>
<h4 id="2-iOS-13新增-API"><a href="#2-iOS-13新增-API" class="headerlink" title="2. iOS 13新增 API"></a>2. iOS 13新增 API</h4><ul>
<li>standardAppearance : 描述导航栏以标准高度显示时要使用的外观属性。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readwrite</span>, <span class="keyword">copy</span>) <span class="built_in">UINavigationBarAppearance</span> *standardAppearance;</span><br></pre></td></tr></table></figure>
<ul>
<li>compactAppearance : 描述导航栏在紧凑高度时使用的外观属性。如果未设置，则将使用标准外观。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readwrite</span>, <span class="keyword">copy</span>, <span class="keyword">nullable</span>) <span class="built_in">UINavigationBarAppearance</span> *compactAppearance;</span><br></pre></td></tr></table></figure>

<ul>
<li>scrollEdgeAppearance : 描述当关联的 UIScrollView 向上滚动时要使用的导航栏的外观属性。如果未设置，将改用修改后的standardAppearance。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readwrite</span>, <span class="keyword">copy</span>, <span class="keyword">nullable</span>) <span class="built_in">UINavigationBarAppearance</span> *scrollEdgeAppearance;</span><br></pre></td></tr></table></figure>

<ul>
<li>compactScrollEdgeAppearance : 描述当导航栏以紧凑的高度显示时，以及关联的 UIScrollView 往上滚动时，要使用的导航栏的外观属性。如果未设置，则首先尝试 scrollEdgeAppearance，如果为nil，则尝试 compactAppearance，然后尝试修改 standardAppearance。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">readwrite</span>, <span class="keyword">copy</span>, <span class="keyword">nullable</span>) <span class="built_in">UINavigationBarAppearance</span> *compactScrollEdgeAppearance;</span><br></pre></td></tr></table></figure>

<h4 id="3-解决办法"><a href="#3-解决办法" class="headerlink" title="3. 解决办法"></a>3. 解决办法</h4><p>根据我们的问题现象，猜测是 <code>standardAppearance</code> 和 <code>scrollEdgeAppearance</code> 需要调整，如果正常状态和滚动状态颜色一样，可以修改如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSDictionary</span> *titleTextAttributes = @&#123;<span class="built_in">NSFontAttributeName</span>:[<span class="built_in">UIFont</span> fontWithName:MAIN_FONT_FAMILY size:<span class="number">18</span>], <span class="built_in">NSForegroundColorAttributeName</span>:RGB(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>)&#125;;</span><br><span class="line"><span class="keyword">if</span> (@available(iOS <span class="number">13.0</span>, *)) &#123;</span><br><span class="line">    <span class="built_in">UINavigationBarAppearance</span> *appearance = [<span class="built_in">UINavigationBarAppearance</span> new];</span><br><span class="line">    appearance.backgroundColor = RGB(<span class="number">42</span>, <span class="number">109</span>, <span class="number">240</span>);</span><br><span class="line">    appearance.titleTextAttributes = titleTextAttributes;    </span><br><span class="line">    <span class="keyword">self</span>.navigationBar.standardAppearance = appearance;</span><br><span class="line">    <span class="keyword">self</span>.navigationBar.scrollEdgeAppearance = appearance;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Fallback on earlier versions</span></span><br><span class="line">    <span class="keyword">self</span>.navigationBar.barTintColor = RGB(<span class="number">42</span>, <span class="number">109</span>, <span class="number">240</span>);</span><br><span class="line">    [<span class="keyword">self</span>.navigationBar setTitleTextAttributes:titleTextAttributes];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Bingo！颜色显示正常啦</p>
<p>所以这是什么意思？强买强卖吗？必须设置 Appearance 才可以？</p>
<h4 id="4-遗留问题"><a href="#4-遗留问题" class="headerlink" title="4. 遗留问题"></a>4. 遗留问题</h4><p>在 Xcode 13-beta 中，必须同时指定 <code>standardAppearance</code> 和 <code>scrollEdgeAppearance</code> 才可以。但根据苹果的注释，如果 <code>scrollEdgeAppearance</code> 为nil，会默认使用 <code>standardAppearance</code> 啊。燃鹅并不行。不知道是苹果的 bug 还是怎么的……朋友昨天叫我一起转行了，因为他觉得苹果的系统做的一年不如一年~ 😂</p>
<h4 id="5-导航栏底部的黑线"><a href="#5-导航栏底部的黑线" class="headerlink" title="5. 导航栏底部的黑线"></a>5. 导航栏底部的黑线</h4><p><code>shadowColor</code> 阴影属性设置为透明。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//去掉导航栏底部的黑线</span></span><br><span class="line"><span class="keyword">if</span> (@available(iOS <span class="number">13.0</span>, *)) &#123;</span><br><span class="line">    ...</span><br><span class="line">    appearance.shadowColor = [<span class="built_in">UIColor</span> clearColor];</span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Fallback on earlier versions</span></span><br><span class="line">    ...  </span><br><span class="line">    [<span class="keyword">self</span>.navigationBar setBackgroundImage:[<span class="built_in">UIImage</span> new] forBarMetrics:<span class="built_in">UIBarMetricsDefault</span>];</span><br><span class="line">    <span class="keyword">self</span>.navigationBar.shadowImage = [[<span class="built_in">UIImage</span> alloc] init];</span><br><span class="line">  	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="三、UITabBar-背景图失效"><a href="#三、UITabBar-背景图失效" class="headerlink" title="三、UITabBar 背景图失效"></a>三、UITabBar 背景图失效</h3><p>这个问题有点类似上一个，<code>UITabBar</code> 之前设置的背景图片，老版本可以，iOS 15上表现为空白。参考问题二的思路，找到了下面的 API，做个兼容就可以了。当然，遗留问题同上，必须同时指定 <code>standardAppearance</code> 和 <code>scrollEdgeAppearance</code> 才可以……🙄……而且，如果在初始化以后，某个时机单独修改了 <code>standardAppearance</code>，也必须要同步指定一下 <code>scrollEdgeAppearance</code> ……🙄</p>
<ul>
<li>API</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readwrite</span>, <span class="keyword">copy</span>) <span class="built_in">UITabBarAppearance</span> *standardAppearance;<span class="comment">//ios 13.0.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readwrite</span>, <span class="keyword">copy</span>, <span class="keyword">nullable</span>) <span class="built_in">UITabBarAppearance</span> *scrollEdgeAppearance;<span class="comment">//ios 15.0.</span></span><br></pre></td></tr></table></figure>

<ul>
<li>老方式</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">self</span>.tabBar setBackgroundImage:[img imageWithRenderingMode:(<span class="built_in">UIImageRenderingModeAlwaysOriginal</span>)]];</span><br></pre></td></tr></table></figure>

<ul>
<li>兼容新的API</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UIImage</span> *img = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@&quot;ahaaaaa&quot;</span>];</span><br><span class="line"><span class="keyword">if</span> (@available(iOS <span class="number">13.0</span>, *)) &#123;</span><br><span class="line">    <span class="built_in">UITabBarAppearance</span> *appearance = [[<span class="built_in">UITabBarAppearance</span> alloc] init];</span><br><span class="line">    appearance.backgroundImage = img;</span><br><span class="line">    appearance.backgroundImageContentMode = <span class="built_in">UIViewContentModeScaleToFill</span>;</span><br><span class="line">    <span class="keyword">self</span>.tabBar.standardAppearance = appearance;</span><br><span class="line">    <span class="keyword">if</span> (@available(iOS <span class="number">15.0</span>, *)) &#123;</span><br><span class="line">        <span class="keyword">self</span>.tabBar.scrollEdgeAppearance = appearance;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Fallback on earlier versions</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Fallback on earlier versions</span></span><br><span class="line">    [<span class="keyword">self</span>.tabBar setBackgroundImage:[img imageWithRenderingMode:(<span class="built_in">UIImageRenderingModeAlwaysOriginal</span>)]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="四、UITabBarItem-文字颜色失效"><a href="#四、UITabBarItem-文字颜色失效" class="headerlink" title="四、UITabBarItem 文字颜色失效"></a>四、UITabBarItem 文字颜色失效</h3><p>……还是同上，新版本中 UITabBarItem 文字颜色的修改不起作用。同样是在 iOS 13 中新增的 <code>UITabBarItemAppearance</code> 来修改 Item 的不同状态下的不同表现。遗留问题同上。</p>
<ul>
<li>相关的类型如下，其他的API就不贴了：</li>
</ul>
<p><code>UITabBarItemAppearance</code> 、 <code>UITabBarItemStateAppearance</code></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// The appearance when the tab bar item is in the normal state</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">strong</span>) <span class="built_in">UITabBarItemStateAppearance</span> *normal;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// The appearance when the tab bar item is in the selected state</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">strong</span>) <span class="built_in">UITabBarItemStateAppearance</span> *selected;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// The appearance when the tab bar item is in the disabled state</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">strong</span>) <span class="built_in">UITabBarItemStateAppearance</span> *disabled;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// The appearance when the tab bar item is in the focused state</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">strong</span>) <span class="built_in">UITabBarItemStateAppearance</span> *focused;</span><br></pre></td></tr></table></figure>

<ul>
<li>兼容新的API</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Set tabBar style.</span></span><br><span class="line"><span class="built_in">UIColor</span> *normalTitleColor = RGBA(<span class="number">80</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">UIColor</span> *selectedTitleColor = RGBA(<span class="number">42</span>, <span class="number">109</span>, <span class="number">240</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (@available(iOS <span class="number">13.0</span>, *)) &#123;</span><br><span class="line">    <span class="built_in">UITabBarItemAppearance</span> *itemAppearance = [[<span class="built_in">UITabBarItemAppearance</span> alloc] init];</span><br><span class="line">    itemAppearance.normal.titleTextAttributes = @&#123;<span class="built_in">NSForegroundColorAttributeName</span> : normalTitleColor&#125;;</span><br><span class="line">    itemAppearance.selected.titleTextAttributes = @&#123;<span class="built_in">NSForegroundColorAttributeName</span> : selectedTitleColor&#125;;</span><br><span class="line">    <span class="built_in">UITabBarAppearance</span> *appearance = [[<span class="built_in">UITabBarAppearance</span> alloc] init];</span><br><span class="line">    appearance.stackedLayoutAppearance = itemAppearance;</span><br><span class="line">    <span class="keyword">self</span>.tabBar.standardAppearance = appearance;</span><br><span class="line">    <span class="keyword">if</span> (@available(iOS <span class="number">15.0</span>, *)) &#123;</span><br><span class="line">        <span class="keyword">self</span>.tabBar.scrollEdgeAppearance = appearance;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Fallback on earlier versions</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (@available(iOS <span class="number">10.0</span>, *)) &#123;</span><br><span class="line">    <span class="keyword">self</span>.tabBar.tintColor = normalTitleColor;</span><br><span class="line">    <span class="keyword">self</span>.tabBar.unselectedItemTintColor = selectedTitleColor;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Fallback on earlier versions</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="五、-UITableView-Header-高度失效"><a href="#五、-UITableView-Header-高度失效" class="headerlink" title="五、 UITableView Header 高度失效"></a>五、 UITableView Header 高度失效</h3><p>通常 TableView 第一个分组如果不需要 Header 的话，我们会给个0.01的高度，看上去就是顶部没有空白的效果。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView heightForHeaderInSection:(<span class="built_in">NSInteger</span>)section &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.01</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但在 iOS 15上视图的顶部默认会下沉几个像素，我以为磨人的 <code>automaticallyAdjustsScrollIndicatorInsets</code> 这类小妖精又出现了，尝试了一下好像不是这类问题。😂</p>
<p>看了一眼官网的 API 变动，发现了一个小秘密：</p>
<blockquote>
<p>The amount of padding above each section header.</p>
<p>每个分组Header上方的填充量。</p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> sectionHeaderTopPadding;</span><br></pre></td></tr></table></figure>

<p>所以我就这样:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (@available(iOS <span class="number">15.0</span>, *)) &#123;</span><br><span class="line">    <span class="keyword">self</span>.tableView.sectionHeaderTopPadding = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>试着改了一下，毕竟试试又不会怀孕。好了……有那么一瞬间我仿佛能理解苹果为什么加这个属性，貌似真的有场景会用到这个间距。冷静了一下，我发现我还是太菜了，理解不了~~~</p>
<h3 id="六、UITextField-的-clearButton-向右偏移"><a href="#六、UITextField-的-clearButton-向右偏移" class="headerlink" title="六、UITextField 的 clearButton 向右偏移"></a>六、UITextField 的 clearButton 向右偏移</h3><p>_UITextFieldClearButton 向右偏移了一点儿点儿…有点压到边框，倒是不影响使用，然后我也不知道怎么改，谁知道告诉我一下。阿里嘎多~</p>
<p>2021-08-12：关于问题六，iOS 15 beta-4 版本中貌似已经好了~~</p>
<hr>
<p>目前就发现了这几个问题。希望秋天到来的时候，开发者们不用花太多时间在 UI 适配上。</p>
]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS13 适配注意点</title>
    <url>/2019/11/05/iOS13%20%E9%80%82%E9%85%8D%E6%B3%A8%E6%84%8F%E7%82%B9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="❌-KVC-获取私有属性-直接崩溃，比方说获取-SearchBar-的-TextField"><a href="#❌-KVC-获取私有属性-直接崩溃，比方说获取-SearchBar-的-TextField" class="headerlink" title="❌ KVC 获取私有属性 直接崩溃，比方说获取 SearchBar 的 TextField"></a>❌ KVC 获取私有属性 直接崩溃，比方说获取 SearchBar 的 TextField</h5><p>​    解决方案是做版本判断 iOS13 的 searchbar 新增了一个 searchTextField 属性</p>
<h5 id="⚠️-Segement、SearchBar的样式变了，注意一下"><a href="#⚠️-Segement、SearchBar的样式变了，注意一下" class="headerlink" title="⚠️ Segement、SearchBar的样式变了，注意一下"></a>⚠️ Segement、SearchBar的样式变了，注意一下</h5><p>​    for 循环查找子视图失效，改为  searchBar.searchTextField  </p>
 <span id="more"></span>

<h5 id="❌-UIWebView-终极废弃，需要替换-WKWebView，不然-AppStore-审核是不通过的。"><a href="#❌-UIWebView-终极废弃，需要替换-WKWebView，不然-AppStore-审核是不通过的。" class="headerlink" title="❌ UIWebView 终极废弃，需要替换 WKWebView，不然 AppStore 审核是不通过的。"></a>❌ UIWebView 终极废弃，需要替换 WKWebView，不然 AppStore 审核是不通过的。</h5><h5 id="⚠️-黑夜模式"><a href="#⚠️-黑夜模式" class="headerlink" title="⚠️ 黑夜模式"></a>⚠️ 黑夜模式</h5><h5 id="⚠️-TextField：LeftView-如果是图片的话-会覆盖整个-TextField-解决办法是用一个-view-包裹一下图片作为-LeftView"><a href="#⚠️-TextField：LeftView-如果是图片的话-会覆盖整个-TextField-解决办法是用一个-view-包裹一下图片作为-LeftView" class="headerlink" title="⚠️ TextField：LeftView 如果是图片的话 会覆盖整个 TextField 解决办法是用一个 view 包裹一下图片作为 LeftView"></a>⚠️ TextField：LeftView 如果是图片的话 会覆盖整个 TextField 解决办法是用一个 view 包裹一下图片作为 LeftView</h5><h5 id="❌-UniversalLink"><a href="#❌-UniversalLink" class="headerlink" title="❌ UniversalLink"></a>❌ UniversalLink</h5><h5 id="https-www-jianshu-com-p-03e6b7828307"><a href="#https-www-jianshu-com-p-03e6b7828307" class="headerlink" title="https://www.jianshu.com/p/03e6b7828307"></a><a href="https://www.jianshu.com/p/03e6b7828307">https://www.jianshu.com/p/03e6b7828307</a></h5><p>​    微信分享强制使用。注册微信开放平台的时候 iOS的项目必须填这个。</p>
<h5 id="⚠️-模态出的页面，需要指定对应的弹出模式"><a href="#⚠️-模态出的页面，需要指定对应的弹出模式" class="headerlink" title="⚠️ 模态出的页面，需要指定对应的弹出模式"></a>⚠️ 模态出的页面，需要指定对应的弹出模式</h5><p>​    例如：UIModalPresentationOverFullScreen</p>
<p>​    检查图片选择器？</p>
<h5 id="❌-Tabbar的文字颜色"><a href="#❌-Tabbar的文字颜色" class="headerlink" title="❌ Tabbar的文字颜色"></a>❌ Tabbar的文字颜色</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[tabbarItem setTitleTextAttributes:@&#123;NSForegroundColorAttributeName:selectColor&#125; forState:UIControlStateSelected];</span><br></pre></td></tr></table></figure>

<p>​    此方法在 iOS 13 会有 bug，当我们 push 到下一页再次返回时 tabbar 字体颜色设置会失效。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.tabBar.tintColor = selectColor;</span><br></pre></td></tr></table></figure>

<h5 id="❌-通过-NSURLSessionDataTask-下载文件流"><a href="#❌-通过-NSURLSessionDataTask-下载文件流" class="headerlink" title="❌ 通过 NSURLSessionDataTask 下载文件流"></a>❌ 通过 NSURLSessionDataTask 下载文件流</h5><p>​    需要在头部指定接受的返回格式：<code>application/octet-stream</code></p>
<h5 id="❌-Cocoapods"><a href="#❌-Cocoapods" class="headerlink" title="❌ Cocoapods"></a>❌ Cocoapods</h5><p>​    升级 CocoaPods 到 1.8.4 版本</p>
<p>​    但是随即问题就来了, 执行 pod install 下载库时，出现错误</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">[!] <span class="symbol">CDN:</span> trunk URL couldn<span class="string">&#x27;t be downloaded: https://cdn.cocoapods.org/all_pods_versions_a_7_5.txt, error: execution expired</span></span><br></pre></td></tr></table></figure>

<p>后来查了半天资料, 最终在 <a href="https://github.com/CocoaPods/CocoaPods/issues/9303">github CocoaPods issues</a> 找到解决方案：在 Podfile 加上 source <code>https://github.com/CocoaPods/Specs.git</code> 不使用新版本的 CDN</p>
]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 开发中的常见问题记录</title>
    <url>/2019/11/05/iOS_Problem/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Xcode"><a href="#Xcode" class="headerlink" title="Xcode"></a>Xcode</h2><h3 id="❌-Thread-1-EXC-BAD-ACCESS-code-1-address-0x0"><a href="#❌-Thread-1-EXC-BAD-ACCESS-code-1-address-0x0" class="headerlink" title="❌ Thread 1: EXC_BAD_ACCESS (code=1, address=0x0)"></a>❌ Thread 1: EXC_BAD_ACCESS (code=1, address=0x0)</h3><p>出现这个问题，说明你访问了已经释放的内存。</p>
<p>报错行如果有使用到参数，可以看看参数是不是已经为 NULL 了。</p>
<p>报错行如果没有参数，那需要看调用这个方法的对象是不是已经被释放了。</p>
<h3 id="❌-No-architectures-to-compile-for-ONLY-ACTIVE-ARCH-YES-active-arch-x86-64"><a href="#❌-No-architectures-to-compile-for-ONLY-ACTIVE-ARCH-YES-active-arch-x86-64" class="headerlink" title="❌ No architectures to compile for (ONLY_ACTIVE_ARCH=YES, active arch=x86_64)"></a>❌ No architectures to compile for (ONLY_ACTIVE_ARCH=YES, active arch=x86_64)</h3><p>原因是模拟器缺少 x86_64 指令集，在 VALID_ARCHS 中 Debug 模式下添加如下：</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/valid_archs.png"></p>
<h3 id="❌-Building-for-iOS-Simulator-but-the-linked-library-‘-’-was-built-for-iOS"><a href="#❌-Building-for-iOS-Simulator-but-the-linked-library-‘-’-was-built-for-iOS" class="headerlink" title="❌ Building for iOS Simulator, but the linked library ‘***’ was built for iOS."></a>❌ Building for iOS Simulator, but the linked library ‘***’ was built for iOS.</h3><p>Xcode -&gt; File -&gt; Workspace Settings -&gt; Build System 选择 Legacy Build System，当然这个只能做临时解决方案，因为这套编译系统在新版本 Xcode 中已经废弃了，不同的开发人员应该选择同一套编译系统。</p>
<h3 id="❌-Multiple-commands-produce-Info-plist"><a href="#❌-Multiple-commands-produce-Info-plist" class="headerlink" title="❌ Multiple commands produce *** Info.plist"></a>❌ Multiple commands produce *** Info.plist</h3><p>检查一下 Build Phases -&gt; Copy Bundle resources 中是否把 Info.plist 作为资源文件进行管理了，如果可以搜到，把这一行的引用删除。</p>
<h3 id="❌-Property-xxx-cannot-be-found-in-forward-class-object-xxx"><a href="#❌-Property-xxx-cannot-be-found-in-forward-class-object-xxx" class="headerlink" title="❌ Property xxx cannot be found in forward class object xxx"></a>❌ Property xxx cannot be found in forward class object xxx</h3><p>出现这类错误，通常由于头文件引起的：</p>
<ul>
<li><p>没有引入相应的头文件；</p>
</li>
<li><p>某头文件出现了循环引用：A引用B，B引用C，C引用A 。</p>
</li>
</ul>
<p>是不是没想到自己居然会犯引用的错误，哈哈哈~</p>
<h3 id="❌-ISO-C-17-does-not-allow-‘register’-storage-class-specifier"><a href="#❌-ISO-C-17-does-not-allow-‘register’-storage-class-specifier" class="headerlink" title="❌ ISO C++17 does not allow ‘register’ storage class specifier"></a>❌ ISO C++17 does not allow ‘register’ storage class specifier</h3><p>C++ 中的关键字 <code>register</code> 在 2011 年（C++11）被弃用，自那以后 <code>register</code> 已经没有意义，现在已经被删除。如果在使用基于 C++ 的三方库时提示了这个错误，可以尝试修改 Xcode  中的 <code>Build Settings</code> -&gt; <code>C++ Language Dialect</code> 和 <code>C++ Standard Library</code>的 <code>Compiler Default</code>。</p>
<p>我的项目中把  <code>C++ Language Dialect</code> 从 <code>GUN++17</code> 降为 <code>GUN++11</code> 一定程度解决了 C++ 语法上的错误。</p>
<h3 id="❌-NSKeyedUnarchiver-validateAllowedClass-forKey"><a href="#❌-NSKeyedUnarchiver-validateAllowedClass-forKey" class="headerlink" title="❌ -[NSKeyedUnarchiver validateAllowedClass:forKey:]"></a>❌ -[NSKeyedUnarchiver validateAllowedClass:forKey:]</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">-[<span class="built_in">NSKeyedUnarchiver</span> validateAllowedClass:forKey:]: <span class="built_in">NSSecureCoding</span> allowed classes list contains [<span class="built_in">NSObject</span> <span class="keyword">class</span>], which bypasses security by allowing any Objective-C <span class="keyword">class</span> to be implicitly decoded. Consider reducing the scope of allowed classes during decoding by listing only the classes you expect to decode, or a more specific base <span class="keyword">class</span> than <span class="built_in">NSObject</span>. This will become an error <span class="keyword">in</span> the future. Allowed <span class="keyword">class</span> list: &#123;(</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;&#x27;NSObject&#x27; (0x7fff862bc6e8) [/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/usr/lib]&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h2><h3 id="❌-pod-install"><a href="#❌-pod-install" class="headerlink" title="❌ pod install"></a>❌ <code>pod install</code></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">RPC failed; <span class="built_in">curl</span> <span class="number">56</span> LibreSSL SSL_read: SSL_ERROR_SYSCALL, errno <span class="number">54</span></span><br><span class="line"><span class="comment"># 或：</span></span><br><span class="line"></span><br><span class="line">error: RPC failed; <span class="built_in">curl</span> <span class="number">18</span> transfer closed with outstanding read <span class="keyword">data</span> remaining</span><br><span class="line"><span class="comment"># 或：</span></span><br><span class="line"></span><br><span class="line">fatal: the remote <span class="keyword">end</span> hung up unexpectedly</span><br></pre></td></tr></table></figure>

<p>出现此类问题，大部分都是网络导致的，毕竟我们天朝的网络可是很不一般的……</p>
<p>如果，我是说如果你有科学上网的话，可以尝试下面的配置：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git config -<span class="literal">-global</span> http.https://github.com.proxy socks5://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">10086</span></span><br></pre></td></tr></table></figure>

<p>取消代理：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git config -<span class="literal">-global</span> -<span class="literal">-unset</span> http.https://github.com.proxy</span><br></pre></td></tr></table></figure>

<p>或者是这种错误：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">LibreSSL SSL_connect: SSL_ERROR_SYSCALL <span class="keyword">in</span> connection to github.com:<span class="number">443</span></span><br></pre></td></tr></table></figure>

<p>查看一下已有的代理是否配置的有问题，unset 一下。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git config -<span class="literal">-global</span> -<span class="literal">-list</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS编码规范总结</title>
    <url>/2017/01/04/iOS%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、空格"><a href="#一、空格" class="headerlink" title="一、空格"></a>一、空格</h2><h4 id="在适当的地方、适当地加空格、可以适当地提高代码可读性"><a href="#在适当的地方、适当地加空格、可以适当地提高代码可读性" class="headerlink" title="在适当的地方、适当地加空格、可以适当地提高代码可读性"></a>在适当的地方、适当地加空格、可以适当地提高代码可读性</h4><p>你一定读过”紧凑型”的代码，一个字符挨着一个字符，如果不是会报错，可能类名和变量名之间都没有空格了。用大学 c 语言老师的话说：你们的大拇指是残疾了吗？？</p>
<span id="more"></span>

<p>为了避免博客风格影响视觉，直接上图片吧。其实我不知道是不是有这样明确的编码规范，我只是看苹果的怎么写，我就怎么写，下面也只是举一些简单的例子。</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/22.png"></p>
<h2 id="二、计时器"><a href="#二、计时器" class="headerlink" title="二、计时器"></a>二、计时器</h2><h4 id="NSTimer-替换为dispatch-source-timer"><a href="#NSTimer-替换为dispatch-source-timer" class="headerlink" title="NSTimer 替换为dispatch source timer"></a>NSTimer 替换为dispatch source timer</h4><p>NSTimer 在主线程的 Runloop 里会在 Runloop 切换其它模式时停止，这时就需要手动在子线程开启一个模式为 NSRunLoopCommonModes 的 Runloop，并且释放不到位，会导致引用 Timer 的对象也得不到释放。 如果不想开启一个新的 Runloop，并且避免引用问题，可以用不跟 Runloop 关联的 dispatch source timer。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)createTimer &#123;</span><br><span class="line">    __block <span class="keyword">int</span> timeout = <span class="number">60</span>;</span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> global = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br><span class="line">    dispatch_source_t timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, <span class="number">0</span>, <span class="number">0</span>, global);</span><br><span class="line">    </span><br><span class="line">    dispatch_source_set_timer(timer, DISPATCH_TIME_NOW, <span class="number">1.0</span> * <span class="built_in">NSEC_PER_SEC</span>, <span class="number">0</span> * <span class="built_in">NSEC_PER_SEC</span>);</span><br><span class="line">    dispatch_source_set_event_handler(timer, ^&#123;</span><br><span class="line">        timeout --;</span><br><span class="line">        <span class="keyword">if</span> (timeout &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            dispatch_source_cancel(timer);</span><br><span class="line">            <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                <span class="comment">//do something after timer done.</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    dispatch_resume(timer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更多关于GCD的用法，请见我的另一个总结<a href="https://atommygirl.github.io/2016/01/13/GCD%EF%BC%88Grand%20Central%20Dispatch%EF%BC%89/">GCD (Grand Central Dispatch)</a> 。</p>
<h2 id="三、URL字符串解析"><a href="#三、URL字符串解析" class="headerlink" title="三、URL字符串解析"></a>三、URL字符串解析</h2><h4 id="分析URL字符串的时候，使用-NSURLComponents-类做解析，不要通过字符串截取等方式"><a href="#分析URL字符串的时候，使用-NSURLComponents-类做解析，不要通过字符串截取等方式" class="headerlink" title="分析URL字符串的时候，使用 NSURLComponents 类做解析，不要通过字符串截取等方式"></a>分析URL字符串的时候，使用 NSURLComponents 类做解析，不要通过字符串截取等方式</h4><p>我看很多人的代码，在解析别人传给他的URL 字符串时（例如自己的APP被拉起时），都是使用 <code>NSString</code> 的各种截取方法，然后再自己做判断，这是有点”危险”的做法。如果你自信逻辑严谨的话，那没的说，如果你不擅长或者懒得做异常处理， <code>NSRange</code>  的 <code>location</code> 存不存在以及 <code>length</code> 越界问题，就可以把程序搞crash。所以建议不要这样做，使用 <code>NSURLComponents</code> 。文档<a href="https://developer.apple.com/documentation/foundation/nsurlcomponents">NSURLComponents</a></p>
<p>看完文档就会知道，真的好方便。。。</p>
<ul>
<li>初始化就不多说了，看自己需要</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Initialize a NSURLComponents with all components undefined. Designated initializer.</span></span><br><span class="line">- (<span class="keyword">instancetype</span>)init;</span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)initWithURL:(<span class="built_in">NSURL</span> *)url resolvingAgainstBaseURL:(<span class="built_in">BOOL</span>)resolve;</span><br><span class="line">+ (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)componentsWithURL:(<span class="built_in">NSURL</span> *)url resolvingAgainstBaseURL:(<span class="built_in">BOOL</span>)resolve;</span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)initWithString:(<span class="built_in">NSString</span> *)URLString;</span><br><span class="line">+ (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)componentsWithString:(<span class="built_in">NSString</span> *)URLString;</span><br></pre></td></tr></table></figure>

<ul>
<li>获取URL里的内容，简直不要太方便哦，URLEncode之后的参数都准备好了</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *scheme; <span class="comment">// Attempting to set the scheme with an invalid scheme string will cause an exception.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *user;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *password;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *host;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSNumber</span> *port; <span class="comment">// Attempting to set a negative port number will cause an exception.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *path;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *query;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *fragment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *percentEncodedUser;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *percentEncodedPassword;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *percentEncodedHost;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *percentEncodedPath;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *percentEncodedQuery;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *percentEncodedFragment;</span><br><span class="line"></span><br><span class="line"><span class="comment">//begin ios 9.0</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSRange</span> rangeOfScheme;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSRange</span> rangeOfUser;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSRange</span> rangeOfPassword;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSRange</span> rangeOfHost;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSRange</span> rangeOfPort;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSRange</span> rangeOfPath;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSRange</span> rangeOfQuery;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSRange</span> rangeOfFragment;</span><br></pre></td></tr></table></figure>

<p>当然关于 NSRange 的获取，是从ios 9.0 开始有的，适配低版本的话，需要注意一哈。</p>
<ul>
<li>参数的集合，<code>NSURLQueryItem</code> 类呢就是通过 key 、value 来取参数们了</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// API_AVAILABLE(macos(10.10), ios(8.0), watchos(2.0), tvos(9.0))</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSArray</span>&lt;<span class="built_in">NSURLQueryItem</span> *&gt; *queryItems;</span><br><span class="line"><span class="comment">// API_AVAILABLE(macosx(10.13), ios(11.0), watchos(4.0), tvos(11.0))</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSArray</span>&lt;<span class="built_in">NSURLQueryItem</span> *&gt; *percentEncodedQueryItems;</span><br></pre></td></tr></table></figure>

<p>我之前不是特别理解，参数要用数组＋Item的方式，直到遇到了那位给我传的URL里，有两个同名参数不同值的仁兄，我才更加体会到了苹果开发者的严谨。。。</p>
<h2 id="四、-枚举"><a href="#四、-枚举" class="headerlink" title="四、 枚举"></a>四、 枚举</h2><p>举一个简单的场景：聊天软件，会区分 单聊、群聊、聊天室、服务号等等等等 不同类型的会话，开发时在做页面间传值的时候，往往需要把类型传递下去来做不同的事情，怎么明确的传呢？如果这个项目是多人负责，每个人负责不同的模块，像下面这样写代码，时间久了谁也看不懂：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//0单聊,1群聊</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">assign</span>)<span class="built_in">NSInteger</span> type;</span><br></pre></td></tr></table></figure>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">vc.type = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p>不要笑，你肯定也写过这样的代码，模块多了、时间久了，type  是什么意思？Who JB Know 啊。</p>
<p><strong>枚举就在这个时候发挥作用了：增加代码可读性。</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, ConversationType) &#123;</span><br><span class="line">    <span class="comment">//单聊</span></span><br><span class="line">    ConversationTypePRIVATE = <span class="number">1</span>,</span><br><span class="line">    <span class="comment">//群组</span></span><br><span class="line">    ConversationTypeGROUP = <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//聊天室</span></span><br><span class="line">    ConversationTypeCHATROOM = <span class="number">3</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这样一来比起单薄的数字，是不是更见名知意了呢？而且 OC 中枚举定义值的时候，都是 枚举名 + 具体分类，例如我们写的这个枚举中单聊的定义就是  <code>ConversationType</code> + <code>PRIVATE</code> = <code>ConversationTypePRIVATE</code>。敲出来的时候好敲，哈哈。</p>
<p>有的同学可能会问了，应对类型是整型的 type 这个枚举是够用了，那用字符串来分类的呢？没错，这是个问题，尤其是和服务端对接久了，你会发现，他们使用 字符串 多过 数值类型。不急，我们来小探一下 OC 中枚举都怎么用的：</p>
<h4 id="普通枚举"><a href="#普通枚举" class="headerlink" title="普通枚举"></a>普通枚举</h4><h5 id="1、C-语言的枚举写法-enum"><a href="#1、C-语言的枚举写法-enum" class="headerlink" title="1、C 语言的枚举写法 enum"></a>1、C 语言的枚举写法 enum</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span>&#123;</span></span><br><span class="line">    ConversationTypePRIVATE = <span class="number">1</span>,</span><br><span class="line">    ConversationTypeGROUP = <span class="number">2</span>,</span><br><span class="line">    ConversationTypeCHATROOM = <span class="number">3</span>,</span><br><span class="line">&#125; ConversationType;</span><br></pre></td></tr></table></figure>

<h5 id="2、OC-整型枚举"><a href="#2、OC-整型枚举" class="headerlink" title="2、OC 整型枚举"></a>2、OC 整型枚举</h5><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, ConversationType) &#123;</span><br><span class="line">    <span class="comment">//单聊</span></span><br><span class="line">    ConversationTypePRIVATE = <span class="number">1</span>,</span><br><span class="line">    <span class="comment">//群组</span></span><br><span class="line">    ConversationTypeGROUP = <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//聊天室</span></span><br><span class="line">    ConversationTypeCHATROOM = <span class="number">3</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="3、字符串枚举实现方案"><a href="#3、字符串枚举实现方案" class="headerlink" title="3、字符串枚举实现方案"></a>3、字符串枚举实现方案</h5><h6 id="1、基于普通枚举，C-语言实现"><a href="#1、基于普通枚举，C-语言实现" class="headerlink" title="1、基于普通枚举，C 语言实现"></a>1、基于普通枚举，C 语言实现</h6><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先定义一个普通的整型枚举</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, ConversationType) &#123;</span><br><span class="line">    <span class="comment">//单聊</span></span><br><span class="line">    ConversationTypePRIVATE = <span class="number">1</span>,</span><br><span class="line">    <span class="comment">//群组</span></span><br><span class="line">    ConversationTypeGROUP = <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//聊天室</span></span><br><span class="line">    ConversationTypeCHATROOM = <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现一个方法，实现里做 整型 和 字符串 的匹配</span></span><br><span class="line"><span class="built_in">NSString</span> *ConversationTypeString(ConversationType status) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">        <span class="keyword">case</span> ConversationTypePRIVATE:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">@&quot;private&quot;</span>;</span><br><span class="line">        <span class="keyword">case</span> ConversationTypeGROUP:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">@&quot;group&quot;</span>;</span><br><span class="line">        <span class="keyword">case</span> ConversationTypeCHATROOM:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">@&quot;chatroom&quot;</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">@&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者使用 一个 NSString * 类型的数组</span></span><br><span class="line"><span class="built_in">NSString</span> *ConversationTypeStringMap[] = &#123;</span><br><span class="line">    [ConversationTypePRIVATE] = <span class="string">@&quot;private&quot;</span>,</span><br><span class="line">    [ConversationTypeGROUP] = <span class="string">@&quot;group&quot;</span>,</span><br><span class="line">    [ConversationTypeCHATROOM] = <span class="string">@&quot;chatroom&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>但这两种方式有一个弊端，就是不能像枚举类型一样直接作为一个类型 限定传参的类型。</strong></p>
<h6 id="2、宏定义"><a href="#2、宏定义" class="headerlink" title="2、宏定义"></a>2、宏定义</h6><p>初期我使用宏定义比较多，每个类型值定义一个宏。。。这里不举例了。。。</p>
<h6 id="3、苹果官方的做法"><a href="#3、苹果官方的做法" class="headerlink" title="3、苹果官方的做法"></a>3、苹果官方的做法</h6><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//.h 中 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NSString</span> *ConversationTypeKey <span class="built_in">NS_STRING_ENUM</span>;</span><br><span class="line"></span><br><span class="line">FOUNDATION_EXPORT ConversationTypeKey <span class="keyword">const</span> ConversationTypeKeyPRIVATE;</span><br><span class="line">FOUNDATION_EXPORT ConversationTypeKey <span class="keyword">const</span> ConversationTypeKeyGROUP;</span><br><span class="line">FOUNDATION_EXPORT ConversationTypeKey <span class="keyword">const</span> ConversationTypeKeyCHATROOM;</span><br><span class="line"></span><br><span class="line"><span class="comment">//.m 中 </span></span><br><span class="line"><span class="built_in">NSString</span> * <span class="keyword">const</span> ConversationTypeKeyPRIVATE = <span class="string">@&quot;private&quot;</span>;</span><br><span class="line"><span class="built_in">NSString</span> * <span class="keyword">const</span> ConversationTypeKeyGROUP = <span class="string">@&quot;group&quot;</span>;</span><br><span class="line"><span class="built_in">NSString</span> * <span class="keyword">const</span> ConversationTypeKeyCHATROOM = <span class="string">@&quot;chatroom&quot;</span>; </span><br></pre></td></tr></table></figure>

<p><strong>相比会产生过多二进制文件的宏定义方式, 建议用FOUNDATION_EXPORT</strong></p>
<h4 id="位移枚举"><a href="#位移枚举" class="headerlink" title="位移枚举"></a>位移枚举</h4><p>==</p>
]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>开始懂了</title>
    <url>/2023/06/14/let_it_go/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/ahaaaaa.webp"></p>
<h2 id="爱情是什么？"><a href="#爱情是什么？" class="headerlink" title="爱情是什么？"></a>爱情是什么？</h2><hr>
<p>某天晚上 11 点多突然问了萝卜君一个问题：”你觉得爱情是什么？“。他说：”爱情就是你絮絮叨叨半个多小时，不让我睡觉，我却没有打你。”…🤓…凶巴巴。</p>
<p>这几天问了好多人这个问题……</p>
<h3 id="我那对于网恋最有发言权的好闺蜜说"><a href="#我那对于网恋最有发言权的好闺蜜说" class="headerlink" title="我那对于网恋最有发言权的好闺蜜说"></a>我那对于网恋最有发言权的好闺蜜说</h3><p>探索内心的过程[旺柴]，只有过程。就是爱情。<br>难道不是么，遇到什么人，会有什么感觉，什么反应，高兴，难过，感动，悔恨，很神奇的东西，从来不会考虑结果，只有过程[旺柴]。</p>
<h3 id="多年未见的老同学说"><a href="#多年未见的老同学说" class="headerlink" title="多年未见的老同学说"></a>多年未见的老同学说</h3><p>我觉得爱情是：<br>如果是小时候会觉得爱情是想念，总会有意无意中想知道对方的动向，会因为对方的行为开心或者生气，会自私的想占有。<br>如果成熟后觉得爱情是相守、是彼此尊重，能够给彼此空间，是亲情大于新鲜感后还依然能够不离不弃吧，是充分磨合后走进婚姻，即便相隔很远都能够在相互吸引下不会偏航，是失去的瞬间会心很疼。</p>
<h3 id="绝版单身狗说"><a href="#绝版单身狗说" class="headerlink" title="绝版单身狗说"></a>绝版单身狗说</h3><p>相互需要吧。<br>就是有分享欲  什么事情都想和对方说。<br>这么说吧。闺蜜和哥们是锦上添花。<br>你咋想起来问这个…</p>
<p>所以你看，单身都是有原因的。😂</p>
<h3 id="最近失意的人说"><a href="#最近失意的人说" class="headerlink" title="最近失意的人说"></a>最近失意的人说</h3><p>爱情本就是自私的，有占有欲和年龄无关，但也是无私的，不会计较得失、权衡利弊的去偏爱一个人，所谓的磨合也是愿意为对方去改变，而不是一种“应该“为对方改变自己的观念；良好的关系里，两个人是彼此成就、彼此成全，还有最重要的一点是共同进步，有一方懈怠了就容易走散；尊重和空间就不用说了，这也是我一直很看重的。</p>
<h3 id="琢磨先生说-心理学如何定义爱情"><a href="#琢磨先生说-心理学如何定义爱情" class="headerlink" title="琢磨先生说 - 心理学如何定义爱情"></a>琢磨先生说 - 心理学如何定义爱情</h3><p>  每个人说起爱情，都有一套自己的理论，比如我的理论是这样的：</p>
<p>  我不知道爱是什么，但我知道爱不是什么。爱不是占有，因为你的存在，她更能享受到自由。爱不是威胁，因为你的存在，她更能感到安全。爱不是改变，因为你的存在，她更能发现自己的美好。爱不是自我寂寞的满足，当彼此靠近时，觉得生命从此完整，不管周遭环境如何恶劣，心中都充满了静谧。</p>
<p>  我毕竟是个文科生，对爱情的定义还是从感性的角度出发，那么心理学到底如何定义爱情呢？我们听听罗伯特·斯坦伯格教授的研究。如果你之前听过他在耶鲁大学讲的《心理学导论》，应该对他不会陌生。</p>
<p>  根据罗伯特·斯坦伯格教授的研究，把爱情定义为三个要素的组合，这三个要素分别是：</p>
<pre><code>亲密（Intimacy）；

激情（Passion）；

承诺（Commitment）。
</code></pre>
<p>  亲密就是两个人分享秘密，彼此坦诚，而且有些话只跟对方说起，没事就腻歪在一起聊天。</p>
<p>  激情就是性的冲动，肉体的吸引，跟对方在一起就会欲火焚身，有原始的冲动。</p>
<p>  承诺就是用行动维系这段感情，一起创造未来，走进婚姻，相伴终老。</p>
<p>  我尝试着把三个因素的组合画了一张表，如下：</p>
  <img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/letitgo0.png" style="zoom:67%;">

<p>  如上表所示，可以把关系组合成八种情况：</p>
<p>  第一种情况，没有秘密可以分享，也没有激情，也没有承诺，这就是匆匆过客，萍水相逢，啥都谈不上。这就是无爱，很多人跟自己应该都是无爱，这个世界上不是每个人都要跟自己发生关系的，大部分人都是你好我好大家好，逢场作戏，然后握手再见。</p>
<p>  第二种情况，喜欢分享秘密，但没有性冲动，也不对未来的关系持久有承诺，这就仅仅是喜欢。好朋友也可以是这种情况，能跟你在一起说说话就很棒。我们说的红颜知己，或者蓝颜知己都是这种情况。遇到烦心事，打个电话就出来坐坐，聊完各回各家。</p>
<p>  第三种情况，彼此不分享秘密，也不对未来有承诺，但是在一起非常有激情，见了面买一堆零食，然后开始亲热，饿了吃，吃了亲热。想想也是怪累的，这叫迷恋式爱情，一见就钟情，三天就结婚，往往一段爱情的开始阶段都是这个状态。</p>
<p>  第四种情况，不跟对方分享秘密，也不亲热，只是对彼此有承诺，这叫空洞的爱。或许是因为家庭，或许是因为孩子，或许是因为声誉，但是“一不做二不休”，就这么耗着。好像很多貌合神离的婚姻都是这种情况，想想都好可悲。</p>
<p>  第五种情况，彼此分享秘密，也对彼此身体非常迷恋，但不对未来有承诺，就是不谈结婚这种事情，这叫浪漫的爱。我遇到过一些这样的朋友，同居多年，关系也好得很，出门走两步都还要亲嘴的那种，但就是不结婚。或许是因为觉得结婚会背负太多的压力吧，或许就是单纯不喜欢丈母娘吧，谁知道呢。</p>
<p>  第六种情况，彼此分享秘密，也对未来有承诺，要好好在一起，但是彼此没有激情，这是友谊。其实我觉得两口子日子过久了，差不多都是这样吧。在一起就像左手摸右手，一点感觉都没有。但是还有话可以说，还有婚姻要维系。呃，柏拉图式的爱情应该是这种吧。</p>
<p>  第七种情况，彼此没多少话可以说，但可以嘿咻，也可以结婚。这叫愚昧的爱。我想也是啊，两个人没什么话可以说，仅仅是因为可以嘿咻而结婚，很容易出轨的吧？爱情很重要的在于可以彼此理解。张小娴不是说：“遇到爱遇到性都不是稀罕事，稀罕的是遇到理解。”</p>
<p>  第八种情况，有很多话可以说，也可以嘿咻，也对未来有承诺。嗯，这算是真爱了。这好像没啥好解释的，遇到这样的情况，你就嫁了吧。</p>
<p>  分析完了，我还贴心地给做了一个空白的表，你可以自己填写一下，看看你周围的人都属于哪个格子，然后你就知道该如何处理这个关系了。</p>
<img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/letitgo1.png" style="zoom:67%;">

<p>—— 摘录来自《以幽默的方式过一生》琢磨先生<br><a href="https://itunes.apple.com/WebObjects/MZStore.woa/wa/viewBook?id=0">https://itunes.apple.com/WebObjects/MZStore.woa/wa/viewBook?id=0</a><br>此材料可能受版权保护。</p>
<hr>
<p>现在更愿意相信：爱情只是一个过程，何必激动着要理由。</p>
]]></content>
      <tags>
        <tag>读书</tag>
        <tag>我</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 开发中常用的型号和尺寸</title>
    <url>/2022/09/15/iPhone_dev_size/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>经常忘了一些重要尺寸，做个备忘：</p>
<h2 id="一、屏幕尺寸-启动图作图大小"><a href="#一、屏幕尺寸-启动图作图大小" class="headerlink" title="一、屏幕尺寸/启动图作图大小"></a>一、屏幕尺寸/启动图作图大小</h2><table>
<thead>
<tr>
<th align="left">型号</th>
<th align="center">屏幕尺寸(inch)</th>
<th align="center">屏幕密度(ppi)</th>
<th align="center">屏幕宽高(pt)</th>
<th align="center">屏幕分辨率(px)</th>
<th align="center">倍图</th>
</tr>
</thead>
<tbody><tr>
<td align="left">iPhone 4/4S</td>
<td align="center">3.5</td>
<td align="center">326</td>
<td align="center">320 * 480</td>
<td align="center">640 * 960</td>
<td align="center">@2x</td>
</tr>
<tr>
<td align="left">iPhone 5/5C/5S/SE</td>
<td align="center">4.0</td>
<td align="center">326</td>
<td align="center">320 * 568</td>
<td align="center">640 * 1136</td>
<td align="center">@2x</td>
</tr>
<tr>
<td align="left">iPhone 6/6s/7/8/SE 2</td>
<td align="center">4.7</td>
<td align="center">326</td>
<td align="center">375 * 667</td>
<td align="center">750 * 1334</td>
<td align="center">@2x</td>
</tr>
<tr>
<td align="left">iPhone 6/6S/7/8 Plus</td>
<td align="center">5.5</td>
<td align="center">401</td>
<td align="center">414 * 736</td>
<td align="center">1242 * 2208</td>
<td align="center">@3x</td>
</tr>
<tr>
<td align="left">iPhone X / XS / 11 Pro</td>
<td align="center">5.8</td>
<td align="center">458</td>
<td align="center">375 * 812</td>
<td align="center">1125 * 2436</td>
<td align="center">@3x</td>
</tr>
<tr>
<td align="left">iPhone Xr / 11</td>
<td align="center">6.1</td>
<td align="center">326</td>
<td align="center">414 * 896</td>
<td align="center">828 * 1792</td>
<td align="center">@2x</td>
</tr>
<tr>
<td align="left">iPhone XS Max / 11 Pro Max</td>
<td align="center">6.5</td>
<td align="center">458</td>
<td align="center">414 * 896</td>
<td align="center">1242 * 2688</td>
<td align="center">@3x</td>
</tr>
<tr>
<td align="left">iPhone 12 mini</td>
<td align="center">5.4</td>
<td align="center">476</td>
<td align="center">375 * 812</td>
<td align="center">1125 * 2436</td>
<td align="center">@3x</td>
</tr>
<tr>
<td align="left">iPhone 12 / 12 Pro</td>
<td align="center">6.1</td>
<td align="center">460</td>
<td align="center">390 * 844</td>
<td align="center">1170 * 2532</td>
<td align="center">@3x</td>
</tr>
<tr>
<td align="left">iPhone 12 Pro Max</td>
<td align="center">6.7</td>
<td align="center">458</td>
<td align="center">428 * 926</td>
<td align="center">1284 * 2778</td>
<td align="center">@3x</td>
</tr>
<tr>
<td align="left">iPhone 13 mini</td>
<td align="center">5.4</td>
<td align="center">476</td>
<td align="center">375 * 812</td>
<td align="center">1125 * 2436</td>
<td align="center">@3x</td>
</tr>
<tr>
<td align="left">iPhone 13 / 13 Pro</td>
<td align="center">6.1</td>
<td align="center">460</td>
<td align="center">390 * 844</td>
<td align="center">1170 * 2532</td>
<td align="center">@3x</td>
</tr>
<tr>
<td align="left">iPhone 13 Pro Max</td>
<td align="center">6.7</td>
<td align="center">458</td>
<td align="center">428 * 926</td>
<td align="center">1284 * 2778</td>
<td align="center">@3x</td>
</tr>
<tr>
<td align="left">iPhone 14</td>
<td align="center">6.1</td>
<td align="center">460</td>
<td align="center">375 * 812</td>
<td align="center">1125 * 2436</td>
<td align="center">@3x</td>
</tr>
<tr>
<td align="left">iPhone 14 Plus</td>
<td align="center">6.7</td>
<td align="center">458</td>
<td align="center">428 * 926</td>
<td align="center">1284 * 2778</td>
<td align="center">@3x</td>
</tr>
<tr>
<td align="left">iPhone 14 Pro</td>
<td align="center">6.1</td>
<td align="center">460</td>
<td align="center">393 * 852</td>
<td align="center">1179 * 2556</td>
<td align="center">@3x</td>
</tr>
<tr>
<td align="left">iPhone 14 Pro Max</td>
<td align="center">6.7</td>
<td align="center">460</td>
<td align="center">430 * 932</td>
<td align="center">1290 * 2796</td>
<td align="center">@3x</td>
</tr>
</tbody></table>
<span id="more"></span>

<h2 id="二、APP-桌面logo图片尺寸"><a href="#二、APP-桌面logo图片尺寸" class="headerlink" title="二、APP 桌面logo图片尺寸"></a>二、APP 桌面logo图片尺寸</h2><table>
<thead>
<tr>
<th align="center">标注</th>
<th align="center">尺寸(px)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">iPhone Notification 20pt @2x</td>
<td align="center">40 * 40</td>
</tr>
<tr>
<td align="center">iPhone Notification 20pt @3x</td>
<td align="center">60 * 60</td>
</tr>
<tr>
<td align="center">iPhone Settings 29pt @2x</td>
<td align="center">58 * 58</td>
</tr>
<tr>
<td align="center">iPhone Settings 29pt @3x</td>
<td align="center">87 * 87</td>
</tr>
<tr>
<td align="center">iPhone Spotlight 40pt @2x</td>
<td align="center">80 * 80</td>
</tr>
<tr>
<td align="center">iPhone Spotlight 40pt @3x</td>
<td align="center">120 * 120</td>
</tr>
<tr>
<td align="center">iPhone App 60pt @2x</td>
<td align="center">120 * 120</td>
</tr>
<tr>
<td align="center">iPhone App 60pt @3x</td>
<td align="center">180 * 180</td>
</tr>
<tr>
<td align="center">App Store 1024pt @1x</td>
<td align="center">1024 * 1024</td>
</tr>
</tbody></table>
<p>Xcode 14 不是说只需要一张 1024 吗，但我试着不太对，是我搞错了吗…😢</p>
<h2 id="三、安全区"><a href="#三、安全区" class="headerlink" title="三、安全区"></a>三、安全区</h2><table>
<thead>
<tr>
<th align="center">型号</th>
<th align="center">Edge(Top, Left, Bottom, Right)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">iPhone SE / 5S</td>
<td align="center">——</td>
</tr>
<tr>
<td align="center">iPhone 6s / 7 / 8</td>
<td align="center">——</td>
</tr>
<tr>
<td align="center">iPhone 6 / 7 / 8 Plus</td>
<td align="center">——</td>
</tr>
<tr>
<td align="center">iPhone X / XS</td>
<td align="center">(44, 0, 34, 0)</td>
</tr>
<tr>
<td align="center">iPhone Xr / 11</td>
<td align="center">(48, 0, 34, 0)</td>
</tr>
<tr>
<td align="center">iPhone XS Max / 11 Pro Max</td>
<td align="center">(44, 0, 34, 0)</td>
</tr>
<tr>
<td align="center">iPhone 12 mini / 13mini</td>
<td align="center">(50, 0, 34, 0)</td>
</tr>
<tr>
<td align="center">iPhone 12 / 12 Pro / 13 / 13 Pro</td>
<td align="center">(47, 0, 34, 0)</td>
</tr>
<tr>
<td align="center">iPhone 12 Pro Max / 13 Pro Max</td>
<td align="center">(47, 0, 34, 0)</td>
</tr>
<tr>
<td align="center">iPhone 14</td>
<td align="center">(47, 0, 34, 0)</td>
</tr>
<tr>
<td align="center">iPhone 14 Plus</td>
<td align="center">(47, 0, 34, 0)</td>
</tr>
<tr>
<td align="center">iPhone 14 Pro</td>
<td align="center">(59, 0, 34, 0)</td>
</tr>
<tr>
<td align="center">iPhone 14 Pro Max</td>
<td align="center">(59, 0, 34, 0)</td>
</tr>
</tbody></table>
<h2 id="四、Tabbar-作图大小"><a href="#四、Tabbar-作图大小" class="headerlink" title="四、Tabbar 作图大小"></a>四、Tabbar 作图大小</h2><table>
<thead>
<tr>
<th align="center">型号</th>
<th align="center">尺寸(px)</th>
<th align="center">Tabbar 高度(pt)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">iPhone SE / 5S</td>
<td align="center">640 * 98</td>
<td align="center">49</td>
</tr>
<tr>
<td align="center">iPhone 6s / 7 / 8</td>
<td align="center">750 * 98</td>
<td align="center">49</td>
</tr>
<tr>
<td align="center">iPhone 6 / 7 / 8 Plus</td>
<td align="center">1242 * 147</td>
<td align="center">49</td>
</tr>
<tr>
<td align="center">iPhone X / XS</td>
<td align="center">1125 * 249</td>
<td align="center">83</td>
</tr>
<tr>
<td align="center">iPhone Xr / 11</td>
<td align="center">828 * 166</td>
<td align="center">83</td>
</tr>
<tr>
<td align="center">iPhone XS Max / 11 Pro Max</td>
<td align="center">1242 * 249</td>
<td align="center">83</td>
</tr>
<tr>
<td align="center">iPhone 12 mini / 13mini</td>
<td align="center">1080 * 249</td>
<td align="center">83</td>
</tr>
<tr>
<td align="center">iPhone 12 / 12 Pro / 13 / 13 Pro</td>
<td align="center">1170 * 249</td>
<td align="center">83</td>
</tr>
<tr>
<td align="center">iPhone 12 Pro Max / 13 Pro Max</td>
<td align="center">1284 * 249</td>
<td align="center">83</td>
</tr>
<tr>
<td align="center">iPhone 14</td>
<td align="center">1170 * 249</td>
<td align="center">83</td>
</tr>
<tr>
<td align="center">iPhone 14 Plus</td>
<td align="center">1284 * 249</td>
<td align="center">83</td>
</tr>
<tr>
<td align="center">iPhone 14 Pro</td>
<td align="center">1179 * 249</td>
<td align="center">83</td>
</tr>
<tr>
<td align="center">iPhone 14 Pro Max</td>
<td align="center">1290 * 249</td>
<td align="center">83</td>
</tr>
</tbody></table>
<h2 id="五、硬件信息-设备名称"><a href="#五、硬件信息-设备名称" class="headerlink" title="五、硬件信息/设备名称"></a>五、硬件信息/设备名称</h2><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">+ (<span class="built_in">NSString</span> *)getDeviceString &#123;</span><br><span class="line">    <span class="keyword">struct</span> utsname systemInfo;</span><br><span class="line">    uname(&amp;systemInfo);</span><br><span class="line">    <span class="built_in">NSString</span> *platform = [<span class="built_in">NSString</span> stringWithCString:systemInfo.machine encoding:<span class="built_in">NSASCIIStringEncoding</span>];</span><br><span class="line">    <span class="built_in">NSDictionary</span> *dic = @&#123;</span><br><span class="line">                          <span class="comment">//iPhone</span></span><br><span class="line">                          <span class="string">@&quot;iPhone1,1&quot;</span> : <span class="string">@&quot;iPhone 1G&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone1,2&quot;</span> : <span class="string">@&quot;iPhone 3G&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone2,1&quot;</span> : <span class="string">@&quot;iPhone 3GS&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone3,1&quot;</span> : <span class="string">@&quot;iPhone 4&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone3,2&quot;</span> : <span class="string">@&quot;iPhone 4&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone3,3&quot;</span> : <span class="string">@&quot;iPhone 4&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone4,1&quot;</span> : <span class="string">@&quot;iPhone 4S&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone5,1&quot;</span> : <span class="string">@&quot;iPhone 5&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone5,2&quot;</span> : <span class="string">@&quot;iPhone 5&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone5,3&quot;</span> : <span class="string">@&quot;iPhone 5C&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone5,4&quot;</span> : <span class="string">@&quot;iPhone 5C&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone6,1&quot;</span> : <span class="string">@&quot;iPhone 5S&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone6,2&quot;</span> : <span class="string">@&quot;iPhone 5S&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone7,1&quot;</span> : <span class="string">@&quot;iPhone 6 Plus&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone7,2&quot;</span> : <span class="string">@&quot;iPhone 6&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone8,1&quot;</span> : <span class="string">@&quot;iPhone 6S&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone8,2&quot;</span> : <span class="string">@&quot;iPhone 6s Plus&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone8,4&quot;</span> : <span class="string">@&quot;iPhone SE&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone9,1&quot;</span> : <span class="string">@&quot;iPhone 7&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone9,3&quot;</span> : <span class="string">@&quot;iPhone 7&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone9,2&quot;</span> : <span class="string">@&quot;iPhone 7 Plus&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone9,4&quot;</span> : <span class="string">@&quot;iPhone 7 Plus&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone10,1&quot;</span> : <span class="string">@&quot;iPhone 8&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone10,4&quot;</span> : <span class="string">@&quot;iPhone 8&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone10,2&quot;</span> : <span class="string">@&quot;iPhone 8 Plus&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone10,5&quot;</span> : <span class="string">@&quot;iPhone 8 Plus&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone10,3&quot;</span> : <span class="string">@&quot;iPhone X&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone10,6&quot;</span> : <span class="string">@&quot;iPhone X&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone11,8&quot;</span> : <span class="string">@&quot;iPhone XR&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone11,2&quot;</span> : <span class="string">@&quot;iPhone XS&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone11,6&quot;</span> : <span class="string">@&quot;iPhone XS Max&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone11,4&quot;</span> : <span class="string">@&quot;iPhone XS Max&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone12,1&quot;</span> : <span class="string">@&quot;iPhone 11&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone12,3&quot;</span> : <span class="string">@&quot;iPhone 11 Pro&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone12,5&quot;</span> : <span class="string">@&quot;iPhone 11 Pro Max&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone12,8&quot;</span> : <span class="string">@&quot;iPhone SE 2&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone13,1&quot;</span> : <span class="string">@&quot;iPhone 12 mini&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone13,2&quot;</span> : <span class="string">@&quot;iPhone 12&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone13,3&quot;</span> : <span class="string">@&quot;iPhone 12 Pro&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone13,4&quot;</span> : <span class="string">@&quot;iPhone 12 Pro Max&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone14,4&quot;</span> : <span class="string">@&quot;iPhone 13 mini&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone14,5&quot;</span> : <span class="string">@&quot;iPhone 13&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone14,2&quot;</span> : <span class="string">@&quot;iPhone 13 Pro&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone14,3&quot;</span> : <span class="string">@&quot;iPhone 13 Pro Max&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone14,6&quot;</span> : <span class="string">@&quot;iPhone SE 3&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone14,7&quot;</span> : <span class="string">@&quot;iPhone 14&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone14,8&quot;</span> : <span class="string">@&quot;iPhone 14 Plus&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone15,2&quot;</span> : <span class="string">@&quot;iPhone 14 Pro&quot;</span>,</span><br><span class="line">                          <span class="string">@&quot;iPhone15,3&quot;</span> : <span class="string">@&quot;iPhone 14 Pro Max&quot;</span></span><br><span class="line">                          &#125;;</span><br><span class="line">    <span class="keyword">if</span> ([dic valueForKey:platform]) &#123;</span><br><span class="line">        <span class="keyword">return</span> [dic valueForKey:platform];</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> platform;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.theiphonewiki.com/wiki/Models">FYI-参考地址：https://www.theiphonewiki.com/wiki/Models</a></p>
]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>mailcore 2  iOS  之一 IMAP</title>
    <url>/2018/02/02/mailcore2-iOS%E4%B9%8B%E4%B8%80IMAP/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>公司开发oa中的邮箱，资源限制，最后iOS开发采用的mailcore2-ios框架。研究的不深，只当做个分享，口条不好，凑合看吧。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>我直接用的cocoapods，非常方便，只是资源包大了一点，耐心等待就好了，其他方式没试过。<br><code>pod &#39;mailcore2-ios&#39;</code></p>
<p><a href="https://github.com/MailCore/mailcore2">https://github.com/MailCore/mailcore2</a> 官方，有问题提issue，开发者会很热心回答的。</p>
<span id="more"></span>

<h2 id="更新-纠错日志"><a href="#更新-纠错日志" class="headerlink" title="更新/纠错日志"></a>更新/纠错日志</h2><ul>
<li>2018-12-11 纠错：IMAP-4.单封邮件获取和处理.根据uid获取单封邮件 有误，<code>range的范围应该是（uid, 0），而不是(uid, 1)，这样获取到的是两封</code>，脑子秀逗了。</li>
<li>2018-12-11 更新：创建草稿邮件</li>
<li>2018-12-12 更新：SMTP协议</li>
</ul>
<h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>个人比较喜欢imap协议，功能比较丰富，不过用mailcore搞起来似乎费劲了一点，我也只是实现了一些基本功能，高级的还在研究。</p>
<p>计划分享一下下面几项🤗🤗🤗🤗🤗</p>
<ul>
<li>IMAP<ul>
<li>登录</li>
<li>文件夹列表、命名空间</li>
<li>邮件列表拉取</li>
<li>邮件列表中单封邮件内容获取和处理</li>
<li>邮件的各种标记添加</li>
<li>删除邮件</li>
<li>附件和html内容解析</li>
<li>草稿箱邮件创建</li>
</ul>
</li>
<li>POP</li>
<li>SMTP<ul>
<li>见<a href="https://atommygirl.github.io/2018/12/12/mailcore2-iOS%E4%B9%8B%E4%BA%8CSMTP/">mailcore2-ios  之二 SMTP</a></li>
</ul>
</li>
</ul>
<h3 id="IMAP"><a href="#IMAP" class="headerlink" title="IMAP"></a>IMAP</h3><h4 id="1-登录"><a href="#1-登录" class="headerlink" title="1.登录"></a>1.登录</h4><p>首先设置账号信息，也就是创建session；然后校验；</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.imapSession.hostname = session.imapHost; <span class="comment">//imap.xxx.com.cn</span></span><br><span class="line"><span class="keyword">self</span>.imapSession.username = session.username; <span class="comment">//littlecat@xxx.com.cn</span></span><br><span class="line"><span class="keyword">self</span>.imapSession.password = session.password; <span class="comment">//password</span></span><br><span class="line"><span class="keyword">self</span>.imapSession.port     = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)session.imapPort;<span class="comment">//143、993</span></span><br><span class="line"><span class="keyword">self</span>.imapSession.connectionType = session.imapIsSSL ? MCOConnectionTypeTLS: MCOConnectionTypeClear;<span class="comment">//取决于你的邮件服务器是不是SSL的；</span></span><br></pre></td></tr></table></figure>

<p>校验信息：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">MCOIMAPOperation *checkOp = [session checkAccountOperation];<span class="comment">//这里的session就是配置帐号信息的session</span></span><br><span class="line">[checkOp start:^(<span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">     <span class="built_in">NSLog</span>(<span class="string">@&quot;finished checking account.&quot;</span>);</span><br><span class="line">     <span class="keyword">if</span> (error == <span class="literal">nil</span>) &#123;</span><br><span class="line">         complete(<span class="literal">nil</span>);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         err(error);</span><br><span class="line">         <span class="built_in">NSLog</span>(<span class="string">@&quot;error loading account: %@&quot;</span>, [error userInfo][<span class="string">@&quot;NSLocalizedDescription&quot;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h4 id="2-获取文件夹目录"><a href="#2-获取文件夹目录" class="headerlink" title="2.获取文件夹目录"></a>2.获取文件夹目录</h4><p>命名空间：它这里有个namespace，对于<code>中文名称</code>的📂名称，需要通过<code>命名空间</code>来解析，<code>不然很可能是👇这种乱码</code>：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这是当时解析网易邮箱的乱码，找原因找了好久😭😭😭，在一篇博客上看到的解决办法。</span></span><br><span class="line">INBOX</span><br><span class="line">&amp;g0l6P3ux-</span><br><span class="line">&amp;XfJT0ZAB-</span><br><span class="line">&amp;XfJSIJZk-</span><br><span class="line">&amp;V4NXPpCuTvY-</span><br><span class="line">&amp;dcVr0mWHTvZZOQ-</span><br><span class="line">&amp;Xn9USpCuTvY-</span><br><span class="line">&amp;i6KWBZCuTvY-</span><br><span class="line">Deleted Messages</span><br><span class="line">Archive</span><br><span class="line">Junk</span><br></pre></td></tr></table></figure>

<p>先把正确的放出来，找回点走下去的信心💔💔💗💖…</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">INBOX</span><br><span class="line">草稿箱</span><br><span class="line">已发送</span><br><span class="line">已删除</span><br><span class="line">垃圾邮件</span><br><span class="line">病毒文件夹</span><br><span class="line">广告邮件</span><br><span class="line">订阅邮件</span><br><span class="line">Deleted Messages</span><br><span class="line">Archive</span><br><span class="line">Junk</span><br></pre></td></tr></table></figure>

<p>因为<code>某些邮箱的session莫名其妙没有自带默认的命名空间</code>，我采取的笨办法是先去获取一下namespace，不过嘛，，，居然获取到的也时有时无😱😱😱😱😱</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">MCOIMAPSession *session = [MMIMAPTool getSession];</span><br><span class="line">MCOIMAPFetchNamespaceOperation * op = [session fetchNamespaceOperation];</span><br><span class="line">[op start:^(<span class="built_in">NSError</span> * __<span class="keyword">nullable</span> error, <span class="built_in">NSDictionary</span> * namespaces) &#123;</span><br><span class="line">     MCOIMAPNamespace * namespace = (session.defaultNamespace != <span class="literal">nil</span>) ? session.defaultNamespace : [namespaces objectForKey:MCOIMAPNamespacePersonal];</span><br><span class="line">    <span class="keyword">if</span> (!namespace) &#123;</span><br><span class="line">        <span class="comment">//没有命名空间，很可能文件夹的名字解析出来是乱码，这个看个人怎么处理吧；</span></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果拿到了namespace，可以安心获取folderlist了</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<p>关键的一句：<code>NSString *folername = [namespace componentsFromPath:f.path][0];</code></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">MCOIMAPFetchFoldersOperation * ops = [session fetchAllFoldersOperation];</span><br><span class="line">[ops start:^(<span class="built_in">NSError</span> * error,<span class="built_in">NSArray</span> *folders) &#123;</span><br><span class="line">   <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="keyword">return</span> ;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">NSMutableDictionary</span> *dic = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">   <span class="keyword">for</span> (MCOIMAPFolder *f <span class="keyword">in</span> folders) &#123;</span><br><span class="line">      <span class="built_in">NSString</span> *folername = [namespace componentsFromPath:f.path][<span class="number">0</span>];</span><br><span class="line">      [dic setValue:f.path forKey:folername];</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">//继续其他处理；</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<p>获取某个文件夹的mail数目等信息</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">MCOIMAPFolderInfoOperation *folderInfo = [session folderInfoOperation:foldername];</span><br><span class="line"></span><br><span class="line">[folderInfo start:^(<span class="built_in">NSError</span> *error, MCOIMAPFolderInfo *info) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;    </span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">     &#125;</span><br><span class="line">    complete(info.messageCount);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h4 id="3-拉取某个文件夹邮件列表"><a href="#3-拉取某个文件夹邮件列表" class="headerlink" title="3.拉取某个文件夹邮件列表"></a>3.拉取某个文件夹邮件列表</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这里的kind我觉得是需要拉取的内容们，我是几乎大部分都down了，可以看情况自己选择；</span></span><br><span class="line"><span class="comment">//拉取范围，（0，UINT64_MAX）就是都拉取了，我是10条10条的来的。</span></span><br><span class="line">MCOIMAPMessagesRequestKind requestKind = (MCOIMAPMessagesRequestKind)</span><br><span class="line">(MCOIMAPMessagesRequestKindHeaders |</span><br><span class="line"> MCOIMAPMessagesRequestKindStructure |</span><br><span class="line"> MCOIMAPMessagesRequestKindInternalDate|</span><br><span class="line"> MCOIMAPMessagesRequestKindHeaderSubject |</span><br><span class="line"> MCOIMAPMessagesRequestKindFlags);</span><br><span class="line"></span><br><span class="line">MCOIndexSet *uids = [MCOIndexSet indexSetWithRange:MCORangeMake(range.location, range.length)];<span class="comment">//range控制拉取的邮件的范围，UINT64_MAX</span></span><br><span class="line">MCOIMAPFetchMessagesOperation *op = [session fetchMessagesOperationWithFolder:foldername requestKind:requestKind uids:uids];</span><br><span class="line">[op start:^(<span class="built_in">NSError</span> * _Nullable error, <span class="built_in">NSArray</span> * _Nullable messages, MCOIndexSet * _Nullable vanishedMessages) &#123;</span><br><span class="line">     <span class="built_in">NSMutableArray</span> *listArr = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">     <span class="built_in">NSInteger</span> count = messages.count;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i ++) &#123;</span><br><span class="line">            MCOIMAPMessage *msg = messages[i];</span><br><span class="line">            <span class="comment">//一堆属性，自己摘取吧，大多是header里的，为了显示邮件列表，邮件内容是另外单独获取的，存储也只是存储了列表；</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//又拍了一次顺序，好像有点蠢🙄🙄🙄🙄🙄。。。我是根据uid排序的，目前还没发现乱序什么的</span></span><br><span class="line">    <span class="built_in">NSSortDescriptor</span> *sortDescriptor = [<span class="built_in">NSSortDescriptor</span> sortDescriptorWithKey:<span class="string">@&quot;uid&quot;</span> ascending:<span class="literal">NO</span>];</span><br><span class="line">    [listArr sortUsingDescriptors:[<span class="built_in">NSArray</span> arrayWithObject:sortDescriptor]];</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<p>还有另外一个方法，但是实在没太搞懂里面的number参数，文档里说sequence number不能排序用，所以我没选择这个方法，主要是没懂👺👺👺👺👺👺👺</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Returns an operation to fetch messages by (sequence) number.</span></span><br><span class="line">- (MCOIMAPFetchMessagesOperation *) fetchMessagesByNumberOperationWithFolder:(<span class="built_in">NSString</span> *)folder requestKind:(MCOIMAPMessagesRequestKind)requestKind numbers:(MCOIndexSet *)numbers;</span><br></pre></td></tr></table></figure>

<h4 id="4-单封邮件获取和处理"><a href="#4-单封邮件获取和处理" class="headerlink" title="4.单封邮件获取和处理"></a>4.单封邮件获取和处理</h4><ul>
<li><p>根据uid获取单封邮件</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//和获取邮件列表一样，不过range的长度是0；</span></span><br><span class="line">MCOIndexSet *uids = [MCOIndexSet indexSetWithRange:MCORangeMake(uid, <span class="number">0</span>)];</span><br><span class="line"><span class="comment">//之前写错了，range长度应该是0，而不是1；</span></span><br><span class="line"><span class="comment">//MCOIndexSet *uids = [MCOIndexSet indexSetWithRange:MCORangeMake(uid, 1)];</span></span><br></pre></td></tr></table></figure></li>
<li><p>获取邮件纯文本内容（不包括html样式等）</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     <span class="comment">//这里是在上一步获取单个邮件的回调内进行的</span></span><br><span class="line">     <span class="comment">//这个方法是自动把文本中的空行之类的去掉了，也有不去掉和可选是否去掉的方法</span></span><br><span class="line">        MCOIMAPMessage *msg = [<span class="comment">//上一步的message];</span></span><br><span class="line">        MCOIMAPMessageRenderingOperation *  messageRenderingOperation = [session plainTextBodyRenderingOperationWithMessage:msg folder:foldername];</span><br><span class="line">        [messageRenderingOperation start:^(<span class="built_in">NSString</span> * plainTextBodyString,<span class="built_in">NSError</span> * error) &#123;</span><br><span class="line">            <span class="keyword">if</span> (error == <span class="literal">nil</span>) &#123;</span><br><span class="line">                complete(plainTextBodyString, msg);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@&quot;fetch plain text error:%@&quot;</span>,error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">文档里注释的不能再清楚了，自己查阅吧😈😈😈😈😈</span><br><span class="line"><span class="comment">//Returns an operation to render the plain text version of a message.</span></span><br><span class="line">- (MCOIMAPMessageRenderingOperation *) plainTextRenderingOperationWithMessage:(MCOIMAPMessage *)message folder:(<span class="built_in">NSString</span> *)folder;</span><br><span class="line"><span class="comment">// All end of line will be removed and white spaces cleaned up if requested.</span></span><br><span class="line">- (MCOIMAPMessageRenderingOperation *) plainTextBodyRenderingOperationWithMessage:(MCOIMAPMessage *)message folder:(<span class="built_in">NSString</span> *)folder stripWhitespace:(<span class="built_in">BOOL</span>)stripWhitespace;</span><br></pre></td></tr></table></figure>

<ul>
<li>获取html内容，放在一个webview中显示基本内容应该没问题了<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">MCOIMAPMessage *msg = [同样是上一步的message];</span><br><span class="line">MCOIMAPMessageRenderingOperation *  messageRenderingOperation = [session htmlBodyRenderingOperationWithMessage:msg folder:foldername];</span><br><span class="line">[messageRenderingOperation start:^(<span class="built_in">NSString</span> * _Nullable htmlString, <span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">     <span class="keyword">if</span> (error == <span class="literal">nil</span>) &#123;</span><br><span class="line">         complete(htmlString, msg);</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="built_in">NSLog</span>(<span class="string">@&quot;fetch plain text error:%@&quot;</span>,error);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="5-添加各种标记"><a href="#5-添加各种标记" class="headerlink" title="5.添加各种标记"></a>5.添加各种标记</h4><p>已读未读，小红旗标记等等。需要注意的是，<code>“kind”区分是添加标记还是移除标记</code>，例如已读“MCOMessageFlagSeen”标记，移除就成了未读，<code>没有“unseen”之类的。。。</code></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setFlagged:(<span class="built_in">BOOL</span>)flagged message:(<span class="built_in">NSInteger</span>)uid folder:(<span class="built_in">NSString</span> *)folder &#123;</span><br><span class="line">    MCOIMAPSession *session = <span class="comment">//imap session；</span></span><br><span class="line">    MCOIndexSet *uids = [MCOIndexSet indexSetWithIndex:uid];</span><br><span class="line">    MCOIMAPOperation *op = [session storeFlagsOperationWithFolder:folder</span><br><span class="line">                                                             uids:uids</span><br><span class="line">                                                             kind:(flagged ? MCOIMAPStoreFlagsRequestKindSet : MCOIMAPStoreFlagsRequestKindRemove)</span><br><span class="line">                                                            flags:MCOMessageFlagFlagged];</span><br><span class="line">    [op start:^(<span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;store star flag &#x27;s error: %@&quot;</span>,error);</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果要批量设置标记，uids可以通过range来创建</span></span><br><span class="line">    MCOIndexSet *uids = [MCOIndexSet indexSetWithRange:MCORangeMake(range.location, range.length)];</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="6-删除邮件"><a href="#6-删除邮件" class="headerlink" title="6.删除邮件"></a>6.删除邮件</h4><p>为什么先说的标记那部分，因为删除邮件也是添加“delete”标记。这里需要做一个区分，<code>要删除的邮件是不是在 “已删除/草稿箱” 这两个文件夹</code>。</p>
<p>主要操作有三个：</p>
<ul>
<li>1、copy一份到“已删除”</li>
<li>2、设置删除标记</li>
<li>3、执行擦除expunge操作</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//**如果是不在已删除，草稿箱，执行1、2、3</span></span><br><span class="line"><span class="comment">//**如果在，只执行2、3</span></span><br><span class="line">    <span class="keyword">if</span> (![folder isEqualToString:deleteFolder] &amp;&amp; ![folder isEqualToString:draftFolder]) &#123;</span><br><span class="line">        <span class="comment">//copy 一份到已删除</span></span><br><span class="line">        MCOIMAPCopyMessagesOperation *op = [imapSession copyMessagesOperationWithFolder:folder</span><br><span class="line">                                                                                                    uids:[MCOIndexSet indexSetWithIndex:uid]</span><br><span class="line">                                                                                              destFolder:deleteFolder];</span><br><span class="line">        [op start:^(<span class="built_in">NSError</span> *error, <span class="built_in">NSDictionary</span> *uidMapping) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;Error copy message to folder:%@&quot;</span>, error);</span><br><span class="line">            [<span class="keyword">self</span> unturnedDelete:uid folder:folder];</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        [<span class="keyword">self</span> unturnedDelete:uid folder:folder];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)unturnedDelete:(<span class="built_in">NSInteger</span>)uid folder:(<span class="built_in">NSString</span> *)folder </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//先添加删除flags</span></span><br><span class="line">    MCOIMAPOperation * op2 = [imapSession storeFlagsOperationWithFolder:folder</span><br><span class="line">                                                                                    uids:[MCOIndexSet indexSetWithIndex:uid]</span><br><span class="line">                                                                                    kind:MCOIMAPStoreFlagsRequestKindSet</span><br><span class="line">                                                                                   flags:MCOMessageFlagDeleted];</span><br><span class="line">    [op2 start:^(<span class="built_in">NSError</span> * error) &#123;</span><br><span class="line">        <span class="comment">//添加成功之后对当前文件夹进行expunge操作</span></span><br><span class="line">        MCOIMAPOperation *deleteOp = [imapSession expungeOperation:folder];</span><br><span class="line">        [deleteOp start:^(<span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">            <span class="keyword">if</span>(error) &#123;</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@&quot;Error expunging folder:%@&quot;</span>, error);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@&quot;Successfully expunged folder&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7-附件处理和html内容解析"><a href="#7-附件处理和html内容解析" class="headerlink" title="7.附件处理和html内容解析"></a>7.附件处理和html内容解析</h4><ul>
<li><p>官方demo<br><a href="https://github.com/MailCore/mailcore2/tree/master/example/ios/iOS%20UI%20Test/iOS%20UI%20Test">https://github.com/MailCore/mailcore2/tree/master/example/ios/iOS%20UI%20Test/iOS%20UI%20Test</a><br>github上他们有写一个demo，我直接用了里面两个类，messageView又自己加了些乱七八糟的逻辑。protocol方便解析的，具体讲解后续更新。<br><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/24.png"></p>
</li>
<li><p>MCOHTMLRendererIMAPDelegate<br>这个协议里面，提供了可以自主解析附件、图片、html内容，以及简单给定html展示样式的方法。先贴出header、正文、附件，我自己写的一个简单展示模板吧，内容处理这块东西太多了，整理一下再继续更新。<br><a href="https://github.com/ATommyGirl/TemplateForMailCore2">TemplateForAttachment.html</a><br><a href="https://github.com/ATommyGirl/TemplateForMailCore2">TemplateForMessage.html</a><br><a href="https://github.com/ATommyGirl/TemplateForMailCore2">TemplateForMainHeader.html</a></p>
</li>
</ul>
<h4 id="8-创建草稿箱邮件"><a href="#8-创建草稿箱邮件" class="headerlink" title="8.创建草稿箱邮件"></a>8.创建草稿箱邮件</h4><p>​     “append” 拼接的概念，往一个文件夹内添加邮件；</p>
<ul>
<li>1、新建一封新邮件(SMTP中讲创建邮件)</li>
<li>2、获取你的草稿箱文件夹名称</li>
<li>3、执行append操作<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这里的data就是新建的邮件；</span></span><br><span class="line">- (<span class="keyword">void</span>)createDraft:(<span class="built_in">NSData</span> *)data block:(<span class="keyword">void</span>(^)(<span class="keyword">bool</span> success, uint32_t uid, <span class="built_in">NSString</span> *folder))block</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!imapSession ) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSString</span> *folder = <span class="string">@&quot;Drafts&quot;</span> <span class="comment">//草稿箱 ,或者是你邮箱服务器解析到的草稿箱文件夹名称；</span></span><br><span class="line"></span><br><span class="line">    MCOIMAPAppendMessageOperation *op = [imapSession appendMessageOperationWithFolder:folder messageData:data flags:MCOMessageFlagDraft];</span><br><span class="line">    [op start:^(<span class="built_in">NSError</span> *error, uint32_t createdUID) &#123;</span><br><span class="line">        <span class="comment">//do your operation;</span></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;create Draft message :%@&quot;</span>,@(createdUID));</span><br><span class="line"></span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>邮箱</tag>
      </tags>
  </entry>
  <entry>
    <title>iTerm 2 分屏切换</title>
    <url>/2020/12/14/iTerm%202%20%E5%88%86%E5%B1%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><code>⌘ + d</code>:  垂直分屏</li>
<li><code>⌘ + shift + d</code>:  水平分屏</li>
<li><code>⌘ + ]</code>和<code>⌘ + [</code> ：在最近使用的分屏直接切换</li>
<li><code>⌘ + opt + 方向键</code>：切换到指定位置的分屏</li>
<li><code>⌘ + 数字</code>：切换标签页</li>
<li><code>⌘ + 方向键</code> ：按方向切换标签页</li>
<li><code>shift + ⌘ + s</code>：保存当前窗口快照</li>
<li><code>⌘ + opt + b</code>：快照回放，很有意思的功能，你可以对你的操作根据时间轴进行回放。可以拖动下方的时间轴，也可以按左右方向键。</li>
</ul>
<p>PS: 如果发现快捷键没起作用，可以看看是不是和系统或者其他软件的快捷键冲突了……</p>
]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>mailcore 2 iOS  之二 SMTP</title>
    <url>/2018/12/12/mailcore2-iOS%E4%B9%8B%E4%BA%8CSMTP/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>起源见 <a href="http://atommygirl.github.io/2018/02/02/2018-02-02-mailcore-2-iOS-%E4%B9%8B%E4%B8%80-IMAP/">mailcore2-ios  之一 IMAP</a></p>
<p>上一篇大致说了下IMAP协议中的简单使用，看到文章有人看，为了我的<code>三个</code>👨‍💻‍👨‍💻‍👨‍💻‍粉丝，那我继续更新一下，</p>
<p>希望对你们有帮助，也做个沟通交流。</p>
<ul>
<li><p>IMAP <a href="http://zhengyatian.github.io/2018/02/02/2018-02-02-mailcore-2-iOS-%E4%B9%8B%E4%B8%80-IMAP/">mailcore2-ios  之一 IMAP</a></p>
</li>
<li><p>SMTP</p>
  <span id="more"></span>

<ul>
<li>登录/用户验证</li>
<li>创建邮件体</li>
<li>附件添加</li>
<li>发送</li>
<li>发送成功后<code>手动</code>添加到<code>“已发送”</code>文件夹</li>
</ul>
</li>
</ul>
<h3 id="SMTP"><a href="#SMTP" class="headerlink" title="SMTP"></a>SMTP</h3><h4 id="1、登录-用户验证"><a href="#1、登录-用户验证" class="headerlink" title="1、登录/用户验证"></a>1、登录/用户验证</h4><p>​    不论哪种协议，都需要先验证邮箱地址/服务器、密码、端口等，SMTP也一样，你也可以不验证，大不了就是发不出去邮件。。。🤓🤓🤓🤓🤓</p>
<p>创建session，都类似的</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.smtpSession.hostname = session.smtpHost;<span class="comment">//smtp.***.com</span></span><br><span class="line"><span class="keyword">self</span>.smtpSession.username = session.username;<span class="comment">//littlecat@xxx.com.cn</span></span><br><span class="line"><span class="keyword">self</span>.smtpSession.password = session.password;<span class="comment">//password</span></span><br><span class="line"><span class="keyword">self</span>.smtpSession.port     = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)session.smtpPort;<span class="comment">//25、465、587？</span></span><br><span class="line"><span class="keyword">self</span>.smtpSession.connectionType = session.smtpIsSSL ? MCOConnectionTypeTLS: MCOConnectionTypeClear;<span class="comment">//取决于你的邮件服务器是不是SSL的；</span></span><br><span class="line"><span class="keyword">self</span>.smtpSession.authType = MCOAuthTypeSASLLogin;<span class="comment">//session校验的类型，这里选的登录，其他还没搞明白(没看。。)😌</span></span><br></pre></td></tr></table></figure>

<p>校验邮箱信息</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">MCOSMTPOperation *smtpOperation = [smtpSession loginOperation];</span><br><span class="line">[smtpOperation start:^(<span class="built_in">NSError</span> * error) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;finished checking SMTP account.&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (error == <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="comment">//now ,you can send email.</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;error check smtp account: %@&quot;</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<h4 id="2、创建邮件"><a href="#2、创建邮件" class="headerlink" title="2、创建邮件"></a>2、创建邮件</h4><ul>
<li>create message builder;</li>
<li>set sender(from)、receiver（to）、cc and bcc;</li>
<li>set body (html body  or  plain text body);</li>
</ul>
<p>懒得正经打字了，bite me！🙄🙄🙄🙄🙄🙄🙄🙄🙄🙄</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)messageBuildFrom:(<span class="built_in">NSString</span> *)displayName <span class="comment">// 发件人昵称，可以不设置；</span></span><br><span class="line">                 mailBox:(<span class="built_in">NSString</span> *)mail  <span class="comment">//发件人邮箱地址；</span></span><br><span class="line">                      to:(<span class="built_in">NSArray</span> *)to  <span class="comment">//收件人（邮箱地址字符串格式，下同）；</span></span><br><span class="line">                      cc:(<span class="built_in">NSArray</span> *)cc  <span class="comment">//抄送人；</span></span><br><span class="line">                     bcc:(<span class="built_in">NSArray</span> *)bcc  <span class="comment">//密送人；</span></span><br><span class="line">                 subject:(<span class="built_in">NSString</span> *)subject  <span class="comment">//邮件主题；</span></span><br><span class="line">                textBody:(<span class="built_in">NSString</span> *)body  <span class="comment">//邮件正文，我这里是带标签的html文本；</span></span><br><span class="line">                 attachs:(<span class="built_in">NSDictionary</span> *)attachs  <span class="comment">//附件s（文件名称和NSData格式数据）；</span></span><br><span class="line">                htmlBody:(MCOAbstractMessage *)msgParser  <span class="comment">//转发时的原邮件；</span></span><br><span class="line">         completeHandler:(<span class="keyword">void</span>(^)())complete</span><br><span class="line">                   error:(<span class="keyword">void</span>(^)(<span class="built_in">NSError</span> *error))fail</span><br><span class="line">&#123;</span><br><span class="line">    MCOMessageBuilder *msgBuilder = [[MCOMessageBuilder alloc] init];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//header;</span></span><br><span class="line">    <span class="keyword">if</span> (displayName != <span class="literal">nil</span>) &#123;</span><br><span class="line">        msgBuilder.header.from = [MCOAddress addressWithDisplayName:displayName mailbox:mail];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        msgBuilder.header.from = [MCOAddress addressWithMailbox:mail];</span><br><span class="line">    &#125;</span><br><span class="line">    msgBuilder.header.to      = [<span class="keyword">self</span> mailStringToMCOAddress:to];<span class="comment">//字符串格式的邮箱地址，要转成address类；</span></span><br><span class="line">    msgBuilder.header.cc      = [<span class="keyword">self</span> mailStringToMCOAddress:cc];</span><br><span class="line">    msgBuilder.header.bcc     = [<span class="keyword">self</span> mailStringToMCOAddress:bcc];</span><br><span class="line">    msgBuilder.header.subject = subject;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//body</span></span><br><span class="line">    [msgBuilder setHTMLBody:body];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//------见下</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSArray</span> *)mailStringToMCOAddress:(<span class="built_in">NSArray</span> *)arr</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *temp = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *str <span class="keyword">in</span> arr) &#123;</span><br><span class="line">        MCOAddress *add = [MCOAddress addressWithMailbox:str];</span><br><span class="line">        [temp addObject:add];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp.copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3、附件处理"><a href="#3、附件处理" class="headerlink" title="3、附件处理"></a>3、附件处理</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)messageBuildFrom:(<span class="built_in">NSString</span> *)displayName</span><br><span class="line">                 mailBox:(<span class="built_in">NSString</span> *)mail</span><br><span class="line">                      to:(<span class="built_in">NSArray</span> *)to</span><br><span class="line">                      cc:(<span class="built_in">NSArray</span> *)cc</span><br><span class="line">                     bcc:(<span class="built_in">NSArray</span> *)bcc</span><br><span class="line">                 subject:(<span class="built_in">NSString</span> *)subject</span><br><span class="line">                textBody:(<span class="built_in">NSString</span> *)body</span><br><span class="line">                 attachs:(<span class="built_in">NSDictionary</span> *)attachs</span><br><span class="line">                htmlBody:(MCOAbstractMessage *)msgParser</span><br><span class="line">         completeHandler:(<span class="keyword">void</span>(^)())complete</span><br><span class="line">                   error:(<span class="keyword">void</span>(^)(<span class="built_in">NSError</span> *error))fail</span><br><span class="line">&#123;</span><br><span class="line">    MCOMessageBuilder *msgBuilder = [[MCOMessageBuilder alloc] init];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -------见上 。。。 ------//</span></span><br><span class="line">    <span class="keyword">if</span> (msgParser != <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="comment">//附加资源，</span></span><br><span class="line">        <span class="built_in">NSArray</span> *inAttach = msgParser.htmlInlineAttachments;</span><br><span class="line">        <span class="keyword">for</span> (MCOAttachment *attach <span class="keyword">in</span> inAttach) &#123;</span><br><span class="line">            <span class="built_in">NSString</span> * path = [<span class="built_in">NSTemporaryDirectory</span>() stringByAppendingPathComponent:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;%@_%@&quot;</span>,msgParser.header.messageID,attach.filename]];</span><br><span class="line">            <span class="built_in">NSData</span> *data = [<span class="built_in">NSData</span> dataWithContentsOfFile:path];</span><br><span class="line">            <span class="keyword">if</span> (data) &#123;</span><br><span class="line">                MCOAttachment *temp = [MCOAttachment attachmentWithData:data filename:attach.filename];</span><br><span class="line">                temp.inlineAttachment = <span class="literal">YES</span>;</span><br><span class="line">                [msgBuilder addRelatedAttachment:temp];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//看接口文档的意思，上面是把转发的邮件中的附件添加上，</span></span><br><span class="line">    <span class="comment">//可是并不起作用。。。采取的方法是，下面循环再添加一次。。。。🤧🤧🤧🤧🤧</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//附件</span></span><br><span class="line">    <span class="keyword">if</span> (attachs) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">NSString</span> *name <span class="keyword">in</span> attachs.allKeys) &#123;</span><br><span class="line">            MCOAttachment *attach = [MCOAttachment attachmentWithData:[attachs objectForKey:name] filename:name];</span><br><span class="line">            [msgBuilder addAttachment:attach];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//send</span></span><br><span class="line">    <span class="comment">//--------见下</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4、发送邮件"><a href="#4、发送邮件" class="headerlink" title="4、发送邮件"></a>4、发送邮件</h4><p>邮件也创建了，附件添加完，终于要发送了，但是要注意的是<code>发送操作成功完成后，对方确实可以成功收到，但是在发送方的“已发送”是没有的，需要手动append一份过去</code>。<br>执行append操作，需要用<code>imapSession</code>的，不要搞错了。😅<br> “已发送”文件夹的filepath，可能是 <code>Sent、Sent Messages</code>等等，具体看你解析的邮箱服务器，不一定都是Sent 哦。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//send</span></span><br><span class="line"><span class="built_in">NSData</span> *rfc822 = [msgBuilder data];</span><br><span class="line">MCOSMTPSendOperation *send = [smtpSession sendOperationWithData:rfc822];</span><br><span class="line">[send start:^(<span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        fail(error);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//发送成功后，手动添加到“已发送”；</span></span><br><span class="line">        MCOIMAPAppendMessageOperation *op = [imapSession appendMessageOperationWithFolder:[MMIMAPTool getVirtualNameFor:<span class="string">@&quot;Sent&quot;</span>] messageData:rfc822 flags:MCOMessageFlagMDNSent];</span><br><span class="line">        [op start:^(<span class="built_in">NSError</span> *error, uint32_t createdUID) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;create sent message :%@\nerror:%@&quot;</span>, @(createdUID), error);</span><br><span class="line">        &#125;];</span><br><span class="line">        complete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<p>注：上一篇IMAP使用中提到过，创建草稿，过程和这个类似，不过最后执行append 是 放到 <code>草稿箱</code>，不是<code>已发送</code>了。</p>
<h4 id="POP-还没写"><a href="#POP-还没写" class="headerlink" title="POP 还没写"></a>POP <a href>还没写</a></h4>]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>邮箱</tag>
      </tags>
  </entry>
  <entry>
    <title>别人眼中的你不是你，你眼中的别人才是你</title>
    <url>/2023/09/18/myself/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/images.jpeg" style="zoom:100%;">

<hr>
<p>&#8195;&#8195;前两天和同事激烈的讨论问题时，突然间又想起了这句话，瞬间就不想再吵、不想讲话了。</p>
<p>&#8195;&#8195;不记得在哪里看到的一段话，想想说的挺好：那就是你所遇到的所有人其实都是你自己。如果你是一个在生活当中特别在意别人看法的人，并且你想获得在任何场合都镇定自若的气场，你就时刻刻提醒自己这个观点。</p>
<p>&#8195;&#8195;我们先思考这样一个现象，就是为什么当没有人知道你在做什么的时候，你反而会活得更好更自在，而一旦你的朋友，你的同事，你的父母知道你的工作，你的生活，你要做的事情的时候，你反而会不断的陷入到各种的困境之中。古人说事以密成，语以泄败。大概的意思就是说，一旦有人知道了你的目标，那么你原本那种势如破竹的状态就会瞬间被破坏，为什么？这个现象的答案其实是心智占据，当存在一些观众的时候，我们就不得不分离出一部分的心智来应对这些观众，我们会本能的希望自己在对方的眼里表现的还不错。</p>
<p>&#8195;&#8195;因此你在用多重评价体系来规训自己的行为。就好比鲁宾逊落入到一个荒无人烟的孤岛上，他不会在意自己是不是衣不蔽体，他自己做了什么看似很蠢的事情，自己钻木取火失败了多少次。但是如果他参加的是一个野外生存的真人秀，他知道灌木丛当中其实隐藏着非常多的摄像头，那么在他的心智当中就存在着至少两套评价体系，第一要逃出荒岛，第二要在镜头当中看起来不愚蠢，因为观众是多元的，比如说，粉丝会很在意鲁宾逊，你有没有灵光乍线的求生的小妙招，那些黑粉会在意他，哎呀，鲁宾逊，你有没有做出什么违背常识的事情，让我来黑黑你。那鲁宾逊的父母也是观众，他会心疼自己的儿子在求生当中受了好多的苦。那鲁宾逊的女友可能会考虑，嗯，这个男人是否在这个过程当中展现出了一些值得信赖的意志品质，观众越多元，被占据的心智就会越多，于是呢，最终的表现就会越来越糟糕。</p>
<p>&#8195;&#8195;那么我们应该怎么办呢？你以为烂大街的结论：我们不要去在意别人的目光、看法，要做自己，要敢于让别人讨厌？我给你一把石破天惊的钥匙。也就是我开头说到那句话，你所遇到的所有的人，其实都是你自己。事实上，在人生的任何场合，从来都只有你在场，你有没有发现我们前面说关注会带来压力，于是你会表现的更糟糕。这句话其实非常不对，因为关注本身并不会带来压力，而是知道有人在关注你才会带来压力，并且更加有意思，甚至有点诡异的是，那个关注你的观众不是别人，其实就是你自己。</p>
<p>&#8195;&#8195;有一句话叫做<strong>别人眼中的你不是你，你眼中的别人才是你</strong>。怎么理解呢？你看现在这个屋子里面挤满了人，他们在做各自的事情，但实际上你看不见他们，你看见的其实是自我的价值观的投射，比如你皱着眉头看着小明在大声喧哗，实际上你对小明其实一无所知。你看到的实际上是你自我的投射，叫做你无法忍受当众喧哗。现在你会看到了小李在安静的读书，但是有可能这其实是小李今年第一次读书，我是说你依旧对小李一无所知，你看到的其实是自己的价值观的投射，叫做你欣赏喜欢读书的人。</p>
<p>&#8195;&#8195;实际上你发现了吗？人类就像是一个手电筒，光芒经由我们自己发出，最后在别人的身上看见了自己的反射。光芒经由我们自己发出，最后在别人的身上看见了自己的反射。理解了这一点，就能明白了为什么一个人崇拜什么就会对这个东西感到自卑，因为自卑的光打到别人的身上就变成了崇拜。当一个人对学历有着无可救药的崇拜时，是因为他长期对自己的学历感到自卑，于是别人只要拿出一本硕士证书就能镇住他；当一个人对于金钱有着疯狂的执着时，是因为他先从小对金钱有着强烈的匮乏感，那么别人只需要稍微显露一点财富便能驾驭他。</p>
<p>&#8195;&#8195;你看，人类在玩的永远适合自己的游戏。所以我们说的那个关注你的观众其实是假的，那个让你崇拜的人也是假的，他们从来都是你自己而已。而对于那个参加真人秀的鲁宾逊而言，他从来都没有意识到他不是被别人影响了，他只是被头脑当中的自己给绑架了。对于自卑的人而言呢，他也没有意识到并不是那个人是完美的崇拜对象，他只是先感受到了自身的怯懦和不满。而一旦你拿到了我给你的钥匙，一旦你能够穿透那个虚幻的别人，一旦你意识到生命当中在场的从来都只有你自己，那么你就真正能够获得解脱自由。说起来，你现在看到这条文章里的我，或许其实也是你自己。万物都是合一的存在，其实没有人在关注你，只有你自己。大脑是投影源，我们眼睛里看到只是自我的意识投射。我们之所以在乎他人眼光，只是没有接纳自己。</p>
<p>&#8195;&#8195;“不要在意别人的看法”的另一个解释：别人对你的看法是他自己对这个世界的认知，是他自己在世界上的映射。所以，别人眼中的你不是你，你眼中的别人才是你。</p>
<p>&#8195;&#8195;用<strong>王阳明</strong>的话就是：我不看花时，花与我心同寂，我看花时，则花有百般颜色，花已入我心。</p>
<p>&#8195;&#8195;用佛法说，心外无物，万法唯心。</p>
<hr>
<p>相由心生 也是这个道理。</p>
<hr>
]]></content>
      <tags>
        <tag>我</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS suggestedFilename 中文文件名乱码问题</title>
    <url>/2021/07/14/suggestedFilename%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>日常吐槽：</p>
<blockquote>
<p>App 中有个下载附件的功能，预览附件的时候会显示文件名字。但有个人艾特我说，安卓的没问题，IOS 的不行，文件名显示乱码，就问你尴不尴尬？……</p>
<p>通常有人提 Bug 咱都虚心接受，但只要说了 安卓没问题 ，血压立马上升一格。有事儿说事儿，别提安卓……</p>
<p>看到写  <code>IOS</code>  而不是 <code>iOS</code> 的人，血压又上升一格……</p>
<p>想起来苹果开发最火的那几年，我接到过一个 HR 的电话，”请问您是做 ISO 开发的吗？” ，我当时心想这个公司不能去呀，HR 都这么不严谨，给我干 HR 好不好，拿来吧你……</p>
</blockquote>
<h2 id="suggestedFilename"><a href="#suggestedFilename" class="headerlink" title="suggestedFilename"></a>suggestedFilename</h2><span id="more"></span>

<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *filename = task.response.suggestedFilename;</span><br></pre></td></tr></table></figure>

<p>说回正题，下载附件的代码中我们是通过 <a href="https://tommygirl.cn/2018/04/20/NSURLResponse/">NSURLResponse</a> 的 <code>suggestedFilename</code> 获取服务端建议的一个文件名，但是得到的却是类似这样的乱码  <code>é��åº�å¸�å·¥ä¼¤æ�¥é��ä½�é�¢ä¼�é£�è¡¥å�©è´¹ã��äº¤é��é£�å®¿è´¹å®¡æ ¸ç»�ç®�è¡¨.xls</code> ，满脸问号是不是？？？？？？</p>
<p>我们知道 <code>suggestedFilename</code> 来自 HTTP 响应的头部信息，只是苹果默认帮我们解析成了一个 <code>NSURLResponse</code> 对象， 乱码问题往往是字符的编码格式没有对应上，或者苹果并不知道应该按照哪个编码规则解析，把问题抛给了开发者自己处理。</p>
<p>那奇怪的是，有的附件正常，有的附件就凌乱了。自然我们就想到比对一下两者 Header 的区别，是骡子是马拉出来溜溜~~</p>
<p>下面是截取的几个与 Content 有关的信息：</p>
<ul>
<li>附件示例：测试素材 - 副本.docx 。文件名显示乱码。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">&lt;<span class="built_in">NSHTTPURLResponse</span>: <span class="number">0x600003a44fa0</span>&gt; &#123; URL: https:<span class="comment">//wwww.www.www &#125; &#123; Status Code: 201, Headers &#123;</span></span><br><span class="line">    <span class="string">&quot;Access-Control-Allow-Methods&quot;</span> =     (</span><br><span class="line">        <span class="string">&quot;POST,GET,PUT&quot;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="string">&quot;Content-Disposition&quot;</span> =     (</span><br><span class="line">        <span class="string">&quot;form-data; name=\&quot;attachment\&quot;; filename=\&quot;\U00e6\U00b5\U008b\U00e8\U00af\U0095\U00e7\U00b4\U00a0\U00e6\U009d\U0090 - \U00e5\U0089\U00af\U00e6\U009c\U00ac.docx\&quot;&quot;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="string">&quot;Content-Length&quot;</span> =     (</span><br><span class="line">        <span class="number">19498</span></span><br><span class="line">    );</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span> =     (</span><br><span class="line">        <span class="string">&quot;application/octet-stream;charset=UTF-8&quot;</span></span><br><span class="line">    );</span><br><span class="line">&#125; &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>附件示例：上海隐私条款.docx。文件名显示正常。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">&lt;<span class="built_in">NSHTTPURLResponse</span>: <span class="number">0x600003d919a0</span>&gt; &#123; URL: https:<span class="comment">//wwww.www.www &#125; &#123; Status Code: 200, Headers &#123;</span></span><br><span class="line">    <span class="string">&quot;Access-Control-Allow-Methods&quot;</span> =     (</span><br><span class="line">        <span class="string">&quot;GET, POST, OPTIONS, PUT, DELETE, HEAD, TRACE&quot;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="string">&quot;Content-Disposition&quot;</span> =     (</span><br><span class="line">        <span class="string">&quot;inline; filename*=UTF-8&#x27;&#x27;%E4%B8%8A%E7%A0%94%E7%A7%BB%E5%8A%A8%E9%9A%90%E7%A7%81%E6%9D%A1%E6%AC%BE.docx&quot;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="string">&quot;Content-Encoding&quot;</span> =     (</span><br><span class="line">        gzip</span><br><span class="line">    );</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span> =     (</span><br><span class="line">        <span class="string">&quot;application/vnd.openxmlformats-officedocument.wordprocessingml.document&quot;</span></span><br><span class="line">    );</span><br><span class="line">&#125; &#125;</span><br></pre></td></tr></table></figure>

<p><code>Content-Disposition</code> 和 <code>Content-Type</code>  有点区别。之前我总是误以为 <code>Content-Type</code> 中的 <code>charset=UTF-8</code> 除了指定文件的编码格式，文件名也是由这个指定的。大错特错了~~</p>
<p>第一次关注 <code>Content-Disposition</code> 。所以它到底是何方神圣呢？</p>
<h2 id="Content-Disposition"><a href="#Content-Disposition" class="headerlink" title="Content-Disposition"></a>Content-Disposition</h2><blockquote>
<p>在常规的 HTTP 应答中，<code>Content-Disposition</code>  属于响应头的一个属性，用于指示服务器响应给我们的内容该以何种形式展示，是以内联的形式（即网页或者页面的一部分），还是以附件的形式下载并保存到本地。</p>
</blockquote>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="作为主体的响应标题"><a href="#作为主体的响应标题" class="headerlink" title="作为主体的响应标题"></a>作为主体的响应标题</h4><p>HTTP 上下文中的第一个参数是 <code>inline</code>（默认值，表示它可以显示在网页内，或作为网页）或 <code>attachment</code>（表示它应该下载；大多数浏览器呈现“另存为”对话框，预先填入<code>filename</code>，如果参数的值存在的话。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Content-Disposition: inline</span><br><span class="line">Content-Disposition: attachment</span><br><span class="line">Content-Disposition: attachment; filename=<span class="string">&quot;filename.jpg&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="作为多部分主体的-header"><a href="#作为多部分主体的-header" class="headerlink" title="作为多部分主体的 header"></a>作为多部分主体的 header</h4><p>HTTP 上下文中的第一个参数总是<code>form-data</code>; 其他参数不区分大小写，并且有参数，在<code>&#39;=&#39;</code>符号后面使用带引号的字符串语法。多个参数用分号（<code>&#39;;&#39;</code>）分隔。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Content-Disposition: form-data</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;fieldName&quot;</span></span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;fieldName&quot;</span>; filename=<span class="string">&quot;filename.jpg&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><ul>
<li><p><code>name</code></p>
<p>后面是一个表单字段名的字符串，每一个字段名会对应一个子部分。在同一个字段名对应多个文件的情况下（例如，带有 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#attr-multiple"><code>multiple</code></a> 属性的 <code>&lt;input type=file&gt;</code> 元素），则多个子部分共用同一个字段名。如果 name 参数的值为 <code>&#39;_charset_&#39;</code> ，意味着这个子部分表示的不是一个 HTML 字段，而是在未明确指定字符集信息的情况下各部分使用的默认字符集。</p>
</li>
<li><p><code>filename</code></p>
<p>后面是要传送的文件的初始名称的字符串。<strong>这个参数总是可选的，而且不能盲目使用</strong>：路径信息必须舍掉，同时要进行一定的转换以符合服务器文件系统规则。这个参数主要用来提供展示性信息。当与 <code>Content-Disposition: attachment</code> 一同使用的时候，它被用作”保存为”对话框中呈现给用户的默认文件名。</p>
</li>
<li><p><code>filename *</code></p>
<p><code>filename</code> 和 <code>filename *</code> 两个参数的唯一区别在于，<code>filename *</code> 采用了<a href="https://tools.ietf.org/html/rfc5987">RFC 5987</a> 中规定的编码方式。<code>filename</code> 和 <code>filename *</code> 同时出现的时候，应该优先采用  <code>filename *</code> ，假如二者都支持的话。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">filename*=UTF-<span class="number">8</span><span class="string">&#x27;&#x27;</span>testfile.docx</span><br></pre></td></tr></table></figure></li>
</ul>
<p>PS: <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Disposition">参考资料</a></p>
<h2 id="回归到问题"><a href="#回归到问题" class="headerlink" title="回归到问题"></a>回归到问题</h2><p>回归到我们前面的问题，一个指定的 <code>filename</code> ，一个指定的  <code>filename *</code> ，有问题吗？没有问题。前面说了，都是标准的。只不过后者告诉了我们文件名使用的编码，而且还是普遍的系统和浏览器都支持的 UTF-8。前者既没有指定编码，也不是 UTF-8。我们能骂后台吗？不能，但我还是在心里骂了一句。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//乱码</span></span><br><span class="line"><span class="string">&quot;Content-Disposition&quot;</span> =     (</span><br><span class="line">        <span class="string">&quot;form-data; name=\&quot;attachment\&quot;; filename=\&quot;\U00e6\U00b5\U008b\U00e8\U00af\U0095\U00e7\U00b4\U00a0\U00e6\U009d\U0090 - \U00e5\U0089\U00af\U00e6\U009c\U00ac.docx\&quot;&quot;</span></span><br><span class="line">    );</span><br><span class="line"><span class="comment">//正常</span></span><br><span class="line"><span class="string">&quot;Content-Disposition&quot;</span> =     (</span><br><span class="line">        <span class="string">&quot;inline; filename*=UTF-8&#x27;&#x27;%E4%B8%8A%E7%A0%94%E7%A7%BB%E5%8A%A8%E9%9A%90%E7%A7%81%E6%9D%A1%E6%AC%BE.docx&quot;</span></span><br><span class="line">    );</span><br></pre></td></tr></table></figure>

<p>与上面两种形式对应，解决办法也有两种：</p>
<ol>
<li>服务端把 <code>Content-Disposition</code> 中的文件名编码加上。</li>
<li>iOS 自己单独解析一下 <code>suggestedFilename</code> 。</li>
</ol>
<p>我运气好，对接的业务方在服务端改了，态度还不错。那如果对方因客观原因改不了怎么办呢？采用方法2，但这个时候问题又来了，我们怎么知道用哪种编码来解析呢？</p>
<p>说到编码，日常我也只是用 <code>NSUTF8StringEncoding</code> 比较多。UTF-8 有点类似于 Haffman 编码，它将 Unicode 编码为 00000000-0000007F 的字符，用单个字节来表示；00000080-000007FF 的字符用两个字节表示；00000800-0000FFFF 的字符用3字节表示。因为目前为止 Unicode-16 规范没有指定 FFFF 以上的字符，所以 UTF-8 最多是使用3个字节来表示一个字符。但理论上来说，UTF-8 最多需要用6字节表示一个字符？ 🤓</p>
<h2 id="NSStringEncoding"><a href="#NSStringEncoding" class="headerlink" title="NSStringEncoding"></a>NSStringEncoding</h2><blockquote>
<p>一组常量，NSString 可能用到的字符串编码。</p>
</blockquote>
<h3 id="Constants"><a href="#Constants" class="headerlink" title="Constants"></a>Constants</h3><table>
<thead>
<tr>
<th>NSStringEncoding</th>
<th>Notes</th>
</tr>
</thead>
<tbody><tr>
<td>NSASCIIStringEncoding</td>
<td>- 8 位字符内的严格 7 位 ASCII 编码；仅 ASCII 值 0…127。</td>
</tr>
<tr>
<td>NSNEXTSTEPStringEncoding</td>
<td>- 带有 NEXTSTEP 扩展的 8 位 ASCII 编码。</td>
</tr>
<tr>
<td>NSJapaneseEUCStringEncoding</td>
<td>- 日语文本的 8 位 EUC 编码。</td>
</tr>
<tr>
<td>NSUTF8StringEncoding</td>
<td>- Unicode 字符的 8 位表示，适合由基于 ASCII 的系统传输或存储。</td>
</tr>
<tr>
<td>NSISOLatin1StringEncoding</td>
<td>- 8 位 ISO Latin 1 编码。又叫 ISO-8859-1 编码。</td>
</tr>
<tr>
<td>NSSymbolStringEncoding</td>
<td>- 8 位 Adobe 符号编码向量。</td>
</tr>
<tr>
<td>NSNonLossyASCIIStringEncoding</td>
<td>- 7 位详细 ASCII 表示所有 Unicode 字符。？？</td>
</tr>
<tr>
<td>NSShiftJISStringEncoding</td>
<td>- 日语文本的 8 位 Shift-JIS 编码。</td>
</tr>
<tr>
<td>NSISOLatin2StringEncoding</td>
<td>- 8 位 ISO Latin 2 编码。又叫 ISO-8859-2 编码。</td>
</tr>
<tr>
<td>NSUnicodeStringEncoding</td>
<td>- 字符串对象的规范 Unicode 编码。是一种２字节编码，能够提供65536个字符，如”A”的Unicode编码为6500，而BigEndianUnicode编码为0065</td>
</tr>
<tr>
<td>NSWindowsCP1251StringEncoding</td>
<td>- Microsoft Windows 代码页 1251，编码 Cyrillic 字符；相当于 AdobeStandardCyrillic 字体编码。</td>
</tr>
<tr>
<td>NSWindowsCP1252StringEncoding</td>
<td>- Microsoft Windows 代码页 1252；相当于 WinLatin1。</td>
</tr>
<tr>
<td>NSWindowsCP1253StringEncoding</td>
<td>- Microsoft Windows 代码页 1253，编码希腊字符。</td>
</tr>
<tr>
<td>NSWindowsCP1254StringEncoding</td>
<td>- Microsoft Windows 代码页 1254，编码土耳其语字符。</td>
</tr>
<tr>
<td>NSWindowsCP1250StringEncoding</td>
<td>- Microsoft Windows 代码页 1250；相当于 WinLatin2。</td>
</tr>
<tr>
<td>NSISO2022JPStringEncoding</td>
<td>- 电子邮件的 ISO 2022 日语编码。GB 2312 遵从于 ISO 2022。</td>
</tr>
<tr>
<td>NSMacOSRomanStringEncoding</td>
<td>- 经典的 Macintosh 罗马编码。主要用于编码 <a href="https://zh.wikipedia.org/wiki/Classic_Mac_OS">Classic Mac OS</a> 上的文字。</td>
</tr>
<tr>
<td>NSUTF16StringEncoding</td>
<td>- 16 位 UTF 编码。同 NSUnicodeStringEncoding。</td>
</tr>
<tr>
<td>NSUTF16BigEndianStringEncoding</td>
<td>- 指定字节序的 UTF-16 编码。字节序为大尾，也叫大端。</td>
</tr>
<tr>
<td>NSUTF16LittleEndianStringEncoding</td>
<td>- 指定字节序的 UTF-16 编码。字节序为小尾，也叫小端。</td>
</tr>
<tr>
<td>NSUTF32StringEncoding</td>
<td>- 32 位 UTF 编码。</td>
</tr>
<tr>
<td>NSUTF32BigEndianStringEncoding</td>
<td>- 指定字节序的 UTF-32 编码。字节序为大尾，也叫大端。</td>
</tr>
<tr>
<td>NSUTF32LittleEndianStringEncoding</td>
<td>- 指定字节序的 UTF-32 编码。字节序为小尾，也叫小端。</td>
</tr>
</tbody></table>
<h3 id="字节序"><a href="#字节序" class="headerlink" title="字节序"></a>字节序</h3><blockquote>
<p>对于整型、长整型等数据类型，Big-endian 认为第一个字节是最高位字节，即按照从低地址到高地址的顺序存放数据的高位字节到低位字节，称为大端、大尾；而 Little-endian 则相反，它认为第一个字节是最低位字节，按照从低地址到高地址的顺序存放据的低位字节到高位字节，称为小端、小尾。</p>
</blockquote>
<p>例如，假设从内存地址 0x0000 开始有以下数据： </p>
<table>
<thead>
<tr>
<th align="center">0x0000</th>
<th align="center">0x0001</th>
<th align="center">0x0002</th>
<th align="center">0x0003</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0x12</td>
<td align="center">0x34</td>
<td align="center">0xab</td>
<td align="center">0xcd</td>
</tr>
</tbody></table>
<p>如果我们去读取一个地址为 0x0000 的四个字节变量，若字节序为 Big-endian，则读出结果为 0x1234abcd；若字节序为 Little-endian，则读出结果为 0xcdab3412。</p>
<p>如果我们将 0x1234abcd 写入到以 0x0000 开始的内存中，则 Little-endian 和 Big-endian 模式的存放结果如下： </p>
<table>
<thead>
<tr>
<th>地址</th>
<th align="center">0x0000</th>
<th align="center">0x0001</th>
<th align="center">0x0002</th>
<th align="center">0x0003</th>
</tr>
</thead>
<tbody><tr>
<td>Big-endian</td>
<td align="center">0x12</td>
<td align="center">0x34</td>
<td align="center">0xab</td>
<td align="center">0xcd</td>
</tr>
<tr>
<td>Little-endian</td>
<td align="center">0xcd</td>
<td align="center">0xab</td>
<td align="center">0x34</td>
<td align="center">0x12</td>
</tr>
</tbody></table>
<h4 id="端-endian-的起源"><a href="#端-endian-的起源" class="headerlink" title="端 (endian) 的起源"></a>端 (endian) 的起源</h4><p>“<strong>endian</strong>”一词来源于十八世纪爱尔兰作家乔纳森·斯威夫特的小说《格列佛游记》。小说中，小人国为水煮蛋该从大的一端（Big-End）剥开还是小的一端（Little-End）剥开而争论，争论的双方分别被称为“大端派”和“小端派”。以下是1726年关于大小端之争历史的描述：</p>
<blockquote>
<p>我下面要告诉你的是，Lilliput和Blefuscu这两大强国在过去36个月里一直在苦战。战争开始是由于以下的原因：我们大家都认为，吃鸡蛋前，原始的方法是打破鸡蛋较大的一端，可是当今皇帝的祖父小时候吃鸡蛋，一次按古法打鸡蛋时碰巧将一个手指弄破了。因此他的父亲，当时的皇帝，就下了一道敕令，命令全体臣民吃鸡蛋时打破鸡蛋较小的一端，违令者重罚。老百姓们对这项命令极其反感。历史告诉我们，由此曾经发生过6次叛乱，其中一个皇帝送了命，另一个丢了王位。这些叛乱大多都是由Blefuscu的国王大臣们煽动起来的。叛乱平息后，流亡的人总是逃到那个帝国去寻求避难。据估计，先后几次有11000人情愿受死也不肯去打破鸡蛋较小的一端。关于这一争端，曾出版过几百本大部著作，不过大端派的书一直是受禁的，法律也规定该派任何人不得做官。”</p>
</blockquote>
<p>觉得这个鸡蛋的故事很有意思，所以粘在这里了 😂。关于字节序的更多内容见 <a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82%E5%BA%8F">维基百科-字节序</a> ，很详细了。</p>
<h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><p>关于字符集有些我也看不懂，百科上倒是解释的比较清楚。还有很多字符编码集：</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/38.png"></p>
<h2 id="撞大运"><a href="#撞大运" class="headerlink" title="撞大运"></a>撞大运</h2><p>这么多种编码，iOS 解析的话，我们用哪一种呢？如果对接的业务少，可以和服务端约定好。如果对接的业务多，想兼容所有的”乱码”，我觉得只能撞大运了😂</p>
<p>示例：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *fileName, *str;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *byte = <span class="literal">NULL</span>;</span><br><span class="line">fileName = [task.response suggestedFilename];</span><br><span class="line">byte = [fileName cStringUsingEncoding:<span class="built_in">NSISOLatin1StringEncoding</span>];</span><br><span class="line">str = [[<span class="built_in">NSString</span> alloc] initWithCString:byte encoding:<span class="built_in">NSUTF8StringEncoding</span>]; </span><br></pre></td></tr></table></figure>

<p>在上面的示例中，如果指定的 <code>NSStringEncoding</code> 不匹配，str 会是 nil，所以我们可以利用 nil 来撞大运了，有毛病吗？可能有，哈哈 😂 </p>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>一件白 T 恤</title>
    <url>/2022/05/12/%E4%B8%80%E4%BB%B6%E7%99%BDT%E6%81%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<blockquote>
<p>越过山丘</p>
<p>才发现无人等候</p>
<p>…</p>
<p>喋喋不休</p>
<p>时不我与的哀愁</p>
<p>不自量力地还手</p>
<p>直至死方休</p>
<p>…</p>
</blockquote>
<p>写了三天的 BUG，听听音乐休息 5 分钟~</p>
<p>念叨两句小咪的一件白 T 恤：它是一件特别普通的白色长袖T恤，圆领，前面没有任何图案，后背有一个蓝色的什么图案，小咪这会儿竟然忘了😂，总而言之吧，小咪很喜欢。T 恤是在某宝上买的，因为难得穿着舒服，所以又在同一家店买了同样的两件，但是搞笑的是明明是买的一个码数，后买的两件居然大了，而且整体版型有些变形…哭笑不得…不知道别人会不会这样，小咪这是第二次买同样的衣服，说到这里小咪又想起来上次发生这种情况，也是因为遇到了一件难得穿着合身的牛仔裤，不过上次觉悟的太晚了，等小咪想起来买第二件的时候，那家店已经倒闭了，在另外的地方搜同款，结果买到的完全不是一个“同款”。</p>
<p>所以，有喜欢的东西就放心大胆的买，不要犹豫，犹豫就会败北。</p>
<p>咳咳，跑偏了，说回白 T 恤。由于经常穿，经常洗，衣服后面的蓝色图案已经略微显得褪色了。有次喝酒喝多了，衣服上还不小心沾到了红酒渍，洗也洗不掉。当然，红酒渍并不会影响小咪对它的喜好，所以这两年去哪儿都依旧带着它，带着它去爬山，去大理，去好多地方…</p>
<p>昨天早上出门前，小咪纠结穿什么衣服时，又想到了白 T 恤。但是很奇怪，昨天很讨厌它的圆领，非常想要一个大 V 领，毕竟小咪的锁骨还是非常性感的，藏起来可惜了。于是乎~拿起剪刀把它咔嚓了：</p>
<img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/white-T-shirt.png" style="zoom:67%;">

<p>从圆领剪成了小 v，可是穿上的效果差强人意，于是又剪成了大 V…然后，这件衣服就变成了一件一字领的衣服。现在好了，不仅可以露锁骨，肩膀都可以漏出来了🤷‍♀️。女人，呵呵。</p>
<p>人真是奇怪，现在不仅不喜欢圆领了，连红酒渍都开始嫌弃了，难道是因为小咪不再喝酒的缘故吗？对，“戒酒”一年多了，可能有关系吧。所以这次改造衣服悟出一个人生哲理：V 领不适合休闲、偏肥的衣服，适合偏修身的衣服，哎，剪之前小咪怎么没想到呢。开玩笑啦，最近小咪真心觉得，凡是不开心的、不合适的、不舒服的、不交心的人和事，应该果断的咔嚓掉，即使曾经照亮过彼此…那是不是把这份美好封存在记忆中就好了，时不时拿出来回忆一下，足够。千万不要因为“沉默成本”产生过多的纠结，难为了别人也强迫了自己。</p>
<p>另一个感悟是，尽量不要试图把朋友变成同事，同样，也永远不要和自己的领导做朋友。别人是堵一头儿开一头儿，小咪前一阵儿倒好，堵一头儿看清了两头儿，也挺好的，有病早治，早治早死。</p>
<p>…</p>
<p>越长大越孤单，不仅仅是一句歌词而已。因为我们总是在不断的失去，去年丢了一个治好小咪“睡眠焦虑”的人，今年丢了一个陪小咪扯淡七八年的朋友。天呐，那是一直在失去吗？应该不是吧，有分叉的，就有聚合的，只是看我们能不能保持一个平衡或者尽量让 聚合 &gt; 分叉。失去一个人也不是一瞬间的事儿，往往很早就有了预兆，可能都是当局者迷吧，或许大家的很多观念早就慢慢不一致了，只是一方没有另一方理智，例如小咪。小咪还是偏感性了点，容易被骗，有人骗了小咪一年…才慢慢反应过来被骗了，那可能你要问了，骗了什么🤓？骗了信任、感情，最不值钱也最难遇到的东西。对于伤害我们的人…好像也无能为力对吧，谩骂？诅咒？人身攻击？不太行呢，小咪特别想诅咒欺骗过小咪的人、伤害过小咪的人能得个什么癌症啊老年痴呆啊什么的，可是小咪的家教不允许。小咪还是选择做一个善良的人，其他的交给因果吧。</p>
<p>引用小咪不十分确定哪位说的话（网上说是董卿）：无论我们最后生疏成什么样子，曾经对你的好都是真的，就算终有一散，也别辜负相遇，希望你不后悔认识我，也是真的快乐过，如果能回到以前，我会选择不认识你，不是我后悔，是我不能面对现在的结局……</p>
<p>综上所述，小咪的白 T 恤算是废了，哈哈哈…去买一件真正适合 V 领的衣服，性感一下~</p>
<hr>
]]></content>
      <tags>
        <tag>我</tag>
      </tags>
  </entry>
  <entry>
    <title>乌龙 之 我吐了</title>
    <url>/2020/06/02/%E4%B9%8C%E9%BE%99-%E6%88%91%E5%90%90%E4%BA%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>之前用的 hexo 主题作者不维护了，所以换了个洋气的~~~</p>
<p>乌龙就这样开始了：</p>
<span id="more"></span>

<p>文章里的代码块，明明设置了语言objective-c，可是高亮却怎么都不起作用，鼓捣了一通hljs，其实hexo 默认的就是hljs，我还跑去给人主题作者留了言。。。</p>
<p>搜索了半天大家都是怎么设置高亮的，我发现发表意见的人中，偶有几个是同行，抛开设置语言的方式，他们给代码设置的语言都是 <strong>objc</strong></p>
<p>于是我也</p>
<blockquote>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">​```objc</span><br></pre></td></tr></table></figure>
</blockquote>
<p>.</p>
<p>.</p>
<p>.</p>
<p>就好了。。。。。</p>
<p><strong>objective-c</strong>改为<strong>objc</strong> 。。。。。。就好了。。。。。。</p>
<p>我吐了真的是~~~~~~</p>
<p>PS：使用的md编辑器是Typora，我看人家有个语言的选项是 objective-c，我就选了。。。。。秀逗了。。。。。。</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/9.png" alt="图一"></p>
]]></content>
      <tags>
        <tag>瞎扯</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS上线 AppStore - 打包、upload 时遇到的问题</title>
    <url>/2019/08/19/%E4%B8%8A%E7%BA%BF%20AppStore/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>iOS打包上线遇到的问题记录和解决办法：</p>
<blockquote>
<p>ERROR ITMS-90034<br>ERROR ITMS-4236<br>ERROR ITMS-90717</p>
</blockquote>
<h4 id="❌-ERROR-ITMS-90034"><a href="#❌-ERROR-ITMS-90034" class="headerlink" title="❌ ERROR ITMS-90034:"></a>❌ ERROR ITMS-90034:</h4><p>“Missing or invalid signature.The bundle’com.xxx.xxx’ at bundle path ‘Payload/xxx’ is not signed using an Apple submission certificate.”</p>
<span id="more"></span>

<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/1.png" alt="ERROR ITMS-90034"></p>
<p>这个错误显示我们 没有使用符合苹果规范的证书签名App 而导致的。<br>接下来我们就一步一步的检查证书到底哪里出了问题：</p>
<ul>
<li>打开钥匙串，找到对应的生产证书，确保证书已经添加到钥匙串中，并且显示证书有效。</li>
</ul>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/2.png" alt="证书有效否"></p>
<ul>
<li>如果显示 <code>此证书的签发者无效</code> ：<ul>
<li>证书是通过你打包电脑申请签发的，检查是否有过期的根证书，把所有显示已过期的证书<code>全部删除</code>。</li>
</ul>
</li>
</ul>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/03.png" alt="显示已过期的证书"></p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/04.png" alt="删除所有过期的证书"></p>
<ul>
<li>证书是别人通过P12的方式转给你的，看看私钥是不是没有，可以从签发P12的电脑再重新导出一份。像下面这个证书没有小箭头就表示没有私钥。</li>
</ul>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/5.png" alt="没有私钥"></p>
<ul>
<li>点击证书–&gt;显示简介–&gt;信任，如果此处，不是使用系统默认，就进行更改成“使用系统默认”。</li>
</ul>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/6.png" alt="信任证书"></p>
<p>上面这些操作应该就能解决问题了，可以打包重新upload试试。</p>
<h4 id="❌-ERROR-ITMS-4236"><a href="#❌-ERROR-ITMS-4236" class="headerlink" title="❌ ERROR ITMS-4236:"></a>❌ ERROR ITMS-4236:</h4><p>“Invalid value ‘2019-08-16 14:23:22’ for bundle_version” at SoftwareAssets”</p>
<p>之前App的测试版本，为了方便知道更新时间，Build版本号是通过 Run Script 动态注入了一个时间格式，如下：</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/7.png" alt="Build"></p>
<p>事实证明，不让这样用，哈哈，乖乖的改回了 2.2.2 。</p>
<h4 id="❌-ERROR-ITMS-90717"><a href="#❌-ERROR-ITMS-90717" class="headerlink" title="❌ ERROR ITMS-90717:"></a>❌ ERROR ITMS-90717:</h4><p>“Invalid App Store Icon. The App Store Icon in the asset catalog in ‘.app’ can’t be transparent nor contain an alpha channel.”</p>
<p>错误原因：应用图标不能有透明度或者包含Alpha 通道。</p>
<ul>
<li><p>让美工去掉图片的透明度。</p>
</li>
<li><p>自己修改图片的Alpha 通道选项为 否。预览-&gt;文件-&gt;导出为PNG，取消选中。如下图</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/8.png" alt="alpha"></p>
</li>
</ul>
<div contenteditable="plaintext-only"><div contenteditable="plaintext-only"><center>
  <div style="display:inline-block;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/flag.jpeg" class width="200"></div>
</center>
</div></div>]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>你在狗叫什么</title>
    <url>/2022/07/26/%E4%BD%A0%E5%9C%A8%E7%8B%97%E5%8F%AB%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="你在狗叫什么"><a href="#你在狗叫什么" class="headerlink" title="你在狗叫什么"></a>你在狗叫什么</h2><p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/wof-wof.png"></p>
<p>&#8195;&#8195;前两天被一只土拨鼠“咬了”，毫无正经理由一通狂骂，甚至有点人身攻击了。以前只觉得上司对下属的恶意攻击、肆意谩骂只会出现在一些企业文化素质偏低的公司，没想到在这个还算人性化的地方也发生了。不过当时我好像也并没有生气，甚至有点想笑，现在才体会到老人们说的 - “没必要”是什么意思。</p>
<p>&#8195;&#8195;之前起这个标题的时候我是有点情绪在的：你在狗叫什么？最近我看游戏里那些人互喷都在骂这句话，拿来借用一下。但周末拿出我尘封已久的拳套，假想拳靶就是土拨鼠，对着拳靶子打了半小时，那一丝情绪也就过去了。所以原本想在这里吐槽他一下，可是想到不能脏了网友的眼睛，自己也不是传播负能量的人，还是算了，不过标题我也是不打算改了。怎么说呢，就…还是觉得哭笑不得，搞笑了。</p>
<p>&#8195;&#8195;千万千万不要愤怒。</p>
<h2 id="记录周围的人"><a href="#记录周围的人" class="headerlink" title="记录周围的人"></a>记录周围的人</h2><p>&#8195;&#8195;我挺喜欢观察别人，注意 这里的观察不是上下打量、眼神轻蔑那种哦，就是平平无奇的观察。写在这里也只是因为觉得他们有意思😂，不知道看官过客们是否也遇到了。</p>
<h3 id="“冷笑”君"><a href="#“冷笑”君" class="headerlink" title="“冷笑”君"></a>“冷笑”君</h3><p>我从卫生间回来，站在工位旁边擦手，他打量我、再看看我的手，然后冷笑一下…<br>我穿一个图文袜子，他盯着我看、我都走到他身后了，还跟着看呢，然后冷笑一下…<br>我去他对面工位上和同事沟通事情，他看着我们聊天，然后冷笑一下…<br>我跟同事或者领导吃饭回来晚了，他打量我们一圈儿，然后冷笑一下…</p>
<p>…</p>
<p>观察结果：就…莫名其妙的、哭笑不得、啼笑皆非。哥们儿可能是在锻炼自己的面部肌群，所以也有可能我想多了…🤓</p>
<h3 id="“比较”君"><a href="#“比较”君" class="headerlink" title="“比较”君"></a>“比较”君</h3><p>&#8195;&#8195;咱天朝人的一大特点，就是爱和人比较，这个在老家那边已经习以为常了。我观察到的这位高人，让我佩服的点是他不仅拿自己和别人比较，在自己比不过的时候，会搬出他的父母、他的姥爷、他媳妇儿的父母和姥爷、无中生友的某位“朋友”等等去和别人比较，总之一定要比赢、压人一头，才能维护他的优越感。印象中，有一次他拿他媳妇儿的姥爷的针线活水平和我比较…跟我比这个做什么呢？我一个小学生在乎针线活好不好吗？</p>
<p>观察结果：我个人不是很会去和人作比较，属于特立独行的类型，所以更多的是不理解国人的这个习惯，有什么好比的…费解🤷‍♀️。</p>
<h3 id="“强迫症”君"><a href="#“强迫症”君" class="headerlink" title="“强迫症”君"></a>“强迫症”君</h3><p>&#8195;&#8195;卫生间的洗手池是男女共用的，一左一右两个。然鹅，他只用左边，即使有人正在使用左边的池子，他也不用右边，而是站在远远的一个位置等待…洗完手以后，会固定的甩两次，身体从 0 点位置顺时针转一圈到 9 点钟方向，从原本就在 9 点钟方向的走廊回工位，我遇到的每一次都是，every time…</p>
<p>观察结果：自律让人快乐~🤓</p>
<h3 id="“道貌岸然”君"><a href="#“道貌岸然”君" class="headerlink" title="“道貌岸然”君"></a>“道貌岸然”君</h3><p>在用这个词之前，我特意查了一下百科：</p>
<blockquote>
<p>道貌岸然，<a href="https://baike.baidu.com/item/%E6%B1%89%E8%AF%AD%E6%88%90%E8%AF%AD/1768958">汉语成语</a>，拼音是dào mào àn rán，意思是神态庄重严肃，装作一本正经的样子；现多讽刺假装正经、表里不一。出自清·<a href="https://baike.baidu.com/item/%E8%92%B2%E6%9D%BE%E9%BE%84/28998">蒲松龄</a>《<a href="https://baike.baidu.com/item/%E8%81%8A%E6%96%8B%E5%BF%97%E5%BC%82/75053">聊斋志异</a>·成仙》。</p>
</blockquote>
<p>看来我理解的没错。</p>
<p>&#8195;&#8195;不记得在哪儿看到一句话：<strong>中国人最重要的目标，就是成为一个合格的伪君子。</strong>呜呼~总结的还挺到位。为了融入社会也罢、引申到所谓的情商也罢，好像想要合群、要办成事儿就必须对这句话有一定的认知，上下五千年定下的基调，确实也无(dou)可(shi)厚(gou)非(pi)。有意思的是很多人意识到这一点的弊端，还心甘情愿往里跳。倒不是真的去评判谁虚伪，都是为了维护社会关系嘛，可是“道貌岸然君”一边跟我宣扬社会风气不好，一边践行着他的伪君子行径，总给我一种“又当又立”的错觉。</p>
<p>&#8195;&#8195;可能有人要说了“理想很丰满、现实很骨感”，难道还不让人有理想了吗？理想当然要有，怕只怕有些人伪着伪着自己也信了，亦或者拿这种“社会规则”做挡箭牌来掩盖自己人性的弱点，“你看，社会就是这样，我也没办法，你忍一忍吧~~”😂，是已经到了生死存亡之秋不得不伪吗？其实大多数情况也未必吧。要真是敢做敢当当，伪到底也行，又做不到，骗人骗己罢了，不累吗？</p>
<p>观察结果：本次观察有点狭隘了。🤓</p>
<h3 id="“坏话”君"><a href="#“坏话”君" class="headerlink" title="“坏话”君"></a>“坏话”君</h3><p>&#8195;&#8195;每当我要和一个新团队、新同事合作的时候，坏话君就开始忙碌了，每当我夸一个人的时候，坏话君更加忙碌，会跟我细数对方的各种缺点。先前我以为是为我好，提醒我要小心提防，毕竟人心隔肚皮。久而久之，导致的一个结果是：我在和这些人合作之前就已经戴了有色眼镜😂。并不是质疑他的为人和初心，人性都是经不起试探的，只是我还太年轻🤓，自身的磁场还不够强大，容易受负面磁场的干扰。</p>
<p>观察结果：傲慢和偏见是很可怕的，尽量摒弃，同时尽量远离“坏话”君，个人觉得这不是一个良好的合作伙伴应该有的品质~</p>
<p>打完，收工。Wi wong wong ~ Wi wong wong~</p>
<hr>
]]></content>
      <tags>
        <tag>我</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 迁移至云服务的记录</title>
    <url>/2021/06/30/%E4%BA%91%E6%9C%8D%E5%8A%A1%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>这篇文章不是专门分享服务器搭建、CentOS 系统等等，只是记录一下迁移 Hexo 的过程~~~</p>
</blockquote>
<h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><blockquote>
<p>腾讯云 CentOS 7.2 64位 个人云服务器 用于测着玩儿</p>
<p>标准型SA2 | SA2.SMALL1 | 北京 | 1核| 1GB | 1Mbps</p>
</blockquote>
<h2 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h2><span id="more"></span>

<p>用到的文件命令：</p>
<ol>
<li>在当前路径创建一级目录</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir <span class="built_in">test</span> </span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在当前路径创建多级目录</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir -p mytest/test1/test1_1 </span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在创建目录的同时给新建的目录赋权限</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir -m 777 testmod </span><br></pre></td></tr></table></figure>

<ol start="4">
<li>修改一个目录的权限</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">chmod 700 -R <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p>PS：<a href="https://www.haorooms.com/post/centeros_wj_zj">参考自</a></p>
<h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><ol>
<li><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4></li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><h4 id="测试-nginx-配置文件"><a href="#测试-nginx-配置文件" class="headerlink" title="测试 nginx 配置文件"></a>测试 nginx 配置文件</h4></li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nginx -t</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果ok，会打印如下</span></span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf <span class="built_in">test</span> is successful</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><h4 id="配置相关"><a href="#配置相关" class="headerlink" title="配置相关"></a>配置相关</h4></li>
</ol>
<p>查看<code>/etc/nginx/nginx.conf</code>文件，内容如下：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># For more information on configuration, see:</span></span><br><span class="line"><span class="comment">#   * Official English Documentation: http://nginx.org/en/docs/</span></span><br><span class="line"><span class="comment">#   * Official Russian Documentation: http://nginx.org/ru/docs/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">user</span> nginx;</span><br><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line"><span class="attribute">error_log</span> /var/log/nginx/error.log;</span><br><span class="line"><span class="attribute">pid</span> /run/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</span></span><br><span class="line"><span class="attribute">include</span> /usr/share/nginx/modules/<span class="regexp">*.conf</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>            <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nopush</span>          <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nodelay</span>         <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span>   <span class="number">65</span>;</span><br><span class="line">    <span class="attribute">types_hash_max_size</span> <span class="number">4096</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span>             /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>        application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Load modular configuration files from the /etc/nginx/conf.d directory.</span></span><br><span class="line">    <span class="comment"># See http://nginx.org/en/docs/ngx_core_module.html#include</span></span><br><span class="line">    <span class="comment"># for more information.</span></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">listen</span>       [::]:<span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  _;</span><br><span class="line">        <span class="attribute">root</span>         /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Load configuration files for the default server block.</span></span><br><span class="line">        <span class="attribute">include</span> /etc/nginx/default.d/<span class="regexp">*.conf</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">error_page</span> <span class="number">404</span> /<span class="number">404</span>.html;</span><br><span class="line">        <span class="attribute">location</span> = /<span class="number">404</span>.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">&quot;/etc/nginx/nginx.conf&quot; 84L, 2336<span class="attribute">C</span>                                                                                                                             <span class="number">1</span>,<span class="number">1</span>           Top</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><h4 id="启动、停止、查看状态、开机自启动"><a href="#启动、停止、查看状态、开机自启动" class="headerlink" title="启动、停止、查看状态、开机自启动"></a>启动、停止、查看状态、开机自启动</h4></li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl start nginx.service</span><br><span class="line">systemctl stop nginx.service</span><br><span class="line">systemctl reload nginx.service</span><br><span class="line">systemctl status nginx.service</span><br><span class="line">service nginx start</span><br><span class="line">systemctl <span class="built_in">enable</span> nginx</span><br></pre></td></tr></table></figure>

<p>​    启动以后类似下面的输出</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">● nginx.service - The nginx HTTP and reverse proxy server</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/nginx.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Wed 2021-06-30 21:25:38 CST; 4s ago</span><br><span class="line">  Process: 2231 ExecStart=/usr/sbin/nginx (code=exited, status=0/SUCCESS)</span><br><span class="line">  Process: 2228 ExecStartPre=/usr/sbin/nginx -t (code=exited, status=0/SUCCESS)</span><br><span class="line">  Process: 2227 ExecStartPre=/usr/bin/rm -f /run/nginx.pid (code=exited, status=0/SUCCESS)</span><br><span class="line"> Main PID: 2233 (nginx)</span><br><span class="line">   CGroup: /system.slice/nginx.service</span><br><span class="line">           ├─2233 nginx: master process /usr/sbin/nginx</span><br><span class="line">           └─2235 nginx: worker process</span><br><span class="line">           </span><br><span class="line">Jun 30 21:25:38 VM-0-13-centos systemd[1]: Starting The nginx HTTP and reverse proxy server...</span><br><span class="line">Jun 30 21:25:38 VM-0-13-centos nginx[2228]: nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">Jun 30 21:25:38 VM-0-13-centos nginx[2228]: nginx: configuration file /etc/nginx/nginx.conf <span class="built_in">test</span> is successful</span><br><span class="line">Jun 30 21:25:38 VM-0-13-centos systemd[1]: Started The nginx HTTP and reverse proxy server.</span><br></pre></td></tr></table></figure>

<h2 id="Hexo-个人博客部署到-CentOS-个人服务器"><a href="#Hexo-个人博客部署到-CentOS-个人服务器" class="headerlink" title="Hexo 个人博客部署到 CentOS 个人服务器"></a>Hexo 个人博客部署到 CentOS 个人服务器</h2><ol>
<li><h4 id="安装-Git-Nginx"><a href="#安装-Git-Nginx" class="headerlink" title="安装 Git Nginx"></a>安装 Git Nginx</h4></li>
</ol>
<p>升级 CentOS 所有包，包括系统版本内核升级</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum -y update</span><br><span class="line">yum install -y git nginx</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><h4 id="Nginx-配置"><a href="#Nginx-配置" class="headerlink" title="Nginx 配置"></a>Nginx 配置</h4></li>
</ol>
<ul>
<li>创建文件目录, 用于博客站点文件存放, 并更改目录读写权限</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir -p /home/blog/www/hexo</span><br><span class="line">chmod -R 755 /home/blog/www/hexo</span><br></pre></td></tr></table></figure>

<ul>
<li>配置 Nginx 服务器</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>

<p>通过 vim 查找 <code>listen 80</code> 找到如下代码, 并修改</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">      <span class="attribute">listen</span>       <span class="number">80</span>; <span class="comment"># 默认监听80端口，先不用管</span></span><br><span class="line">      <span class="attribute">listen</span>       [::]:<span class="number">80</span>;</span><br><span class="line">      <span class="attribute">server_name</span>  www.xxx.com; <span class="comment"># 填写个人域名，有的话就写，没有也可以保持 _</span></span><br><span class="line">      <span class="attribute">root</span>         /home/blog/www/hexo; </span><br><span class="line">  &#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<ul>
<li>添加测试首页</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /home/blog/www/hexo/index.html <span class="comment">#路径就是自己新建的博客路径</span></span><br></pre></td></tr></table></figure>

<p>测试页的内容可以简单类似这样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Nginx Bazinga!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>访问服务的 ip 或者 域名，能看到 <code>Nginx Bazinga!</code> 就表示 Nginx 基本成功了。</p>
<ol start="3">
<li><h4 id="下载-Nodejs"><a href="#下载-Nodejs" class="headerlink" title="下载 Nodejs"></a>下载 Nodejs</h4></li>
</ol>
<p>Nodejs 我也不是很懂，通过 yum 安装的并不是最新版本，网上有些资源说是要指定 源 ？</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y nodejs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以查看版本号的话，表示安装成功了。</span></span><br><span class="line">node -v</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><h4 id="git"><a href="#git" class="headerlink" title="git"></a>git</h4></li>
</ol>
<ul>
<li><p>首先要安装 Git，前面我们已经安装过了~</p>
<p>新建一个存放 hexo git 内容的目录</p>
</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir -p /home/blog/git</span><br></pre></td></tr></table></figure>

<ul>
<li>初始化为 git 仓库</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/blog/git</span><br><span class="line">git init --bare ATommyGirl.git</span><br></pre></td></tr></table></figure>

<ul>
<li>创建 Git 钩子 (hook), 用于指定 Git 的源代码 和 Git 配置文件</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /home/blog/git/ATommyGirl.git/hooks/post-receive</span><br><span class="line"></span><br><span class="line"><span class="comment"># 钩子内容如下</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">git --work-tree=/home/blog/www/hexo --git-dir=/home/blog/git/ATommyGirl.git checkout -f</span><br></pre></td></tr></table></figure>

<ul>
<li>保存并退出后, 给该文件添加可执行权限</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">chmod +x /home/blog/git/ATommyGirl.git/hooks/post-receive</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><h4 id="本地-hexo-配置"><a href="#本地-hexo-配置" class="headerlink" title="本地 hexo 配置"></a>本地 hexo 配置</h4></li>
</ol>
<p>本地如何搭建 hexo 网上资料非常多。基于我们上面的操作，在本地博客文件夹根目录中的 <code>_config.yml</code>  配置文件增加一个 <code>deploy</code> 就可以了。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">root@your_server_ip:gitpath/git</span> <span class="comment">#用户名@域名或IP 地址:自己的git路径</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">message:</span></span><br></pre></td></tr></table></figure>

<p>我有多个提交的地址：</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/31.png"></p>
<p>PPS:<a href="https://www.jianshu.com/p/59eeb1493a45">参考自01</a> 、<a href="https://segmentfault.com/a/1190000010680022">参考自02</a></p>
<h2 id="Nginx-部署-SSL-证书"><a href="#Nginx-部署-SSL-证书" class="headerlink" title="Nginx 部署 SSL 证书"></a>Nginx 部署 SSL 证书</h2><ol>
<li>购买、申请 SSL 证书，我用的是腾讯一年免费的证书。</li>
<li>不同的服务器需要不同格式的公私钥文件，腾讯云自动帮忙生成了，根据部署类型使用对应的文件，我的是 Nginx：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── Apache</span><br><span class="line">│   ├── 1_root_bundle.crt</span><br><span class="line">│   ├── 2_tommygirl.cn.crt</span><br><span class="line">│   └── 3_tommygirl.cn.key</span><br><span class="line">├── IIS</span><br><span class="line">│   └── tommygirl.cn.pfx</span><br><span class="line">├── Nginx</span><br><span class="line">│   ├── 1_tommygirl.cn_bundle.crt</span><br><span class="line">│   └── 2_tommygirl.cn.key</span><br><span class="line">├── Tomcat</span><br><span class="line">│   └── tommygirl.cn.jks</span><br><span class="line">├── tommygirl.cn.csr</span><br><span class="line">├── tommygirl.cn.key</span><br><span class="line">└── tommygirl.cn.pem</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>我在 <code>/etc/nginx/</code> 新建了两个文件夹 <code>servers</code> <code>certs</code> 来放配置信息和证书文件，只是不知道这样是否符合”国际惯例”😂</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir /etc/nginx/servers</span><br><span class="line">mkdir /etc/nginx/certs</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>从本地把证书拷贝到云服务器上</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">scp -P 22 1_tommygirl.cn_bundle.crt username@host:/etc/nginx/certs</span><br><span class="line">scp -P 22 2_tommygirl.cn.key username@host:/etc/nginx/certs</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>添加 ssl 配置</li>
</ol>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">vim</span> /etc/nginx/servers/tommygirl.cn <span class="comment">#文件名自定义</span></span><br></pre></td></tr></table></figure>

<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span>  tommygirl.cn;</span><br><span class="line">    <span class="attribute">ssl_certificate</span>  certs/1_tommygirl.cn_bundle.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> certs/2_tommygirl.cn.key;</span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> /home/blog/www/hexo;</span><br><span class="line">        <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个时候应该可以通过 https 来访问网站了。</p>
<ol start="6">
<li>http 自动转换 https，也是修改  <code>Nginx</code>  的配置，添加一个重定向，<code>rewrite</code> 还有其他的一些参数……</li>
</ol>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span>       [::]:<span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  tommygirl.cn;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(.*)$</span> https://tommygirl.cn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>7788</tag>
        <tag>Mac</tag>
        <tag>服务器</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>吃饭啦</title>
    <url>/2020/05/22/%E5%90%83%E9%A5%AD%E5%95%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/cfl.jpg"></p>
<p>就算一个人在家次饭，也要元气满满的哦，介绍一下这个小菜单吧，哈哈：</p>
<p>🐟🐟🐟🐟清烤多春鱼</p>
<blockquote>
<p>京都多春雨，回首多春光。公子多春情，绿草多春芳。八载多春伤，橙子多春鱼。</p>
</blockquote>
<span id="more"></span>

<p>​    多春鱼的名字起得可以说非常贴切，四季多子，满腹鱼子，吃起来Q弹又有营养。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">拔掉鱼鳃和内脏</span><br><span class="line">加一些料酒呀、生姜呀、胡椒粉 腌10分钟就可以喽</span><br><span class="line">烤箱上下220预热5分钟，烘烤时间设置为15分钟</span><br><span class="line">预热期间可以准备刷油了，轻轻刷一点就好了，因为我们是清烤嘛，嘻嘻~~</span><br></pre></td></tr></table></figure>



<p>🍆清蒸茄子</p>
<p>清蒸茄子是我夏天最喜欢吃的一道菜，爽口又没有热量😳</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">茄子洗净切片，上锅蒸</span><br><span class="line">准备蒜和香油，蒜切末备用，看自己喜好放多少吧</span><br><span class="line">茄子整好以后，放在容器中，加入盐、蒜末、香油几滴</span><br><span class="line">可以开动了，香喷喷美滋滋呀</span><br></pre></td></tr></table></figure>

<p>PS：我个人很喜欢在菜里放大蒜，因为吃大蒜可以让人快乐。哈哈。</p>
<p>🌲另一个菜叫什么呢？</p>
<p>其实我也不知道，哈哈，土豆、青椒、洋葱大杂烩，切成小片，一起翻炒，喜欢吃肉可以放点肉粒，我不喜欢，所以是素炒的。</p>
<p>🍚最后配上一碗白米饭，可以开动啦~~~</p>
<p>单身狗们看完会不会觉得很麻烦呢，一个人做这么多要多久呀，好烦。呐，时间管理大师说过(不是罗志祥🙅‍♂️)，所有的任务要区分好，并行和串行！拿我们这次的午餐举例：</p>
<blockquote>
<p>蒸🍚 -&gt; 处理🍆 -&gt; 上锅蒸 -&gt; 处理🐟 + 切土豆等等 -&gt; 🐟进烤箱 -&gt; 🍆出锅 -&gt; 炒大杂烩 = 吃饭啦~~~</p>
</blockquote>
<p>为什么分享美食呢，其实我就是试一下图片为什么加不进去了，现在好了~~~QTQ</p>
]]></content>
      <tags>
        <tag>我</tag>
      </tags>
  </entry>
  <entry>
    <title>做一个高数大佬</title>
    <url>/2022/06/14/%E5%81%9A%E4%B8%80%E4%B8%AA%E9%AB%98%E6%95%B0%E5%A4%A7%E4%BD%AC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p>&#8195;&#8195;忙忙叨叨好几天，放松几分钟。想跟朋友聊聊天，可他们太忙了，没人回复我😂。那我只能写下来跟自己说了。</p>
<p>&#8195;&#8195;既然是无聊了，怎么能少的了知乎呢，毕竟全球的高端人士都在上面吹牛皮，哦不对，是畅所欲言。热榜上有一个问题进入了视线 - 怎么样能克制住对一个人的喜欢？诶呦，标题挺有意思，那我要去看一看。🤓</p>
<blockquote>
<p> 想他一次就写一道高数题，久而久之，要么变成高数大佬，要么想起他就恶心（厌恶疗法）。</p>
</blockquote>
<p>&#8195;&#8195;被这个答案逗笑了。当学生真好，还可以用高数题来治疗失恋😂，像我这种上岁数的人就不太行，也不是说不爱学习，是真看不懂了，哈哈哈。</p>
<p>&#8195;&#8195;最近是真觉得自己“老了”，相貌自然没什么大的变化，脸上依旧能看出两个字 - beauty 🤓。首先是近两年的精力没有以前充足了，前一段时间还查出了各种过敏原，提到过敏，我又要哭笑不得了，养了多年的猫，居然对猫过敏了，曾经我还一度怀疑自己是得了哮喘或者花生过敏才会各种不舒服，结果花生没事儿，猫不能养了，拿到医院报告单的时候我哭了，断断续续哭了一天…不过好在最近坚持运动了两三个月，满血复活了；另一个特征是记忆力下降，昨天同事提起多年前我教三方厂商“做人”的事儿，我竟然一点儿都不记得了…也可能是我现在学乖了（挨骂挨多了），不再轻易教别人做人😂；另一个深切影响我的原因是，周围人的身体似乎都在出状况，前一阵听说家里的一位姑姑截肢了、朋友检查出慢性肾衰竭、母亲甲状腺出问题等等，前两天弟弟告诉我他可能胸里面长了个小瘤，一定概率要做手术…恍然间才觉得可怕的不是和同龄人脱节、生活不在同一个节奏，也不是父母催生，是我被周围人“催着老了”，顿感压力暴增…“别哭 前面一定有路”~</p>
<p>&#8195;&#8195;恰饭去，不写了…</p>
<p>&#8195;&#8195;做什么高数大佬，赶快爬起来运动运动吧。成年人的目标 - 好好活着，因为我真的好想，爱这个世界。</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/adult_fatigue.gif"></p>
<hr>
]]></content>
      <tags>
        <tag>我</tag>
      </tags>
  </entry>
  <entry>
    <title>女性管理者</title>
    <url>/2021/08/29/%E5%A5%B3%E6%80%A7%E7%AE%A1%E7%90%86%E8%80%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近在追《理想之城》这部电视剧，看到里面汪明宇提到了他眼中的女性管理者：</p>
<blockquote>
<p>一个女人天生就不适合去做管理层，天天抠细节，情绪化又敏感。你无意当中的一句话，有可能就得罪了她，然后就在肚子里暗撮撮地盘算了又盘算，说不定某一天就成了你的罪状了。我干了这么多年的工作，从来就没见到过一个合格的女性管理者。</p>
</blockquote>
<span id="more"></span>

<p>听他说完以后，我的第一反应不夸张的讲，跟旁边的萝卜君拍手大笑。虽然我自己作为女性也在学着走向管理的道路，但是听完这段评论并没有气愤，而是想到了上一家公司我的组长，也是一位女性。没记错的话，我是因为发烧请了一天假，但因为邻居装修，在家待着简直是折磨自己，电钻的声音仿佛不是从隔壁传来的，而是在我脑子里打洞的声音。于是乎，我去楼下的理发店坐着，顺便烫了个头发……真的是顺便。女生烫了头发个朋友圈是不是也很正常呢？有问题吗？我觉得没有问题，时至今日我都觉得没有问题（好吧，我被教育了，妥协吧，有问题，我应该在朋友圈把她屏蔽对吗？）。但是我这位组长生了大气了，她觉得我请假就是为了烫头，发烧？哈，肯定是在撒谎。那试问我真的请假去烫头有问题吗？此处忽略一万字，避免把我的幼稚表现的太露骨🙄。很有意思吧，听完汪明宇的话，就想到了我的这位同事。以前经历的时候会委屈，现在想起来只剩下好玩儿了，人就是很好玩儿的不是吗。</p>
<p>当然，徐知平回复汪明宇的是：</p>
<blockquote>
<p>这个女性管理者有这样那样的问题，但是有两个优点：一 野心小；二 忠诚度高。</p>
</blockquote>
<p>貌似这两个优点得到了弹幕的一致认可。</p>
<p>其实我觉得汪明宇的看法既是现状，也很客观，女性同胞实在没有必要急着鸣不平。你想想你身边的女同事+自己，哪个不是暗撮撮的在记仇，哈哈。女性本身就是偏向注重细节，而且非常感性的。我们要做到的首先是明确地意识到这一点，然后在工作中时刻提醒自己规避这些障碍。反过来说，古话都说 细节决定成败，那我们注重细节有错吗？我给自己定的目标是：细节更多的是在要求自己的时候，面对同事和下属，尽情展示自己的大局观！</p>
<hr>
<p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.17usatao.com%2Fd%2Ffile%2F2016%2F10%2F28%2Fcbdd1670d4dbf1317459d709213f6686.jpg&refer=http%3A%2F%2Fwww.17usatao.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1632991656&t=465f59b1ef5bf647b54016e07d48494c"></p>
]]></content>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>去掉UIWebView底部的黑条</title>
    <url>/2018/12/13/%E5%8E%BB%E6%8E%89UIWebView%E5%BA%95%E9%83%A8%E7%9A%84%E9%BB%91%E6%9D%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>webview 在多次刷新内容后，正文的下面有一块莫名其妙的黑色区域，如图一，本以为是由于我改了“UIWebDocumentView” 的原因，看到这个属性改了一下，发现居然好了。。。<br><code>opaque 默认是YES</code><br>改为 <code>self.webView.opaque = NO;</code></p>
<span id="more"></span>

<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/3.png" alt="图一"></p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/4.png" alt="图二"></p>
<p>看文档里面的注释，发现，我的英文真的不咋地，自己翻译吧。。。。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">getter</span>=isOpaque) <span class="built_in">BOOL</span>  opaque;                     </span><br><span class="line"><span class="comment">// default is YES. opaque views must fill their entire bounds or the results are undefined. </span></span><br><span class="line"><span class="comment">//the active CGContext in drawRect: will not have been cleared and may have non-zeroed pixels</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>WebView</tag>
      </tags>
  </entry>
  <entry>
    <title>由 Pod 导致的 File not found</title>
    <url>/2020/09/04/%E7%94%B1Pod%E5%AF%BC%E8%87%B4%E7%9A%84FileNotFound/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天对一个 Pod 库做了小版本的升级，然后又回退到原来的版本，CocoaPods 就不乐意了， 一直报 <code>#import &lt;Masonry/Masonry.h&gt; file not found</code> 类似的错误，所有的 Pod 库都这样，着实让人头大。</p>
<span id="more"></span>

<p>解决方法：<br> 点击 <code>YourProject -&gt; Project -&gt; 选中 YourProject -&gt; Info -&gt; Configurations -&gt;</code> 把对应的 <code>Debug</code> 和 <code>Release</code> 里的参数设为 <code>Pods-xxxxxx.Debug / Pods-xxxxxx.Release</code>（这些参数在未设置前应该是 None，可能 CocoaPods 在安装第三方库时没正确设置这个参数）。<br> 重新编译工程，应该能成功了。</p>
<p><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/11.png"></p>
<h6 id><a href="#" class="headerlink" title></a></h6>]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>Xcode</tag>
        <tag>pod</tag>
      </tags>
  </entry>
  <entry>
    <title>绿豆儿没了</title>
    <url>/2021/01/11/%E7%BB%BF%E8%B1%86%E5%84%BF%E6%B2%A1%E4%BA%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><center>
  <div style="display:inline-block;"><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/%E8%B1%86%E5%84%BF.jpg" class width="500"></div>
</center>




<p>我的绿豆儿死了。</p>
<p>昨天晚上11点多，才想起来看看绿豆儿冬眠的怎么样，结果拿起来一看……那个画面感觉这辈子忘不了……</p>
<p>终究是我没照顾好她。希望她去了她想去的地方。</p>
<p>辛苦萝卜君把她和小白埋在一起了。😔😭</p>
]]></content>
      <tags>
        <tag>我</tag>
      </tags>
  </entry>
  <entry>
    <title>装尼玛呢</title>
    <url>/2023/09/23/no_bb/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="什么叫装"><a href="#什么叫装" class="headerlink" title="什么叫装"></a>什么叫装</h2><img src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/danio.jpeg" style="zoom:67%;">

<p>&#8195;&#8195; 什么叫装？</p>
<p>&#8195;&#8195; 前几天一位年长几岁的人提到，男性之间很少有人会真的认为谁比自己强，而且经常会觉得对方在装X，可能女性在这方面没什么体会…讨论之前我们先搞清楚目标，什么叫装？</p>
<p>&#8195;&#8195; 有的人内向，遇到在自己面前侃侃而谈的人，会认为对方在装；有的人遇到喜欢讲话中夹杂着中英文，会认为对方在装；有的人面对别人分享自己新买的车、电脑、手机如何如何，会认为对方在装；有的人听某某说工作换到了大厂，待遇如何如何，会认为对方在装…这些场景估计大家都不陌生，but in my opinion，往往是自卑心理和嫉妒心理在作祟，当然，这也仅仅是基于我个人的认知。人很复杂，人心也很复杂，记得之前有个技术群，三五个好友在里面扯扯淡、聊聊技术，朋友A就特别喜欢发一些专业名词、英文名词，另一个大大咧咧的朋友B就特别看不上这种行为，觉得他在装X，时不时就喜欢怼他两句，直到怼的他很少在群里说话了…但是A平时确实喜欢研究新技术，B呢看着也不自卑，所以也可能单纯看彼此不顺眼… 😂</p>
<p>&#8195;&#8195; so…不是性格比我们好就叫装，他本来就是一个侃侃而谈的人；不是留过学回国后讲英文就叫装，他本来英文就好；不是透露给我们经济条件好就叫装，他本来就有这个条件；不是换了好工作欢呼雀跃就叫装，千里马总会遇到伯乐，因为他本来就是千里马。总之，装，一定不是别人有、我们没有。一般当我在内心想对对方说“装尼玛呢”的时候，都是观察到了对方言行不一、知行不一…</p>
<h2 id="知行合一"><a href="#知行合一" class="headerlink" title="知行合一"></a>知行合一</h2><p>&#8195;&#8195; 我总喜欢用精致形容一个同事，她的工作职责是负责产品需求，可想而知，审美方面自然就比平常人讲究一些。日常着装也都是简约休闲风格，干干净净、利利落落；平时喝茶喝咖啡，自己买的咖啡包连包装都很特别，还是那个词-精致，并且略带小资风；办公桌上的照片、可爱的摆件，也让人觉得她很热爱生活；平时部门组织聚餐也都是她张罗、推荐餐厅，餐厅的风格也总是给人很别致的感觉，同事间自然就流传开，**推荐必属精品。方方面面都很别致，那我们说她是一个精致的人，可信度自然就摆在这里了。</p>
<p>&#8195;&#8195; 另一个合作伙伴，我很想用武者来形容他。日常多是一身黑衣或者其他颜色也都是纯色，非常干练，原以为他只是追求简约，直到有次开会无意间看到了他鞋底板的 logo，才知道人家这叫低调，家庭条件估计很优渥；办公用品收拾的那叫一个利索，曾经一度以为他有洁癖，其实没有；聚餐的时候对每个人也都非常照顾，察言观色、端茶递水，可以说是相当绅士了；至于为什么说他像武者…因为他走路的背景给我一种武者的错觉、会觉得这个人有狭义风范，熟悉他的老人儿也跟我说过，他为人厚厚道道的。诺你看，方方面面的信息又对上了，大概率他是一个绅士，可信度又摆在这里了。</p>
<p>&#8195;&#8195; 每次想夸人的时候，都想到口腔医院的一位牙医主任，北大口腔医学博士，大美女，又专业又温柔，我的牙齿就是被她拯救回来的，妈妈再也不用担心我不好意思哈哈大笑了，哈哈哈🤓~见她时，看她一笑，仿佛整个世界都变美好了；热爱健身、跑步，我看他们北大校友还定期组织团体跑步，朋友圈经常看到他们的照片；皮肤状态特别好，与实际年龄绝对不符；声音还好听，本人对声音好听的人似乎没有什么抵抗力，哈哈哈。所以当她千叮咛万嘱咐让我不要吃螃蟹的时候，我是相信的，当然啦，是基于她的专业知识，绝不是因为声音温柔哈🤓；如果她跟我说她今天刚跑完一个全马、小case、轻轻松松，我也是相信的，大概率她就是一个健健康康、爱运动的人，可信度摆在这里了。说到这里，似乎能做些大事的人，首要的一个特征就是精力充沛，并且都很注重健康、有自己在体育方面的一个特长，跑步、羽毛球、网球等等，哪个大厂的重要人物是每天病恹恹的呢？哪个是印堂发黑、脸色铁青要嘎了一样？哪个是自己连屎尿屁都搞不明白的呢？🤓</p>
<p>&#8195;&#8195; 为什么用可信度呢，总用“感觉、认为、以为”未免太主观了，杠精就要说了：都是你的片面之词、你怎么可能完全了解一个人呢、吧啦吧啦吧啦…所以用可信度更合适，代表这只是我的观察，只是在“举证”，信不信都由你，哈哈。</p>
<p>&#8195;&#8195; 说回举证 😂。大家对“否定型人格”一定不陌生：</p>
<p>&#8195;&#8195; A: “这个茶味道不错，推荐一下。”<br>&#8195;&#8195; B: ”我觉得不好喝。“<br>&#8195;&#8195; C: ”这种橘子味道不错诶，要不要来一个？“<br>&#8195;&#8195; B: ”我不爱吃橘子。“<br>&#8195;&#8195;…<br>&#8195;&#8195;转天 B 就去买了 A/C 推荐的茶和橘子，悄悄吃了起来。耳不耳熟，老一辈的长辈、莫名其妙的某些人…你也不知道他们是图什么，总之先否定，你说的内容对不对、好不好、有没有用，管你呢，先否定了你再说，哈哈哈。</p>
<p>&#8195;&#8195;”要不要尝一尝这个牛肉，味道还可以的。“”不了不了，我最近健身减肥。“，第二天他就去点了一个分量更大的同款。大家约他一起去吃饭，他说”不了不了最近节食减肥“，转头就买了一堆垃圾食品，喜欢单独行动哪怕说自己订饭了呢，为什么给自己贴一个反向标签呢。看着对方日渐消瘦的衣服和外套，扣子都快扛不住了，他是一个健身的人？还是一个想减肥的人？说服力在哪里呢，再巴巴提他健身，那我们只能说-装尼玛呢。</p>
<p>&#8195;&#8195;再比如，一个口臭脚臭的人告诉你他有洁癖，两米之外，人未到，臭先行，好一个洁癖。说服力在哪里？实在没办法信服一个有洁癖的人能允许自己脚臭…好多年。so…装尼玛呢。</p>
<p>&#8195;&#8195;反面例子就不多说了，负能量还是不好传播太多。这个标题似乎也不太贴切，知行合一更注重道德层面，我们纯属闲聊，没有上升到道德层面，领会精神🤓。那用言行一致？🤓</p>
<hr>
]]></content>
      <tags>
        <tag>我</tag>
      </tags>
  </entry>
  <entry>
    <title>我</title>
    <url>/about/index.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="About-Me"><a href="#About-Me" class="headerlink" title="About Me"></a>About Me</h2><p>一个喜欢吃橘子的程序员👩‍💻：</p>
<ul>
<li>笔名：YYLittleCat</li>
<li>法号：迷</li>
<li>特点：明眸皓齿、巧笑嫣然</li>
<li>爱好：周星驰、名侦探柯南</li>
<li>宠物：🐈、🐈、🐢</li>
<li>职业：全菜工程师、半个PM</li>
<li>年龄：初代目90后</li>
</ul>
<p>“关于”，想了很久不知道写点儿什么，我就是一个简简单单的人，喜欢和乐观的人谈心、和厚道的人交朋友、和靠谱的人共事。为什么喜欢吃橘子？因为不用洗呀，很多人都这样不是吗，例如菠萝、香蕉、草莓，你的第一选择是什么？香蕉。剥了皮就可以吃嘛，但其实我最爱吃的水果是菠萝🍍和草莓🍓。</p>
<h2 id="Find-Me"><a href="#Find-Me" class="headerlink" title="Find Me"></a>Find Me</h2><ul>
<li><p>E-Mail：<a href="mailto:&#x7a;&#x68;&#x65;&#x6e;&#103;&#121;&#116;&#95;&#57;&#x31;&#64;&#49;&#x36;&#x33;&#46;&#x63;&#x6f;&#109;">&#x7a;&#x68;&#x65;&#x6e;&#103;&#121;&#116;&#95;&#57;&#x31;&#64;&#49;&#x36;&#x33;&#46;&#x63;&#x6f;&#109;</a> | <a href="mailto:&#122;&#104;&#x65;&#x6e;&#103;&#121;&#x74;&#x40;&#102;&#x6f;&#x78;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#x6d;">&#122;&#104;&#x65;&#x6e;&#103;&#121;&#x74;&#x40;&#102;&#x6f;&#x78;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#x6d;</a></p>
</li>
<li><p>Github：<a href="https://github.com/ATommyGirl">ATommyGirl</a></p>
</li>
<li><p>社交信息：</p>
</li>
</ul>
<center>
    <div style="display:inline-block;"><img src="/about/index/myicon.jpg" class width="100"></div>
    <div style="display:inline-block;margin-left:10px;"><img src="/about/index/myicon.jpg" class width="100"></div>
</center>

<p>欢迎文明交流！</p>
<p>原本，在这里放的是两张微信名片，意在希望所剩不多的 iOS 开发者可以抱团取暖，但之前有个神叨叨的开发者加好友，着实恶心到了本喵，本喵属白色，不愿在污泥烂沟里搅和……思来想去还是把微信名片下线了，有需要交流的朋友留意 E-Mail 和 Github 的信息吧，也可以在最新的文章评论中留言。</p>
<h2 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h2><p>送给读到这里的你一个美丽的日落：</p>
<p><video controls src="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/sundown.MOV" type="video/mp4">您的浏览器不支持播放该视频！</video></p>
]]></content>
  </entry>
  <entry>
    <title>categories</title>
    <url>/categories/index.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
  </entry>
  <entry>
    <title>search</title>
    <url>/search/index.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
  </entry>
  <entry>
    <title>标签🏷</title>
    <url>/tags/index.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><table>
<thead>
<tr>
<th align="center">🤓 <a href="iOS">iOS</a></th>
<th align="center">🛠 <a href="/tags/Xcode/">Xcode</a></th>
<th align="center">🔨 <a href="pod">Pod</a></th>
</tr>
</thead>
<tbody><tr>
<td align="center">😜 <a href="/tags/7788/">7788</a></td>
<td align="center">📖 <a href="/tags/%E8%AF%BB%E4%B9%A6/">读书</a></td>
<td align="center">🕸 <a href="/tags/%E7%BD%91%E7%BB%9C/">网络</a></td>
</tr>
<tr>
<td align="center">💻 <a href="/tags/Mac/">Mac</a></td>
<td align="center">📮 <a href="%E9%82%AE%E7%AE%B1">邮箱</a></td>
<td align="center">🤡 <a href="/tags/%E7%9E%8E%E6%89%AF/">瞎扯</a></td>
</tr>
<tr>
<td align="center">📑 <a href="WebView">WebView</a></td>
<td align="center">😍 <a href="/tags/%E6%88%91/">我</a></td>
<td align="center">💾 <a href="/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/">服务器</a></td>
</tr>
<tr>
<td align="center">💿 <a href="/tags/CentOS/">CentOS</a></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>回忆</title>
    <url>/gallery/index.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
  </entry>
  <entry>
    <title>昆明</title>
    <url>/gallery/%E6%98%86%E6%98%8E/index.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/%E6%98%86%E6%98%8E/km_5.jpg">https://yyblog-images-1258406742.cos.ap-beijing.myqcloud.com/%E6%98%86%E6%98%8E/km_5.jpg</a></p>
]]></content>
  </entry>
</search>
